Search.setIndex({"docnames": ["index", "reference/collectors", "reference/data", "reference/envs", "reference/generated/knowledge_base/DEBUGGING_RL", "reference/generated/knowledge_base/GYM", "reference/generated/knowledge_base/HABITAT", "reference/generated/knowledge_base/MUJOCO_INSTALLATION", "reference/generated/knowledge_base/PRO-TIPS", "reference/generated/knowledge_base/RESOURCES", "reference/generated/knowledge_base/VERSIONING_ISSUES", "reference/generated/torchrl._utils.implement_for", "reference/generated/torchrl.collectors.collectors.DataCollectorBase", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector", "reference/generated/torchrl.collectors.collectors.RandomPolicy", "reference/generated/torchrl.collectors.collectors.SyncDataCollector", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector", "reference/generated/torchrl.collectors.distributed.RPCDataCollector", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher", "reference/generated/torchrl.collectors.utils.split_trajectories", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec", "reference/generated/torchrl.data.BoundedTensorSpec", "reference/generated/torchrl.data.CompositeSpec", "reference/generated/torchrl.data.DiscreteTensorSpec", "reference/generated/torchrl.data.MultiDiscreteTensorSpec", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec", "reference/generated/torchrl.data.PrioritizedReplayBuffer", "reference/generated/torchrl.data.ReplayBuffer", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer", "reference/generated/torchrl.data.TensorDictReplayBuffer", "reference/generated/torchrl.data.TensorSpec", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage", "reference/generated/torchrl.data.replay_buffers.ListStorage", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler", "reference/generated/torchrl.data.replay_buffers.RandomSampler", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter", "reference/generated/torchrl.data.replay_buffers.Sampler", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement", "reference/generated/torchrl.data.replay_buffers.Storage", "reference/generated/torchrl.data.replay_buffers.Writer", "reference/generated/torchrl.envs.EnvBase", "reference/generated/torchrl.envs.EnvCreator", "reference/generated/torchrl.envs.EnvMetaData", "reference/generated/torchrl.envs.GymLikeEnv", "reference/generated/torchrl.envs.ModelBasedEnvBase", "reference/generated/torchrl.envs.MultiThreadedEnv", "reference/generated/torchrl.envs.ParallelEnv", "reference/generated/torchrl.envs.SerialEnv", "reference/generated/torchrl.envs.libs.brax.BraxEnv", "reference/generated/torchrl.envs.libs.brax.BraxWrapper", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper", "reference/generated/torchrl.envs.libs.gym.GymEnv", "reference/generated/torchrl.envs.libs.gym.GymWrapper", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper", "reference/generated/torchrl.envs.libs.vmas.VmasEnv", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv", "reference/generated/torchrl.envs.transforms.BinarizeReward", "reference/generated/torchrl.envs.transforms.CatFrames", "reference/generated/torchrl.envs.transforms.CatTensors", "reference/generated/torchrl.envs.transforms.CenterCrop", "reference/generated/torchrl.envs.transforms.Compose", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection", "reference/generated/torchrl.envs.transforms.DoubleToFloat", "reference/generated/torchrl.envs.transforms.ExcludeTransform", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck", "reference/generated/torchrl.envs.transforms.FlattenObservation", "reference/generated/torchrl.envs.transforms.FrameSkipTransform", "reference/generated/torchrl.envs.transforms.GrayScale", "reference/generated/torchrl.envs.transforms.InitTracker", "reference/generated/torchrl.envs.transforms.NoopResetEnv", "reference/generated/torchrl.envs.transforms.ObservationNorm", "reference/generated/torchrl.envs.transforms.ObservationTransform", "reference/generated/torchrl.envs.transforms.PinMemoryTransform", "reference/generated/torchrl.envs.transforms.R3MTransform", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict", "reference/generated/torchrl.envs.transforms.RenameTransform", "reference/generated/torchrl.envs.transforms.Resize", "reference/generated/torchrl.envs.transforms.RewardClipping", "reference/generated/torchrl.envs.transforms.RewardScaling", "reference/generated/torchrl.envs.transforms.RewardSum", "reference/generated/torchrl.envs.transforms.SelectTransform", "reference/generated/torchrl.envs.transforms.SqueezeTransform", "reference/generated/torchrl.envs.transforms.StepCounter", "reference/generated/torchrl.envs.transforms.TensorDictPrimer", "reference/generated/torchrl.envs.transforms.TimeMaxPool", "reference/generated/torchrl.envs.transforms.ToTensorImage", "reference/generated/torchrl.envs.transforms.Transform", "reference/generated/torchrl.envs.transforms.TransformedEnv", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform", "reference/generated/torchrl.envs.transforms.VIPRewardTransform", "reference/generated/torchrl.envs.transforms.VIPTransform", "reference/generated/torchrl.envs.transforms.VecNorm", "reference/generated/torchrl.envs.transforms.gSDENoise", "reference/generated/torchrl.envs.utils.check_env_specs", "reference/generated/torchrl.envs.utils.exploration_mode", "reference/generated/torchrl.envs.utils.get_available_libraries", "reference/generated/torchrl.envs.utils.set_exploration_mode", "reference/generated/torchrl.envs.utils.step_mdp", "reference/generated/torchrl.modules.CEMPlanner", "reference/generated/torchrl.modules.ConvNet", "reference/generated/torchrl.modules.DdpgCnnActor", "reference/generated/torchrl.modules.DdpgCnnQNet", "reference/generated/torchrl.modules.DdpgMlpActor", "reference/generated/torchrl.modules.DdpgMlpQNet", "reference/generated/torchrl.modules.Delta", "reference/generated/torchrl.modules.DistributionalDQNnet", "reference/generated/torchrl.modules.DreamerActor", "reference/generated/torchrl.modules.DuelingCnnDQNet", "reference/generated/torchrl.modules.IndependentNormal", "reference/generated/torchrl.modules.LSTMNet", "reference/generated/torchrl.modules.MLP", "reference/generated/torchrl.modules.MPCPlannerBase", "reference/generated/torchrl.modules.MPPIPlanner", "reference/generated/torchrl.modules.NoisyLazyLinear", "reference/generated/torchrl.modules.NoisyLinear", "reference/generated/torchrl.modules.NormalParamWrapper", "reference/generated/torchrl.modules.ObsDecoder", "reference/generated/torchrl.modules.ObsEncoder", "reference/generated/torchrl.modules.OneHotCategorical", "reference/generated/torchrl.modules.RSSMPosterior", "reference/generated/torchrl.modules.RSSMPrior", "reference/generated/torchrl.modules.TanhDelta", "reference/generated/torchrl.modules.TanhNormal", "reference/generated/torchrl.modules.TruncatedNormal", "reference/generated/torchrl.modules.reset_noise", "reference/generated/torchrl.modules.tensordict_module.Actor", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor", "reference/generated/torchrl.modules.tensordict_module.QValueActor", "reference/generated/torchrl.modules.tensordict_module.SafeModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticSequential", "reference/generated/torchrl.modules.tensordict_module.SafeSequential", "reference/generated/torchrl.modules.tensordict_module.ValueOperator", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper", "reference/generated/torchrl.modules.tensordict_module.actors.DistributionalQValueHook", "reference/generated/torchrl.modules.tensordict_module.actors.QValueHook", "reference/generated/torchrl.modules.tensordict_module.common.ensure_tensordict_compatible", "reference/generated/torchrl.modules.tensordict_module.common.is_tensordict_compatible", "reference/generated/torchrl.modules.utils.biased_softplus", "reference/generated/torchrl.modules.utils.inv_softplus", "reference/generated/torchrl.modules.utils.mappings", "reference/generated/torchrl.objectives.A2CLoss", "reference/generated/torchrl.objectives.ClipPPOLoss", "reference/generated/torchrl.objectives.DDPGLoss", "reference/generated/torchrl.objectives.DQNLoss", "reference/generated/torchrl.objectives.DiscreteSACLoss", "reference/generated/torchrl.objectives.DistributionalDQNLoss", "reference/generated/torchrl.objectives.DreamerActorLoss", "reference/generated/torchrl.objectives.DreamerModelLoss", "reference/generated/torchrl.objectives.DreamerValueLoss", "reference/generated/torchrl.objectives.HardUpdate", "reference/generated/torchrl.objectives.IQLLoss", "reference/generated/torchrl.objectives.KLPENPPOLoss", "reference/generated/torchrl.objectives.PPOLoss", "reference/generated/torchrl.objectives.REDQLoss", "reference/generated/torchrl.objectives.ReinforceLoss", "reference/generated/torchrl.objectives.SACLoss", "reference/generated/torchrl.objectives.SoftUpdate", "reference/generated/torchrl.objectives.TD3Loss", "reference/generated/torchrl.objectives.distance_loss", "reference/generated/torchrl.objectives.hold_out_net", "reference/generated/torchrl.objectives.hold_out_params", "reference/generated/torchrl.objectives.next_state_value", "reference/generated/torchrl.objectives.value.GAE", "reference/generated/torchrl.objectives.value.TDEstimate", "reference/generated/torchrl.objectives.value.TDLambdaEstimate", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate", "reference/generated/torchrl.record.TensorDictRecorder", "reference/generated/torchrl.record.VideoRecorder", "reference/generated/torchrl.record.loggers.Logger", "reference/generated/torchrl.record.loggers.csv.CSVLogger", "reference/generated/torchrl.record.loggers.generate_exp_name", "reference/generated/torchrl.record.loggers.get_logger", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger", "reference/generated/torchrl.record.loggers.wandb.WandbLogger", "reference/generated/torchrl.trainers.BatchSubSampler", "reference/generated/torchrl.trainers.ClearCudaCache", "reference/generated/torchrl.trainers.CountFramesLog", "reference/generated/torchrl.trainers.LogReward", "reference/generated/torchrl.trainers.OptimizerHook", "reference/generated/torchrl.trainers.Recorder", "reference/generated/torchrl.trainers.ReplayBufferTrainer", "reference/generated/torchrl.trainers.RewardNormalizer", "reference/generated/torchrl.trainers.SelectKeys", "reference/generated/torchrl.trainers.Trainer", "reference/generated/torchrl.trainers.TrainerHookBase", "reference/generated/torchrl.trainers.UpdateWeights", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout", "reference/generated/torchrl.trainers.helpers.make_a2c_loss", "reference/generated/torchrl.trainers.helpers.make_a2c_model", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss", "reference/generated/torchrl.trainers.helpers.make_dqn_actor", "reference/generated/torchrl.trainers.helpers.make_dqn_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_model", "reference/generated/torchrl.trainers.helpers.make_redq_loss", "reference/generated/torchrl.trainers.helpers.make_redq_model", "reference/generated/torchrl.trainers.helpers.make_replay_buffer", "reference/generated/torchrl.trainers.helpers.make_sac_loss", "reference/generated/torchrl.trainers.helpers.make_sac_model", "reference/generated/torchrl.trainers.helpers.make_target_updater", "reference/generated/torchrl.trainers.helpers.make_trainer", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor", "reference/generated/torchrl.trainers.helpers.sync_async_collector", "reference/generated/torchrl.trainers.helpers.sync_sync_collector", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor", "reference/generated/tutorials/README", "reference/index", "reference/knowledge_base", "reference/modules", "reference/objectives", "reference/trainers", "reference/utils", "tutorials/coding_ddpg", "tutorials/coding_dqn", "tutorials/coding_ppo", "tutorials/index", "tutorials/multi_task", "tutorials/pendulum", "tutorials/pretrained_models", "tutorials/sg_execution_times", "tutorials/torchrl_demo", "tutorials/torchrl_envs"], "filenames": ["index.rst", "reference/collectors.rst", "reference/data.rst", "reference/envs.rst", "reference/generated/knowledge_base/DEBUGGING_RL.rst", "reference/generated/knowledge_base/GYM.rst", "reference/generated/knowledge_base/HABITAT.rst", "reference/generated/knowledge_base/MUJOCO_INSTALLATION.rst", "reference/generated/knowledge_base/PRO-TIPS.rst", "reference/generated/knowledge_base/RESOURCES.rst", "reference/generated/knowledge_base/VERSIONING_ISSUES.rst", "reference/generated/torchrl._utils.implement_for.rst", "reference/generated/torchrl.collectors.collectors.DataCollectorBase.rst", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.RandomPolicy.rst", "reference/generated/torchrl.collectors.collectors.SyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedDataCollector.rst", "reference/generated/torchrl.collectors.distributed.DistributedSyncDataCollector.rst", "reference/generated/torchrl.collectors.distributed.RPCDataCollector.rst", "reference/generated/torchrl.collectors.distributed.submitit_delayed_launcher.rst", "reference/generated/torchrl.collectors.utils.split_trajectories.rst", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec.rst", "reference/generated/torchrl.data.BoundedTensorSpec.rst", "reference/generated/torchrl.data.CompositeSpec.rst", "reference/generated/torchrl.data.DiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.PrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.ReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictReplayBuffer.rst", "reference/generated/torchrl.data.TensorSpec.rst", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec.rst", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec.rst", "reference/generated/torchrl.data.datasets.D4RLExperienceReplay.rst", "reference/generated/torchrl.data.replay_buffers.LazyMemmapStorage.rst", "reference/generated/torchrl.data.replay_buffers.LazyTensorStorage.rst", "reference/generated/torchrl.data.replay_buffers.ListStorage.rst", "reference/generated/torchrl.data.replay_buffers.PrioritizedSampler.rst", "reference/generated/torchrl.data.replay_buffers.RandomSampler.rst", "reference/generated/torchrl.data.replay_buffers.RoundRobinWriter.rst", "reference/generated/torchrl.data.replay_buffers.Sampler.rst", "reference/generated/torchrl.data.replay_buffers.SamplerWithoutReplacement.rst", "reference/generated/torchrl.data.replay_buffers.Storage.rst", "reference/generated/torchrl.data.replay_buffers.Writer.rst", "reference/generated/torchrl.envs.EnvBase.rst", "reference/generated/torchrl.envs.EnvCreator.rst", "reference/generated/torchrl.envs.EnvMetaData.rst", "reference/generated/torchrl.envs.GymLikeEnv.rst", "reference/generated/torchrl.envs.ModelBasedEnvBase.rst", "reference/generated/torchrl.envs.MultiThreadedEnv.rst", "reference/generated/torchrl.envs.ParallelEnv.rst", "reference/generated/torchrl.envs.SerialEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxWrapper.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper.rst", "reference/generated/torchrl.envs.libs.gym.GymEnv.rst", "reference/generated/torchrl.envs.libs.gym.GymWrapper.rst", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper.rst", "reference/generated/torchrl.envs.libs.vmas.VmasEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper.rst", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv.rst", "reference/generated/torchrl.envs.transforms.BinarizeReward.rst", "reference/generated/torchrl.envs.transforms.CatFrames.rst", "reference/generated/torchrl.envs.transforms.CatTensors.rst", "reference/generated/torchrl.envs.transforms.CenterCrop.rst", "reference/generated/torchrl.envs.transforms.Compose.rst", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection.rst", "reference/generated/torchrl.envs.transforms.DoubleToFloat.rst", "reference/generated/torchrl.envs.transforms.ExcludeTransform.rst", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck.rst", "reference/generated/torchrl.envs.transforms.FlattenObservation.rst", "reference/generated/torchrl.envs.transforms.FrameSkipTransform.rst", "reference/generated/torchrl.envs.transforms.GrayScale.rst", "reference/generated/torchrl.envs.transforms.InitTracker.rst", "reference/generated/torchrl.envs.transforms.NoopResetEnv.rst", "reference/generated/torchrl.envs.transforms.ObservationNorm.rst", "reference/generated/torchrl.envs.transforms.ObservationTransform.rst", "reference/generated/torchrl.envs.transforms.PinMemoryTransform.rst", "reference/generated/torchrl.envs.transforms.R3MTransform.rst", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict.rst", "reference/generated/torchrl.envs.transforms.RenameTransform.rst", "reference/generated/torchrl.envs.transforms.Resize.rst", "reference/generated/torchrl.envs.transforms.RewardClipping.rst", "reference/generated/torchrl.envs.transforms.RewardScaling.rst", "reference/generated/torchrl.envs.transforms.RewardSum.rst", "reference/generated/torchrl.envs.transforms.SelectTransform.rst", "reference/generated/torchrl.envs.transforms.SqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.StepCounter.rst", "reference/generated/torchrl.envs.transforms.TensorDictPrimer.rst", "reference/generated/torchrl.envs.transforms.TimeMaxPool.rst", "reference/generated/torchrl.envs.transforms.ToTensorImage.rst", "reference/generated/torchrl.envs.transforms.Transform.rst", "reference/generated/torchrl.envs.transforms.TransformedEnv.rst", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.VIPRewardTransform.rst", "reference/generated/torchrl.envs.transforms.VIPTransform.rst", "reference/generated/torchrl.envs.transforms.VecNorm.rst", "reference/generated/torchrl.envs.transforms.gSDENoise.rst", "reference/generated/torchrl.envs.utils.check_env_specs.rst", "reference/generated/torchrl.envs.utils.exploration_mode.rst", "reference/generated/torchrl.envs.utils.get_available_libraries.rst", "reference/generated/torchrl.envs.utils.set_exploration_mode.rst", "reference/generated/torchrl.envs.utils.step_mdp.rst", "reference/generated/torchrl.modules.CEMPlanner.rst", "reference/generated/torchrl.modules.ConvNet.rst", "reference/generated/torchrl.modules.DdpgCnnActor.rst", "reference/generated/torchrl.modules.DdpgCnnQNet.rst", "reference/generated/torchrl.modules.DdpgMlpActor.rst", "reference/generated/torchrl.modules.DdpgMlpQNet.rst", "reference/generated/torchrl.modules.Delta.rst", "reference/generated/torchrl.modules.DistributionalDQNnet.rst", "reference/generated/torchrl.modules.DreamerActor.rst", "reference/generated/torchrl.modules.DuelingCnnDQNet.rst", "reference/generated/torchrl.modules.IndependentNormal.rst", "reference/generated/torchrl.modules.LSTMNet.rst", "reference/generated/torchrl.modules.MLP.rst", "reference/generated/torchrl.modules.MPCPlannerBase.rst", "reference/generated/torchrl.modules.MPPIPlanner.rst", "reference/generated/torchrl.modules.NoisyLazyLinear.rst", "reference/generated/torchrl.modules.NoisyLinear.rst", "reference/generated/torchrl.modules.NormalParamWrapper.rst", "reference/generated/torchrl.modules.ObsDecoder.rst", "reference/generated/torchrl.modules.ObsEncoder.rst", "reference/generated/torchrl.modules.OneHotCategorical.rst", "reference/generated/torchrl.modules.RSSMPosterior.rst", "reference/generated/torchrl.modules.RSSMPrior.rst", "reference/generated/torchrl.modules.TanhDelta.rst", "reference/generated/torchrl.modules.TanhNormal.rst", "reference/generated/torchrl.modules.TruncatedNormal.rst", "reference/generated/torchrl.modules.reset_noise.rst", "reference/generated/torchrl.modules.tensordict_module.Actor.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.SafeModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticSequential.rst", "reference/generated/torchrl.modules.tensordict_module.SafeSequential.rst", "reference/generated/torchrl.modules.tensordict_module.ValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.actors.DistributionalQValueHook.rst", "reference/generated/torchrl.modules.tensordict_module.actors.QValueHook.rst", "reference/generated/torchrl.modules.tensordict_module.common.ensure_tensordict_compatible.rst", "reference/generated/torchrl.modules.tensordict_module.common.is_tensordict_compatible.rst", "reference/generated/torchrl.modules.utils.biased_softplus.rst", "reference/generated/torchrl.modules.utils.inv_softplus.rst", "reference/generated/torchrl.modules.utils.mappings.rst", "reference/generated/torchrl.objectives.A2CLoss.rst", "reference/generated/torchrl.objectives.ClipPPOLoss.rst", "reference/generated/torchrl.objectives.DDPGLoss.rst", "reference/generated/torchrl.objectives.DQNLoss.rst", "reference/generated/torchrl.objectives.DiscreteSACLoss.rst", "reference/generated/torchrl.objectives.DistributionalDQNLoss.rst", "reference/generated/torchrl.objectives.DreamerActorLoss.rst", "reference/generated/torchrl.objectives.DreamerModelLoss.rst", "reference/generated/torchrl.objectives.DreamerValueLoss.rst", "reference/generated/torchrl.objectives.HardUpdate.rst", "reference/generated/torchrl.objectives.IQLLoss.rst", "reference/generated/torchrl.objectives.KLPENPPOLoss.rst", "reference/generated/torchrl.objectives.PPOLoss.rst", "reference/generated/torchrl.objectives.REDQLoss.rst", "reference/generated/torchrl.objectives.ReinforceLoss.rst", "reference/generated/torchrl.objectives.SACLoss.rst", "reference/generated/torchrl.objectives.SoftUpdate.rst", "reference/generated/torchrl.objectives.TD3Loss.rst", "reference/generated/torchrl.objectives.distance_loss.rst", "reference/generated/torchrl.objectives.hold_out_net.rst", "reference/generated/torchrl.objectives.hold_out_params.rst", "reference/generated/torchrl.objectives.next_state_value.rst", "reference/generated/torchrl.objectives.value.GAE.rst", "reference/generated/torchrl.objectives.value.TDEstimate.rst", "reference/generated/torchrl.objectives.value.TDLambdaEstimate.rst", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate.rst", "reference/generated/torchrl.record.TensorDictRecorder.rst", "reference/generated/torchrl.record.VideoRecorder.rst", "reference/generated/torchrl.record.loggers.Logger.rst", "reference/generated/torchrl.record.loggers.csv.CSVLogger.rst", "reference/generated/torchrl.record.loggers.generate_exp_name.rst", "reference/generated/torchrl.record.loggers.get_logger.rst", "reference/generated/torchrl.record.loggers.mlflow.MLFlowLogger.rst", "reference/generated/torchrl.record.loggers.tensorboard.TensorboardLogger.rst", "reference/generated/torchrl.record.loggers.wandb.WandbLogger.rst", "reference/generated/torchrl.trainers.BatchSubSampler.rst", "reference/generated/torchrl.trainers.ClearCudaCache.rst", "reference/generated/torchrl.trainers.CountFramesLog.rst", "reference/generated/torchrl.trainers.LogReward.rst", "reference/generated/torchrl.trainers.OptimizerHook.rst", "reference/generated/torchrl.trainers.Recorder.rst", "reference/generated/torchrl.trainers.ReplayBufferTrainer.rst", "reference/generated/torchrl.trainers.RewardNormalizer.rst", "reference/generated/torchrl.trainers.SelectKeys.rst", "reference/generated/torchrl.trainers.Trainer.rst", "reference/generated/torchrl.trainers.TrainerHookBase.rst", "reference/generated/torchrl.trainers.UpdateWeights.rst", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip.rst", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_loss.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_model.rst", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_actor.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_model.rst", "reference/generated/torchrl.trainers.helpers.make_redq_loss.rst", "reference/generated/torchrl.trainers.helpers.make_redq_model.rst", "reference/generated/torchrl.trainers.helpers.make_replay_buffer.rst", "reference/generated/torchrl.trainers.helpers.make_sac_loss.rst", "reference/generated/torchrl.trainers.helpers.make_sac_model.rst", "reference/generated/torchrl.trainers.helpers.make_target_updater.rst", "reference/generated/torchrl.trainers.helpers.make_trainer.rst", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor.rst", "reference/generated/torchrl.trainers.helpers.sync_async_collector.rst", "reference/generated/torchrl.trainers.helpers.sync_sync_collector.rst", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor.rst", "reference/generated/tutorials/README.rst", "reference/index.rst", "reference/knowledge_base.rst", "reference/modules.rst", "reference/objectives.rst", "reference/trainers.rst", "reference/utils.rst", "tutorials/coding_ddpg.rst", "tutorials/coding_dqn.rst", "tutorials/coding_ppo.rst", "tutorials/index.rst", "tutorials/multi_task.rst", "tutorials/pendulum.rst", "tutorials/pretrained_models.rst", "tutorials/sg_execution_times.rst", "tutorials/torchrl_demo.rst", "tutorials/torchrl_envs.rst"], "titles": ["Welcome to the TorchRL Documentation!", "torchrl.collectors package", "torchrl.data package", "torchrl.envs package", "Things to consider when debugging RL", "Working with gym", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">habitat-lab</span></code>", "Working with MuJoCo-based environments", "Common PyTorch errors and solutions", "Useful resources", "Versioning Issues", "implement_for", "DataCollectorBase", "MultiSyncDataCollector", "MultiaSyncDataCollector", "RandomPolicy", "SyncDataCollector", "aSyncDataCollector", "DistributedDataCollector", "DistributedSyncDataCollector", "RPCDataCollector", "submitit_delayed_launcher", "split_trajectories", "BinaryDiscreteTensorSpec", "BoundedTensorSpec", "CompositeSpec", "DiscreteTensorSpec", "MultiDiscreteTensorSpec", "MultiOneHotDiscreteTensorSpec", "OneHotDiscreteTensorSpec", "PrioritizedReplayBuffer", "ReplayBuffer", "TensorDictPrioritizedReplayBuffer", "TensorDictReplayBuffer", "TensorSpec", "UnboundedContinuousTensorSpec", "UnboundedDiscreteTensorSpec", "D4RLExperienceReplay", "LazyMemmapStorage", "LazyTensorStorage", "ListStorage", "PrioritizedSampler", "RandomSampler", "RoundRobinWriter", "Sampler", "SamplerWithoutReplacement", "Storage", "Writer", "EnvBase", "EnvCreator", "EnvMetaData", "GymLikeEnv", "ModelBasedEnvBase", "MultiThreadedEnv", "ParallelEnv", "SerialEnv", "BraxEnv", "BraxWrapper", "DMControlEnv", "DMControlWrapper", "GymEnv", "GymWrapper", "HabitatEnv", "JumanjiEnv", "JumanjiWrapper", "VmasEnv", "VmasWrapper", "DreamerEnv", "BinarizeReward", "CatFrames", "CatTensors", "CenterCrop", "Compose", "DiscreteActionProjection", "DoubleToFloat", "ExcludeTransform", "FiniteTensorDictCheck", "FlattenObservation", "FrameSkipTransform", "GrayScale", "InitTracker", "NoopResetEnv", "ObservationNorm", "ObservationTransform", "PinMemoryTransform", "R3MTransform", "RandomCropTensorDict", "RenameTransform", "Resize", "RewardClipping", "RewardScaling", "RewardSum", "SelectTransform", "SqueezeTransform", "StepCounter", "TensorDictPrimer", "TimeMaxPool", "ToTensorImage", "Transform", "TransformedEnv", "UnsqueezeTransform", "VIPRewardTransform", "VIPTransform", "VecNorm", "gSDENoise", "check_env_specs", "exploration_mode", "get_available_libraries", "set_exploration_mode", "step_mdp", "CEMPlanner", "ConvNet", "DdpgCnnActor", "DdpgCnnQNet", "DdpgMlpActor", "DdpgMlpQNet", "Delta", "DistributionalDQNnet", "DreamerActor", "DuelingCnnDQNet", "IndependentNormal", "LSTMNet", "MLP", "MPCPlannerBase", "MPPIPlanner", "NoisyLazyLinear", "NoisyLinear", "NormalParamWrapper", "ObsDecoder", "ObsEncoder", "OneHotCategorical", "RSSMPosterior", "RSSMPrior", "TanhDelta", "TanhNormal", "TruncatedNormal", "reset_noise", "Actor", "ActorCriticOperator", "ActorCriticWrapper", "ActorValueOperator", "AdditiveGaussianWrapper", "DistributionalQValueActor", "EGreedyWrapper", "OrnsteinUhlenbeckProcessWrapper", "ProbabilisticActor", "QValueActor", "SafeModule", "SafeProbabilisticModule", "SafeProbabilisticSequential", "SafeSequential", "ValueOperator", "WorldModelWrapper", "DistributionalQValueHook", "QValueHook", "ensure_tensordict_compatible", "is_tensordict_compatible", "biased_softplus", "inv_softplus", "mappings", "A2CLoss", "ClipPPOLoss", "DDPGLoss", "DQNLoss", "DiscreteSACLoss", "DistributionalDQNLoss", "DreamerActorLoss", "DreamerModelLoss", "DreamerValueLoss", "HardUpdate", "IQLLoss", "KLPENPPOLoss", "PPOLoss", "REDQLoss", "ReinforceLoss", "SACLoss", "SoftUpdate", "TD3Loss", "distance_loss", "hold_out_net", "hold_out_params", "next_state_value", "GAE", "TDEstimate", "TDLambdaEstimate", "generalized_advantage_estimate", "td_advantage_estimate", "td_lambda_advantage_estimate", "td_lambda_return_estimate", "vec_generalized_advantage_estimate", "vec_td_lambda_advantage_estimate", "vec_td_lambda_return_estimate", "TensorDictRecorder", "VideoRecorder", "Logger", "CSVLogger", "generate_exp_name", "get_logger", "MLFlowLogger", "TensorboardLogger", "WandbLogger", "BatchSubSampler", "ClearCudaCache", "CountFramesLog", "LogReward", "OptimizerHook", "Recorder", "ReplayBufferTrainer", "RewardNormalizer", "SelectKeys", "Trainer", "TrainerHookBase", "UpdateWeights", "correct_for_frame_skip", "get_stats_random_rollout", "make_a2c_loss", "make_a2c_model", "make_collector_offpolicy", "make_collector_onpolicy", "make_ddpg_actor", "make_ddpg_loss", "make_dqn_actor", "make_dqn_loss", "make_ppo_loss", "make_ppo_model", "make_redq_loss", "make_redq_model", "make_replay_buffer", "make_sac_loss", "make_sac_model", "make_target_updater", "make_trainer", "parallel_env_constructor", "sync_async_collector", "sync_sync_collector", "transformed_env_constructor", "README Tutos", "API Reference", "Knowledge Base", "torchrl.modules package", "torchrl.objectives package", "torchrl.trainers package", "torchrl._utils package", "Coding DDPG using TorchRL", "Coding a pixel-based DQN using TorchRL", "Reinforcement Learning (PPO) with TorchRL Tutorial", "README Tutos", "Task-specific policy in multi-task environments", "Pendulum: Writing your environment and transforms with TorchRL", "Using pretrained models", "Computation times", "Introduction to TorchRL", "TorchRL envs"], "terms": {"The": [0, 1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 46, 48, 51, 53, 54, 55, 72, 75, 82, 85, 90, 92, 95, 99, 102, 109, 110, 112, 113, 114, 115, 121, 123, 124, 126, 127, 131, 132, 137, 138, 144, 145, 147, 148, 150, 151, 152, 157, 161, 162, 163, 166, 167, 168, 170, 171, 175, 181, 182, 183, 184, 195, 198, 199, 200, 201, 205, 231, 233, 234, 241, 243, 244, 245, 248, 249, 251, 252], "tensordict": [0, 1, 3, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 31, 32, 33, 37, 38, 39, 41, 48, 49, 50, 51, 52, 53, 54, 55, 57, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 109, 110, 121, 123, 124, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 192, 201, 205, 207, 209, 210, 216, 219, 221, 224, 226, 229, 237, 241, 243, 244, 245, 247, 248, 249, 252], "class": [0, 1, 2, 3, 5, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 233, 234, 235, 241, 243, 244, 245, 252], "ha": [0, 3, 4, 5, 7, 8, 10, 16, 17, 18, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 49, 51, 53, 54, 55, 69, 95, 99, 141, 143, 148, 171, 243, 244, 245, 247, 248, 249, 251, 252], "been": [0, 5, 7, 8, 17, 18, 20, 45, 48, 51, 53, 54, 55, 98, 244, 245, 247, 248, 252], "move": [0, 4, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 103, 109, 122, 147, 208, 243, 244, 251, 252], "out": [0, 3, 4, 5, 37, 48, 51, 53, 54, 55, 95, 105, 125, 126, 144, 147, 148, 179, 180, 241, 243, 244, 245, 248, 251, 252], "dedic": [0, 1, 18, 19, 20, 138, 139, 140, 243, 247], "librari": [0, 5, 6, 7, 8, 9, 10, 18, 19, 20, 37, 53, 107, 237, 238, 242, 245, 248, 252], "take": [0, 1, 3, 8, 22, 48, 51, 53, 54, 55, 94, 96, 98, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 159, 185, 186, 187, 188, 189, 190, 191, 201, 212, 241, 243, 244, 245, 248, 252], "look": [0, 3, 5, 7, 8, 48, 51, 53, 54, 55, 85, 86, 148, 149, 150, 244, 245, 248, 249, 251, 252], "find": [0, 1, 4, 6, 18, 19, 20, 141, 143, 204, 208], "sourc": [0, 1, 4, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 243, 244, 245, 246, 247, 248, 249, 251, 252], "code": [0, 3, 5, 7, 8, 85, 150, 245, 246, 247, 249, 250, 251, 252], "github": [0, 2, 5, 6, 7, 10, 18, 19, 20, 249, 251], "i": [0, 1, 2, 3, 6, 7, 10, 11, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 45, 46, 48, 49, 51, 52, 53, 54, 55, 58, 68, 69, 70, 71, 72, 73, 75, 77, 80, 81, 82, 85, 86, 87, 90, 91, 92, 94, 95, 97, 98, 99, 101, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 116, 118, 119, 120, 121, 122, 123, 125, 126, 127, 132, 133, 134, 135, 137, 138, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 201, 203, 204, 205, 206, 207, 208, 210, 213, 214, 216, 219, 224, 226, 229, 231, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "an": [0, 1, 2, 3, 5, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 71, 73, 76, 81, 82, 85, 86, 87, 88, 95, 97, 98, 99, 103, 105, 111, 112, 113, 114, 115, 121, 122, 123, 125, 129, 138, 139, 140, 144, 147, 148, 149, 152, 155, 156, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 193, 196, 205, 206, 210, 211, 214, 219, 232, 233, 234, 235, 238, 243, 244, 247, 249, 251, 252], "open": [0, 5, 7, 11, 251], "reinforc": [0, 2, 3, 9, 69, 112, 113, 114, 115, 144, 153, 160, 165, 169, 170, 174, 175, 176, 219, 237, 244, 246, 248, 250, 251], "learn": [0, 2, 3, 7, 8, 9, 18, 69, 112, 113, 114, 115, 124, 126, 144, 153, 160, 165, 169, 170, 173, 174, 175, 176, 219, 243, 244, 246, 247, 248, 250, 251, 252], "rl": [0, 1, 2, 3, 5, 8, 10, 13, 14, 16, 17, 52, 126, 137, 145, 151, 160, 172, 201, 238, 241, 243, 244, 245, 249, 252], "pytorch": [0, 1, 2, 97, 210, 238, 241, 243, 244, 245, 248, 249, 251, 252], "It": [0, 2, 3, 4, 7, 32, 37, 48, 51, 52, 53, 54, 55, 62, 82, 86, 99, 105, 112, 114, 118, 131, 132, 144, 148, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 206, 226, 238, 243, 248, 249, 251, 252], "provid": [0, 1, 2, 3, 5, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 27, 28, 29, 30, 31, 32, 33, 37, 42, 48, 51, 52, 53, 54, 55, 70, 71, 77, 81, 82, 85, 86, 91, 95, 99, 102, 103, 111, 121, 122, 123, 137, 141, 143, 145, 153, 170, 175, 181, 182, 183, 184, 193, 197, 201, 207, 214, 216, 224, 226, 229, 231, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "python": [0, 3, 5, 6, 7, 10, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252], "first": [0, 1, 3, 4, 5, 7, 8, 11, 18, 20, 37, 51, 70, 77, 82, 85, 86, 97, 99, 122, 125, 129, 147, 148, 167, 192, 209, 243, 244, 245, 247, 248, 249, 251, 252], "low": [0, 73, 244, 248, 251], "high": [0, 9, 73, 182, 185, 186, 189, 243, 244, 251], "level": [0, 4, 21, 25, 171, 243, 244, 251], "abstract": [0, 8, 23, 24, 25, 26, 27, 34, 35, 36, 47, 48, 83, 123, 211, 241, 245, 248, 251], "ar": [0, 1, 2, 3, 7, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 22, 29, 30, 31, 32, 33, 37, 38, 39, 40, 46, 48, 49, 51, 52, 53, 54, 55, 72, 73, 74, 76, 77, 85, 91, 95, 98, 99, 100, 102, 103, 110, 115, 116, 121, 123, 126, 130, 132, 144, 147, 148, 149, 150, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 207, 231, 235, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252], "intend": [0, 7, 13, 14, 16, 17, 18, 19, 20, 73, 251], "effici": [0, 1, 2, 4, 8, 126, 243, 244, 245, 247, 249, 251], "modular": [0, 150, 251], "properli": [0, 245, 248, 251], "test": [0, 3, 5, 105, 121, 206, 231, 244, 245, 251], "aim": [0, 3, 7, 85, 102, 122, 213, 238, 243, 244, 251], "support": [0, 1, 3, 18, 20, 25, 37, 46, 53, 82, 98, 107, 142, 147, 150, 153, 165, 182, 183, 184, 198, 241, 245, 248, 251], "research": [0, 7, 9, 251], "most": [0, 3, 7, 8, 73, 243, 244, 245, 248, 251], "written": [0, 3, 37, 38, 48, 51, 53, 54, 55, 69, 91, 94, 96, 144, 147, 148, 160, 161, 171, 172, 181, 192, 193, 241, 243, 247, 248, 251], "highli": [0, 2, 251, 252], "wai": [0, 3, 4, 85, 87, 102, 172, 243, 244, 245, 247, 249, 251, 252], "can": [0, 1, 2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 37, 41, 45, 48, 49, 51, 53, 54, 55, 69, 72, 73, 81, 82, 85, 86, 91, 95, 98, 99, 102, 103, 110, 120, 123, 124, 126, 127, 134, 135, 141, 147, 148, 149, 150, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 206, 216, 224, 226, 229, 233, 234, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "easili": [0, 3, 7, 216, 224, 226, 229, 244, 245, 251, 252], "swap": [0, 3, 245, 249, 251], "compon": [0, 2, 3, 38, 39, 40, 46, 153, 154, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 205, 210, 243, 245, 247, 248, 249, 251], "transform": [0, 1, 2, 4, 8, 13, 14, 16, 18, 19, 20, 30, 31, 32, 33, 37, 49, 51, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 112, 118, 153, 154, 157, 159, 193, 207, 216, 219, 221, 224, 226, 229, 235, 237, 244, 246, 249, 250], "them": [0, 2, 7, 30, 31, 32, 33, 37, 48, 49, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 171, 193, 243, 244, 247, 248, 249, 251, 252], "write": [0, 3, 8, 22, 51, 84, 147, 148, 150, 162, 163, 164, 170, 173, 175, 177, 181, 193, 241, 243, 244, 245, 246, 247, 249, 250, 251], "new": [0, 3, 4, 8, 13, 14, 16, 17, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 41, 45, 48, 51, 53, 54, 55, 91, 98, 103, 109, 144, 147, 148, 152, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 243, 244, 245, 248, 251, 252], "ones": [0, 25, 48, 51, 53, 54, 55, 70, 72, 74, 82, 85, 95, 99, 102, 147, 243, 245, 248, 251, 252], "littl": [0, 3, 245, 251, 252], "effort": [0, 3, 248, 251], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 25, 29, 30, 31, 32, 33, 37, 38, 39, 40, 45, 46, 48, 51, 52, 53, 54, 55, 62, 69, 70, 72, 73, 76, 78, 80, 82, 85, 86, 87, 91, 92, 95, 96, 98, 99, 101, 102, 103, 105, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 184, 192, 201, 203, 206, 207, 210, 212, 213, 214, 216, 224, 226, 229, 231, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "repo": [0, 6, 37, 238, 251], "attempt": [0, 141, 143, 170, 251], "align": [0, 251], "exist": [0, 4, 18, 48, 51, 53, 54, 55, 70, 99, 214, 235, 251, 252], "ecosystem": [0, 251], "dataset": [0, 30, 31, 32, 37, 103, 237, 244, 249, 251, 252], "pillar": [0, 251], "environ": [0, 1, 2, 3, 5, 8, 11, 13, 14, 16, 17, 18, 19, 20, 29, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 69, 70, 73, 74, 78, 81, 82, 85, 86, 98, 99, 103, 105, 110, 121, 123, 124, 166, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 201, 203, 206, 213, 214, 216, 217, 218, 219, 221, 224, 226, 229, 231, 232, 233, 234, 235, 238, 246, 249, 250], "model": [0, 1, 3, 8, 9, 13, 14, 16, 17, 18, 19, 20, 48, 51, 52, 53, 54, 55, 85, 95, 102, 104, 111, 122, 123, 124, 138, 139, 140, 147, 152, 160, 166, 167, 168, 170, 172, 173, 175, 210, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 229, 237, 238, 241, 245, 246, 248, 250, 252], "data": [0, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 82, 94, 105, 110, 121, 124, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 162, 164, 173, 175, 177, 182, 183, 184, 201, 207, 210, 212, 217, 231, 233, 234, 235, 237, 241, 248, 249, 252], "util": [0, 3, 13, 14, 16, 17, 18, 19, 20, 22, 48, 51, 53, 54, 55, 85, 102, 105, 106, 107, 108, 109, 111, 157, 158, 159, 231, 237, 242, 243, 244, 245, 248, 251, 252], "e": [0, 1, 3, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 25, 29, 38, 39, 48, 49, 51, 53, 54, 55, 70, 72, 77, 82, 85, 91, 95, 98, 99, 102, 105, 120, 124, 127, 134, 135, 147, 148, 154, 181, 182, 183, 184, 201, 213, 234, 243, 244, 245, 248, 249, 251, 252], "g": [0, 1, 3, 7, 8, 10, 11, 29, 48, 49, 51, 53, 54, 55, 70, 72, 77, 82, 85, 91, 95, 98, 99, 102, 105, 120, 124, 134, 135, 147, 148, 181, 187, 188, 190, 191, 234, 243, 244, 245, 248, 249, 251, 252], "collector": [0, 3, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 94, 144, 207, 210, 212, 217, 218, 231, 233, 234, 237, 241, 252], "contain": [0, 3, 7, 12, 13, 14, 16, 17, 19, 20, 25, 30, 31, 32, 33, 34, 37, 41, 43, 46, 47, 48, 51, 52, 53, 54, 55, 72, 74, 85, 95, 99, 102, 103, 109, 110, 111, 122, 124, 147, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 197, 201, 213, 216, 219, 221, 224, 226, 229, 231, 232, 233, 234, 235, 241, 243, 244, 245, 248, 249, 251, 252], "etc": [0, 3, 7, 8, 11, 35, 36, 48, 51, 53, 54, 55, 99, 122, 243, 245, 251, 252], "have": [0, 1, 3, 5, 6, 7, 8, 13, 14, 17, 18, 20, 25, 27, 37, 45, 46, 48, 51, 53, 54, 55, 69, 81, 82, 95, 98, 99, 103, 105, 111, 121, 122, 149, 150, 161, 171, 172, 178, 201, 210, 241, 243, 244, 245, 247, 248, 249, 251, 252], "few": [0, 2, 8, 201, 244, 245, 251, 252], "depend": [0, 1, 2, 3, 4, 7, 8, 151, 172, 245, 248, 251, 252], "possibl": [0, 3, 4, 26, 29, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 206, 210, 243, 245, 248, 251, 252], "standard": [0, 82, 90, 103, 110, 118, 124, 125, 126, 141, 177, 182, 183, 184, 243, 244, 251], "numpi": [0, 11, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 97, 210, 243, 244, 248, 251, 252], "common": [0, 3, 4, 51, 54, 55, 138, 139, 140, 155, 156, 231, 238, 241, 243, 245, 247, 249, 251, 252], "openai": [0, 7, 60, 61, 245, 248, 251, 252], "gym": [0, 3, 4, 8, 11, 13, 14, 16, 21, 49, 51, 60, 61, 80, 82, 87, 95, 103, 216, 219, 221, 224, 226, 229, 231, 238, 243, 244, 245, 248, 249, 251], "onli": [0, 1, 3, 4, 7, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 48, 51, 53, 54, 55, 70, 72, 73, 77, 82, 85, 86, 95, 99, 102, 103, 121, 147, 148, 149, 150, 214, 241, 243, 244, 245, 247, 248, 251, 252], "option": [0, 4, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 48, 49, 51, 52, 53, 54, 55, 58, 69, 70, 71, 73, 74, 77, 78, 80, 81, 82, 85, 86, 87, 90, 94, 95, 96, 97, 99, 100, 102, 103, 105, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 141, 143, 144, 148, 149, 150, 153, 154, 162, 163, 164, 166, 167, 168, 170, 173, 175, 177, 181, 182, 183, 184, 187, 188, 190, 191, 193, 201, 203, 204, 205, 206, 207, 208, 210, 214, 216, 219, 224, 226, 229, 231, 233, 234, 235, 248, 251], "On": [0, 3, 7, 18, 19, 20, 244], "end": [0, 13, 14, 30, 31, 32, 33, 37, 45, 48, 51, 53, 54, 55, 99, 111, 123, 185, 186, 187, 188, 189, 190, 191, 243, 244, 245, 247, 248, 249, 251, 252], "come": [0, 1, 3, 8, 54, 55, 137, 138, 139, 140, 145, 151, 243, 244, 245, 251, 252], "set": [0, 1, 2, 3, 7, 9, 13, 14, 16, 17, 18, 19, 20, 29, 30, 31, 32, 33, 37, 45, 46, 48, 50, 51, 52, 53, 54, 55, 70, 72, 80, 85, 94, 95, 99, 102, 105, 108, 123, 141, 147, 201, 206, 207, 218, 235, 238, 242, 243, 244, 245, 247, 248, 249, 251, 252], "re": [0, 3, 8, 45, 48, 51, 53, 54, 55, 148, 241, 244, 245, 247, 248, 251, 252], "usabl": [0, 241, 251], "function": [0, 3, 8, 11, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 40, 46, 48, 49, 51, 53, 54, 55, 74, 99, 103, 105, 111, 112, 113, 114, 115, 116, 117, 118, 119, 121, 122, 127, 128, 129, 130, 131, 132, 135, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 157, 158, 159, 160, 161, 162, 163, 164, 170, 171, 172, 173, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 216, 219, 221, 224, 226, 229, 231, 237, 243, 247, 248, 252], "cost": [0, 2, 26, 244, 248], "return": [0, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 47, 48, 49, 51, 52, 53, 54, 55, 58, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 85, 86, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 102, 103, 106, 107, 109, 110, 112, 113, 114, 115, 116, 120, 121, 122, 123, 124, 127, 130, 131, 132, 133, 134, 135, 138, 139, 140, 142, 146, 147, 148, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 187, 188, 190, 191, 210, 213, 216, 217, 219, 221, 224, 226, 229, 231, 232, 233, 234, 235, 237, 241, 243, 244, 245, 247, 248, 249, 251, 252], "process": [0, 1, 2, 3, 4, 5, 8, 13, 14, 16, 17, 18, 19, 20, 48, 49, 51, 53, 54, 55, 103, 144, 241, 243, 244, 248, 249, 251, 252], "good": [0, 1, 4, 9, 243, 245, 251, 252], "runtim": [0, 3, 48, 51, 53, 54, 55, 248], "perform": [0, 3, 4, 8, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 81, 99, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 124, 127, 128, 129, 131, 132, 141, 143, 144, 157, 167, 172, 206, 210, 243, 244, 245, 247, 248, 252], "ppo": [0, 4, 8, 148, 161, 171, 172, 216, 223, 224, 237, 243, 244, 246, 250], "pendulum": [0, 3, 13, 14, 16, 17, 21, 49, 53, 60, 61, 72, 80, 82, 87, 95, 99, 103, 231, 244, 245, 246, 250, 251, 252], "your": [0, 2, 3, 7, 8, 10, 18, 48, 51, 53, 54, 55, 103, 235, 238, 244, 245, 246, 250, 251], "introduct": [0, 246, 250, 252], "us": [0, 1, 2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 25, 26, 30, 31, 32, 33, 37, 41, 42, 48, 49, 51, 52, 53, 54, 55, 58, 70, 71, 73, 80, 82, 85, 86, 87, 95, 97, 98, 99, 102, 103, 105, 108, 109, 110, 111, 112, 113, 118, 120, 122, 123, 124, 126, 127, 134, 135, 144, 147, 148, 152, 153, 156, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 189, 196, 197, 206, 207, 208, 210, 212, 214, 217, 218, 219, 227, 231, 235, 238, 241, 242, 245, 246, 247, 248, 250, 252], "pretrain": [0, 246, 250], "task": [0, 9, 54, 55, 58, 85, 102, 170, 243, 244, 245, 246, 248, 250, 251, 252], "specif": [0, 5, 8, 32, 33, 51, 210, 237, 241, 243, 245, 246, 250], "polici": [0, 1, 2, 3, 8, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 48, 51, 52, 53, 54, 55, 73, 108, 126, 138, 139, 140, 141, 143, 144, 147, 148, 153, 154, 160, 161, 162, 164, 171, 172, 173, 175, 177, 206, 212, 216, 217, 218, 219, 221, 224, 231, 233, 234, 241, 244, 246, 249, 250, 251, 252], "multi": [0, 3, 7, 9, 48, 51, 53, 54, 55, 121, 122, 243, 244, 246, 248, 250, 251], "ddpg": [0, 112, 113, 114, 115, 162, 169, 176, 219, 220, 237, 244, 246, 250, 251], "pixel": [0, 3, 7, 25, 69, 71, 77, 79, 82, 85, 88, 97, 102, 112, 128, 129, 193, 216, 221, 224, 226, 229, 243, 246, 249, 250, 251, 252], "dqn": [0, 142, 146, 153, 163, 165, 169, 176, 221, 222, 237, 246, 250], "api": [0, 3, 5, 85, 102, 241, 248, 251, 252], "packag": [0, 6, 7, 10, 237, 238, 244, 251, 252], "singl": [0, 3, 17, 18, 19, 20, 30, 31, 32, 33, 37, 48, 51, 53, 54, 55, 69, 70, 85, 97, 102, 111, 121, 122, 150, 164, 165, 173, 177, 187, 188, 190, 191, 226, 235, 237, 243, 244, 245, 247, 248, 249], "node": [0, 2, 18, 19, 20, 21, 216, 219, 221, 224, 226, 229, 237], "distribut": [0, 2, 3, 4, 9, 10, 18, 19, 20, 21, 82, 110, 116, 117, 118, 120, 124, 127, 130, 131, 132, 133, 134, 135, 141, 142, 148, 149, 153, 161, 165, 171, 172, 237, 241, 243, 244, 245, 248, 251, 252], "helper": [0, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 243, 248], "replai": [0, 8, 13, 14, 16, 30, 31, 32, 33, 37, 41, 42, 43, 44, 46, 73, 86, 95, 162, 163, 164, 170, 173, 175, 177, 207, 210, 227, 231, 237, 241, 248, 249], "buffer": [0, 1, 3, 4, 8, 13, 14, 16, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 53, 54, 55, 72, 73, 85, 86, 95, 99, 102, 147, 150, 162, 163, 164, 170, 173, 175, 177, 207, 210, 227, 231, 237, 241, 248, 249, 252], "compos": [0, 3, 30, 31, 32, 37, 42, 43, 44, 48, 51, 53, 54, 55, 98, 99, 103, 167, 216, 219, 221, 224, 226, 229, 237, 243, 244, 245, 247, 251, 252], "tensorspec": [0, 3, 15, 23, 24, 25, 26, 27, 28, 29, 35, 36, 48, 52, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 132, 137, 141, 143, 144, 145, 147, 148, 149, 237, 248], "env": [0, 1, 2, 5, 6, 7, 8, 13, 14, 16, 18, 19, 20, 21, 37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 123, 124, 147, 192, 214, 216, 217, 218, 219, 221, 224, 226, 229, 231, 233, 234, 235, 237, 243, 244, 245, 246, 247, 249, 250], "envbas": [0, 3, 13, 14, 16, 17, 18, 19, 20, 49, 51, 53, 54, 55, 81, 87, 98, 99, 103, 105, 110, 123, 124, 206, 214, 216, 217, 218, 219, 221, 224, 226, 229, 231, 233, 234, 235, 237], "gymlikeenv": [0, 237], "envmetadata": [0, 237], "vector": [0, 1, 8, 23, 29, 73, 112, 114, 122, 184, 190, 191, 237, 243, 244, 247, 248, 249, 252], "record": [0, 48, 51, 53, 54, 55, 172, 192, 193, 194, 195, 196, 197, 198, 199, 200, 231, 237, 245], "domain": [0, 2, 8, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 73, 95, 147, 148, 149, 150, 237, 243, 245, 248, 251, 252], "modul": [0, 3, 4, 8, 11, 48, 51, 52, 53, 54, 55, 72, 73, 85, 86, 95, 99, 102, 103, 104, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 164, 165, 169, 173, 174, 176, 177, 179, 182, 183, 184, 210, 215, 220, 222, 223, 225, 228, 231, 237, 241, 243, 245, 247, 248, 249], "hook": [0, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 142, 143, 144, 146, 153, 154, 157, 203, 204, 206, 207, 208, 210, 211, 212, 237, 243], "explor": [0, 1, 104, 126, 141, 143, 144, 147, 148, 160, 206, 217, 218, 231, 237, 243, 245, 248], "planner": [0, 110, 124, 237], "object": [0, 3, 4, 6, 13, 14, 16, 17, 18, 19, 20, 25, 38, 39, 40, 46, 48, 51, 53, 54, 55, 74, 82, 85, 98, 99, 103, 124, 137, 138, 145, 147, 148, 149, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 214, 217, 218, 230, 231, 235, 237, 241, 244, 245, 248, 252], "sac": [0, 164, 170, 173, 175, 228, 229, 237], "redq": [0, 173, 225, 226, 237], "iql": [0, 170, 237], "td3": [0, 177, 237], "a2c": [0, 160, 215, 237], "dreamer": [0, 67, 118, 166, 167, 168, 237], "trainer": [0, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 243], "checkpoint": [0, 237, 249], "builder": [0, 237, 244, 252], "logger": [0, 193, 195, 196, 197, 198, 199, 200, 204, 206, 210, 231, 235, 237], "_util": [0, 11, 237], "implement_for": [0, 237], "index": [0, 3, 7, 8, 10, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 43, 47, 73, 109, 243, 247, 251], "search": [0, 244], "page": [0, 7], "somewhat": [1, 252], "equival": [1, 17, 23, 26, 27, 28, 29, 37, 48, 51, 53, 54, 55, 99, 207, 243, 251, 252], "dataload": [1, 45, 244, 245], "except": [1, 3, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 76, 130, 156, 243, 244, 251, 252], "1": [1, 2, 3, 4, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 68, 70, 72, 73, 74, 78, 81, 82, 85, 86, 87, 95, 96, 97, 99, 102, 103, 109, 110, 111, 112, 113, 115, 119, 120, 122, 124, 125, 126, 127, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 153, 157, 160, 161, 164, 167, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 201, 206, 207, 208, 216, 219, 221, 224, 226, 229, 231, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "thei": [1, 2, 3, 4, 8, 9, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 74, 76, 85, 98, 99, 102, 121, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 207, 210, 241, 244, 245, 247, 248, 249, 251, 252], "collect": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 21, 30, 31, 32, 33, 37, 82, 85, 102, 105, 144, 162, 164, 173, 175, 177, 201, 207, 210, 212, 213, 214, 231, 241, 248, 249, 251, 252], "over": [1, 2, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 73, 82, 96, 109, 150, 165, 167, 213, 241, 243, 245, 248, 252], "non": [1, 8, 31, 48, 51, 53, 54, 55, 68, 72, 77, 85, 95, 99, 100, 102, 109, 147, 148, 167, 182, 183, 184, 243, 248, 252], "static": [1, 103, 170, 248], "2": [1, 3, 8, 10, 11, 13, 14, 16, 21, 27, 28, 48, 49, 51, 53, 54, 55, 65, 66, 70, 72, 73, 82, 85, 95, 99, 102, 103, 111, 112, 113, 114, 119, 121, 122, 127, 142, 143, 144, 147, 151, 153, 161, 162, 164, 170, 171, 173, 175, 177, 181, 182, 183, 184, 187, 188, 190, 191, 193, 201, 243, 244, 245, 247, 248, 249, 250, 251, 252], "like": [1, 4, 7, 48, 51, 53, 54, 55, 62, 97, 105, 173, 243, 245, 248, 249, 252], "version": [1, 6, 11, 48, 51, 53, 54, 55, 170, 175, 184, 238, 243, 244, 245, 248, 249, 252], "being": [1, 3, 7, 8, 17, 18, 20, 48, 51, 53, 54, 55, 73, 74, 87, 99, 108, 144, 161, 171, 172, 193, 207, 212, 233, 234, 235, 243, 244, 245, 248], "train": [1, 12, 13, 14, 16, 17, 18, 19, 20, 21, 48, 51, 53, 54, 55, 78, 85, 99, 102, 105, 112, 114, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 210, 212, 231, 241, 249, 252], "": [1, 2, 3, 6, 7, 8, 30, 31, 32, 37, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 103, 105, 111, 126, 141, 147, 148, 170, 175, 182, 183, 184, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "accept": [1, 13, 14, 16, 17, 18, 19, 20, 48, 51, 52, 53, 54, 55, 72, 77, 85, 91, 95, 99, 100, 102, 147, 148, 149, 241, 243, 245, 252], "two": [1, 4, 8, 10, 45, 48, 51, 53, 54, 55, 82, 85, 102, 115, 148, 170, 171, 175, 178, 206, 210, 216, 224, 226, 229, 243, 244, 245, 247, 248, 251, 252], "main": [1, 2, 5, 20, 21, 49, 148, 210, 243, 247, 252], "argument": [1, 3, 13, 14, 16, 17, 18, 19, 20, 25, 45, 48, 51, 53, 54, 55, 72, 85, 95, 98, 99, 102, 109, 111, 122, 125, 147, 148, 149, 151, 192, 203, 213, 216, 219, 221, 224, 226, 229, 231, 232, 235, 243, 244, 245, 248, 252], "list": [1, 6, 7, 8, 9, 13, 14, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 45, 46, 48, 51, 52, 53, 54, 55, 69, 74, 82, 85, 87, 91, 99, 102, 122, 150, 151, 180, 182, 184, 192, 206, 207, 233, 234, 243, 244, 245, 247, 248, 249, 251, 252], "constructor": [1, 16, 18, 19, 20, 98, 182, 183, 184, 216, 219, 221, 224, 226, 229, 232, 235, 243, 244, 245], "iter": [1, 13, 14, 16, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 51, 53, 54, 55, 75, 82, 92, 103, 111, 122, 147, 148, 149, 150, 155, 180, 206, 209, 210, 216, 224, 226, 229, 241, 243, 245, 248], "execut": [1, 3, 6, 7, 8, 13, 14, 16, 18, 19, 20, 30, 31, 32, 33, 37, 48, 49, 51, 52, 53, 54, 55, 95, 149, 150, 214, 235, 241, 244, 245, 250, 252], "step": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 48, 49, 51, 52, 53, 54, 55, 57, 64, 77, 80, 81, 82, 94, 96, 99, 109, 110, 118, 121, 123, 124, 141, 143, 144, 148, 160, 166, 172, 181, 192, 201, 206, 210, 241, 243, 244, 247, 248, 249, 251], "queri": [1, 13, 14, 16, 17, 48, 51, 53, 54, 55, 85, 98, 103, 150, 248, 251], "defin": [1, 2, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 86, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 182, 183, 184, 192, 232, 244, 248, 252], "number": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 21, 24, 26, 29, 30, 31, 32, 37, 38, 39, 40, 41, 48, 51, 52, 53, 54, 55, 69, 73, 78, 81, 82, 90, 94, 96, 103, 110, 111, 116, 117, 118, 119, 120, 122, 124, 127, 128, 129, 131, 132, 133, 134, 135, 141, 143, 144, 147, 148, 159, 164, 166, 170, 173, 175, 177, 201, 203, 206, 210, 212, 213, 214, 233, 234, 235, 243, 244, 245, 248, 249, 252], "befor": [1, 3, 4, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 45, 48, 51, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 122, 125, 126, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 183, 184, 207, 243, 245, 248, 252], "deliv": [1, 18, 19, 20, 251], "stack": [1, 7, 8, 18, 20, 54, 55, 103, 149, 150, 192, 201, 244, 247, 248, 251], "user": [1, 2, 5, 8, 37, 48, 51, 53, 54, 55, 99, 121, 232, 241, 244, 248, 251, 252], "reset": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 48, 49, 51, 52, 53, 54, 55, 57, 64, 69, 72, 75, 77, 80, 81, 85, 91, 92, 94, 95, 96, 98, 101, 103, 105, 136, 144, 192, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 251], "whenev": [1, 3, 80, 212], "reach": [1, 3, 13, 14, 16, 17, 18, 19, 20, 45, 48, 51, 53, 54, 55, 141, 143, 144, 245, 251, 252], "done": [1, 3, 4, 7, 8, 13, 14, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 82, 87, 90, 92, 94, 95, 98, 99, 103, 109, 110, 124, 162, 163, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "state": [1, 3, 4, 13, 14, 16, 17, 37, 48, 51, 52, 53, 54, 55, 57, 64, 69, 70, 72, 75, 80, 82, 87, 92, 94, 98, 99, 101, 103, 109, 110, 118, 121, 122, 124, 128, 131, 132, 138, 147, 152, 173, 181, 182, 183, 184, 235, 243, 244, 245, 248, 252], "after": [1, 8, 13, 14, 18, 20, 25, 48, 51, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 81, 82, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 109, 125, 141, 143, 167, 243, 244, 245, 248, 249, 252], "predefin": [1, 244, 245], "becaus": [1, 3, 4, 7, 98, 115, 121, 147, 148, 243, 244, 247, 248, 252], "potenti": [1, 248], "comput": [1, 3, 4, 8, 13, 16, 26, 48, 51, 53, 54, 55, 82, 99, 101, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 127, 128, 129, 131, 132, 134, 135, 138, 141, 143, 144, 148, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 214, 243, 245, 247, 249], "heavi": [1, 8], "crucial": [1, 170, 243, 244, 245, 248, 252], "configur": [1, 8, 13, 14, 16, 17, 21, 172, 216, 224, 226, 229, 244, 245, 248], "hyperparamet": [1, 170, 248], "appropri": [1, 3, 4, 7, 13, 14, 16, 17, 43, 47, 95, 232, 235, 243, 244], "paramet": [1, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 48, 49, 51, 52, 53, 54, 55, 58, 59, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 105, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 138, 139, 140, 141, 143, 144, 147, 148, 149, 150, 152, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 216, 217, 218, 219, 221, 224, 226, 229, 231, 232, 233, 234, 235, 243, 248, 249, 251], "consider": [1, 3, 8, 243, 244], "whether": [1, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 51, 52, 53, 54, 55, 99, 111, 122, 151, 162, 163, 164, 165, 173, 175, 177, 184, 243, 244, 245, 248, 252], "should": [1, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 46, 48, 51, 52, 53, 54, 55, 69, 77, 82, 86, 87, 91, 92, 94, 98, 99, 103, 105, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 147, 148, 157, 164, 169, 171, 172, 173, 176, 181, 182, 183, 184, 193, 205, 206, 207, 210, 231, 233, 234, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "occur": [1, 8, 14, 70, 82, 86, 147, 148, 167, 252], "serial": [1, 3, 48, 51, 53, 54, 55, 103], "optim": [1, 8, 48, 51, 53, 54, 55, 110, 124, 125, 126, 172, 175, 205, 210, 216, 224, 231, 241, 245, 248], "parallel": [1, 3, 8, 17, 105, 160, 232, 233, 234, 235, 244, 245], "syncdatacollector": [1, 13, 14, 17, 18, 19, 20, 231, 234, 237, 245], "worker": [1, 13, 14, 16, 17, 18, 19, 20, 21, 49, 53, 54, 55, 103, 233, 234, 235, 243, 245, 251, 252], "multisyncdatacollector": [1, 18, 19, 20, 234, 237, 245, 251], "split": [1, 3, 13, 14, 16, 17, 18, 19, 20, 37, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 241, 245, 251], "workload": 1, "across": [1, 8, 18, 19, 20, 103, 144, 212, 243, 248], "aggreg": [1, 111, 112, 113, 150], "result": [1, 3, 7, 13, 14, 16, 17, 18, 19, 20, 30, 31, 32, 33, 37, 45, 48, 49, 51, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 103, 105, 109, 122, 154, 182, 185, 186, 187, 188, 189, 190, 191, 192, 212, 244, 248, 249, 251, 252], "final": [1, 3, 4, 141, 143, 144, 149, 182, 206, 243, 244, 245, 248, 252], "multiasyncdatacollector": [1, 17, 18, 19, 20, 233, 237, 243, 244, 245, 251], "sever": [1, 8, 27, 48, 51, 53, 54, 55, 70, 99, 172, 245, 252], "batch": [1, 3, 13, 14, 16, 17, 18, 19, 20, 22, 26, 29, 30, 31, 32, 33, 37, 42, 45, 48, 51, 52, 53, 54, 55, 77, 82, 86, 95, 99, 100, 116, 117, 121, 125, 130, 133, 144, 147, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 201, 204, 207, 208, 209, 210, 212, 233, 234, 235, 241, 243, 244, 245, 247, 249, 251, 252], "gather": [1, 3, 18, 20, 86, 181, 214, 238, 243, 244, 245, 248, 252], "continu": [1, 9, 24, 35, 112, 113, 114, 115, 144, 148, 150, 176, 182, 185, 186, 189, 219, 243, 245, 248, 251, 252], "concomitantli": 1, "network": [1, 4, 8, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 122, 126, 128, 129, 131, 132, 138, 139, 140, 147, 162, 163, 164, 165, 169, 170, 173, 175, 176, 177, 179, 182, 183, 184, 216, 219, 224, 230, 231, 241, 247, 248, 252], "impli": [1, 252], "weight": [1, 4, 9, 12, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 126, 147, 160, 161, 164, 167, 212, 230, 241, 243, 244, 245, 247, 248, 251], "mai": [1, 2, 3, 4, 5, 7, 8, 13, 14, 16, 17, 18, 20, 37, 48, 51, 53, 54, 55, 82, 92, 99, 100, 103, 105, 122, 241, 243, 244, 245, 248, 249, 251, 252], "slightli": [1, 243, 248, 249, 252], "lag": [1, 13, 14, 16, 17, 244, 245], "therefor": [1, 3, 7, 172, 252], "although": [1, 8, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 241, 243, 244], "fastest": 1, "price": 1, "suitabl": 1, "where": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 30, 31, 32, 33, 37, 38, 39, 48, 51, 52, 53, 54, 55, 69, 85, 91, 94, 96, 98, 100, 102, 141, 143, 147, 148, 159, 160, 161, 162, 164, 165, 169, 170, 171, 172, 173, 175, 176, 177, 181, 182, 183, 184, 192, 193, 204, 207, 208, 210, 212, 241, 243, 244, 245, 247, 248, 252], "asynchron": [1, 9, 14, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 160, 233, 244, 245], "off": [1, 2, 4, 120, 134, 135, 175, 206, 217, 241, 244, 245, 249, 252], "curriculum": [1, 4], "For": [1, 2, 3, 4, 7, 8, 9, 10, 13, 14, 16, 17, 18, 20, 37, 48, 51, 53, 54, 55, 77, 82, 125, 153, 160, 165, 170, 172, 206, 219, 241, 243, 244, 245, 248, 249, 252], "remot": [1, 18, 19, 20, 54, 55, 252], "rollout": [1, 3, 13, 14, 16, 22, 48, 51, 52, 53, 54, 55, 65, 66, 87, 105, 110, 124, 144, 160, 214, 243, 244, 245, 249, 251], "necessari": [1, 4, 6, 8, 13, 14, 16, 17, 92, 173, 182, 183, 184, 243, 244, 245], "synchronis": [1, 49], "from": [1, 2, 3, 4, 5, 8, 9, 10, 11, 13, 14, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 48, 49, 51, 52, 53, 54, 55, 70, 73, 75, 80, 82, 85, 86, 87, 92, 94, 95, 97, 98, 99, 100, 102, 103, 109, 110, 112, 113, 114, 115, 120, 122, 123, 124, 125, 127, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 161, 162, 163, 164, 171, 172, 173, 175, 177, 181, 182, 183, 184, 192, 193, 201, 207, 210, 213, 214, 216, 219, 221, 224, 226, 227, 229, 231, 232, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "either": [1, 5, 21, 48, 51, 53, 54, 55, 152, 197, 219, 241, 243, 244, 249, 251, 252], "update_policy_weights_": [1, 12, 13, 14, 16, 17, 18, 19, 20, 243, 244, 251], "update_at_each_batch": [1, 13, 14, 17, 243], "true": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 65, 66, 70, 72, 73, 77, 80, 81, 82, 85, 86, 87, 90, 94, 95, 97, 99, 100, 102, 103, 105, 109, 110, 111, 112, 113, 114, 115, 119, 120, 122, 124, 125, 126, 134, 135, 138, 139, 140, 141, 144, 147, 148, 149, 150, 156, 160, 161, 164, 166, 167, 168, 171, 172, 173, 175, 178, 182, 183, 184, 187, 188, 190, 191, 192, 193, 203, 204, 206, 207, 210, 221, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "second": [1, 8, 170, 175, 209, 243, 244, 245, 247, 248, 249, 251, 252], "consid": [1, 8, 20, 48, 51, 53, 54, 55, 73, 116, 133, 238, 243, 248], "devic": [1, 2, 3, 7, 8, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 48, 50, 51, 52, 53, 54, 55, 57, 64, 65, 66, 72, 84, 85, 87, 95, 97, 99, 102, 109, 110, 111, 112, 113, 114, 115, 119, 121, 122, 124, 125, 126, 138, 139, 140, 142, 144, 145, 146, 147, 150, 151, 153, 154, 162, 207, 212, 216, 219, 221, 224, 226, 227, 229, 243, 244, 245, 247, 248, 249, 251], "oper": [1, 3, 4, 7, 8, 13, 14, 17, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 77, 98, 127, 138, 139, 140, 147, 152, 153, 160, 161, 162, 163, 165, 171, 172, 181, 182, 183, 184, 210, 219, 221, 226, 229, 241, 243, 244, 245, 247, 248, 252], "instanc": [1, 2, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 34, 37, 48, 49, 51, 52, 53, 54, 55, 59, 69, 82, 95, 98, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 127, 128, 129, 131, 132, 141, 143, 144, 148, 149, 150, 157, 193, 197, 206, 214, 216, 217, 218, 219, 221, 224, 226, 229, 231, 233, 234, 241, 243, 245, 248, 252], "cpu": [1, 3, 8, 10, 13, 14, 16, 18, 19, 20, 23, 34, 38, 39, 48, 51, 52, 53, 54, 55, 57, 64, 65, 66, 72, 85, 87, 95, 99, 102, 109, 110, 124, 126, 145, 147, 150, 207, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "slower": 1, "than": [1, 4, 8, 13, 14, 16, 17, 37, 87, 115, 122, 127, 141, 143, 147, 207, 212, 238, 243, 244, 245, 248, 251, 252], "one": [1, 3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 23, 26, 27, 28, 29, 30, 31, 32, 33, 37, 41, 43, 46, 47, 48, 49, 51, 53, 54, 55, 73, 81, 82, 85, 93, 99, 100, 102, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 130, 131, 132, 141, 142, 143, 144, 146, 147, 148, 153, 154, 157, 159, 160, 161, 162, 163, 164, 171, 172, 173, 177, 203, 205, 206, 210, 214, 216, 224, 226, 229, 235, 238, 241, 243, 244, 245, 247, 248, 249, 252], "cuda": [1, 3, 7, 48, 51, 53, 54, 55, 72, 84, 85, 95, 99, 102, 147, 202, 243, 244, 245, 249, 252], "when": [1, 2, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 45, 46, 48, 49, 51, 53, 54, 55, 72, 73, 81, 82, 85, 86, 91, 95, 98, 99, 102, 103, 108, 110, 122, 123, 124, 125, 134, 147, 148, 150, 157, 161, 171, 172, 181, 192, 193, 207, 235, 238, 241, 243, 244, 245, 248, 249, 252], "multipl": [1, 3, 5, 8, 13, 14, 16, 17, 18, 19, 20, 26, 54, 55, 70, 73, 91, 98, 103, 121, 125, 126, 147, 148, 164, 173, 177, 226, 235, 241, 243, 244, 245, 248, 251], "infer": [1, 54, 55, 103, 125, 170, 175, 243, 245], "run": [1, 3, 4, 5, 6, 7, 8, 10, 13, 14, 17, 48, 51, 52, 53, 54, 55, 58, 59, 81, 82, 99, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 149, 150, 157, 206, 233, 234, 235, 238, 241, 243, 244, 245, 247, 248, 249, 251], "dispatch": [1, 18, 19, 20], "avail": [1, 4, 6, 45, 148, 153, 154, 233, 234, 243, 244, 245, 252], "speed": [1, 2, 4, 8, 26, 243, 244, 245, 248], "up": [1, 2, 3, 8, 9, 26, 37, 238, 243, 244, 245, 248, 252], "avoid": [1, 48, 51, 53, 54, 55, 99, 103, 147, 213, 245], "oom": 1, "error": [1, 3, 7, 10, 11, 48, 51, 53, 54, 55, 86, 105, 156, 238, 243, 244, 245, 252], "choic": [1, 2, 37, 127], "size": [1, 2, 3, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 42, 45, 46, 48, 50, 51, 52, 53, 54, 55, 57, 64, 65, 66, 70, 77, 85, 87, 93, 95, 97, 99, 100, 102, 109, 110, 111, 116, 121, 122, 124, 127, 130, 131, 132, 133, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 181, 182, 183, 184, 193, 201, 207, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "pass": [1, 3, 4, 13, 14, 16, 18, 19, 20, 21, 25, 32, 48, 49, 50, 51, 53, 54, 55, 74, 87, 98, 100, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 125, 127, 128, 129, 131, 132, 141, 143, 144, 147, 148, 150, 156, 157, 182, 183, 184, 207, 233, 234, 235, 243, 244, 245, 247, 248, 252], "ie": [1, 18, 20, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 41, 77, 100, 244, 245], "store": [1, 3, 8, 13, 14, 16, 17, 20, 25, 32, 33, 38, 39, 40, 41, 48, 51, 53, 54, 55, 103, 110, 121, 124, 216, 219, 221, 224, 226, 229, 237, 241, 243, 245, 249, 252], "while": [1, 3, 7, 8, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 170, 171, 172, 243, 245, 248, 249, 251], "wait": [1, 20, 21, 248], "also": [1, 2, 3, 8, 11, 32, 48, 51, 53, 54, 55, 73, 82, 87, 91, 92, 95, 99, 132, 149, 150, 160, 162, 163, 182, 241, 243, 244, 245, 247, 248, 252], "impact": [1, 244], "memori": [1, 2, 3, 8, 26, 38, 48, 49, 51, 53, 54, 55, 72, 85, 95, 99, 102, 103, 147, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "manag": [1, 8, 179, 180, 206, 243], "kei": [1, 3, 7, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 48, 51, 53, 54, 55, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 91, 92, 94, 95, 96, 98, 99, 101, 102, 103, 109, 110, 123, 124, 141, 143, 144, 147, 148, 149, 150, 151, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 193, 204, 205, 206, 208, 209, 210, 214, 216, 224, 226, 229, 241, 243, 244, 245, 247, 248, 251, 252], "control": [1, 3, 5, 8, 16, 58, 59, 73, 109, 112, 113, 114, 115, 123, 124, 132, 144, 147, 148, 149, 161, 171, 172, 176, 182, 185, 186, 189, 219, 241, 243, 244, 245, 248], "which": [1, 2, 3, 4, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 25, 26, 29, 33, 37, 45, 48, 51, 53, 54, 55, 69, 70, 78, 81, 82, 85, 86, 94, 95, 96, 98, 99, 105, 120, 134, 135, 138, 139, 140, 147, 148, 150, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 182, 201, 205, 216, 219, 221, 224, 226, 229, 241, 243, 244, 245, 247, 248, 249, 252], "storing_devic": [1, 13, 14, 16, 17, 18, 19, 20, 243, 244, 251], "dure": [1, 7, 13, 14, 16, 17, 18, 19, 20, 37, 48, 51, 53, 54, 55, 78, 99, 206, 210, 243, 244, 245, 248, 252], "A": [1, 3, 8, 9, 11, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 53, 54, 55, 62, 73, 78, 85, 86, 87, 95, 98, 99, 101, 103, 104, 105, 109, 110, 111, 122, 124, 126, 127, 141, 143, 148, 149, 150, 153, 157, 160, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 194, 195, 198, 203, 210, 212, 216, 221, 224, 226, 229, 231, 244, 245, 248, 252], "heurist": [1, 4, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 144, 243, 252], "usual": [1, 3, 4, 6, 7, 8, 37, 48, 51, 53, 54, 55, 126, 192, 216, 224, 226, 229, 238, 241, 243, 245, 252], "same": [1, 3, 4, 11, 13, 14, 16, 18, 19, 20, 37, 45, 48, 49, 51, 53, 54, 55, 73, 78, 81, 82, 98, 99, 103, 111, 122, 144, 243, 244, 245, 247, 248, 249, 252], "storag": [1, 2, 8, 30, 31, 32, 33, 37, 38, 39, 40, 45, 48, 50, 51, 53, 54, 55, 74, 237, 241, 243, 244, 245, 249], "default": [1, 2, 3, 10, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 29, 30, 31, 32, 37, 38, 39, 41, 48, 51, 53, 54, 55, 58, 69, 70, 73, 77, 81, 82, 85, 86, 90, 94, 95, 96, 97, 99, 100, 102, 103, 105, 109, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 137, 141, 143, 144, 145, 147, 148, 151, 157, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 201, 203, 204, 206, 207, 208, 210, 216, 219, 224, 226, 229, 231, 235, 241, 243, 244, 245, 249, 251, 252], "behaviour": [1, 3, 51, 70, 82, 86, 109, 120, 134, 135, 206, 244, 248], "besid": 1, "those": [1, 5, 7, 25, 54, 55, 82, 95, 148, 149, 150, 212, 233, 234, 243, 244, 248, 252], "choos": [1, 243, 244, 245], "follow": [1, 2, 3, 6, 7, 8, 37, 48, 51, 52, 53, 54, 55, 85, 111, 122, 159, 161, 171, 174, 210, 226, 229, 241, 243, 244, 245, 247, 248, 251, 252], "max_frames_per_traj": [1, 13, 14, 16, 17, 18, 19, 20, 213, 243, 245, 251], "frame": [1, 2, 13, 14, 16, 17, 18, 19, 20, 51, 69, 78, 141, 143, 144, 192, 193, 203, 206, 210, 213, 214, 243, 244, 245, 251, 252], "call": [1, 3, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 30, 31, 32, 33, 37, 38, 39, 40, 42, 45, 46, 48, 51, 53, 54, 55, 69, 72, 73, 74, 77, 80, 82, 84, 85, 91, 94, 95, 99, 102, 103, 105, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 124, 125, 127, 128, 129, 131, 132, 141, 143, 144, 147, 148, 150, 157, 181, 192, 206, 241, 243, 244, 245, 248, 251, 252], "frames_per_batch": [1, 13, 14, 16, 17, 18, 19, 20, 213, 243, 244, 245, 251], "each": [1, 3, 4, 7, 8, 13, 14, 16, 17, 18, 19, 20, 22, 27, 28, 32, 48, 49, 51, 53, 54, 55, 85, 91, 94, 95, 96, 102, 103, 141, 150, 153, 154, 187, 188, 190, 191, 206, 207, 233, 234, 243, 244, 245, 248, 249, 251, 252], "init_random_fram": [1, 13, 14, 16, 17, 18, 19, 20, 213, 243, 244], "random": [1, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 42, 48, 51, 52, 53, 54, 55, 73, 81, 82, 95, 105, 147, 148, 173, 206, 214, 243, 244, 245, 248, 249, 251, 252], "rand_step": [1, 48, 49, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 63, 80, 103, 248, 251, 252], "reset_at_each_it": [1, 13, 14, 16, 17, 18, 19, 20, 243], "split_traj": [1, 13, 14, 16, 17, 18, 19, 20, 37, 243, 244, 245], "trajectori": [1, 3, 13, 14, 16, 17, 18, 19, 20, 22, 32, 37, 41, 48, 51, 53, 54, 55, 86, 98, 110, 124, 144, 172, 182, 184, 185, 186, 187, 188, 189, 190, 191, 201, 237, 244, 245, 248, 251, 252], "pad": [1, 22, 37, 111, 112, 113, 121, 207, 243], "along": [1, 22, 37, 69, 70, 82, 86, 91, 97, 122, 126, 147, 148, 244, 248], "mask": [1, 4, 13, 14, 16, 22, 86, 207, 243, 244, 252], "point": [1, 21, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 41, 43, 47, 48, 51, 53, 54, 55, 69, 72, 85, 95, 97, 99, 102, 123, 147, 159, 165, 210, 238, 244, 245, 247, 248, 252], "boolean": [1, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 51, 86, 141, 185, 186, 187, 188, 189, 190, 191, 241], "repres": [1, 3, 13, 14, 16, 17, 18, 19, 20, 25, 32, 48, 51, 53, 54, 55, 78, 86, 148, 153, 154, 178, 182, 207, 243, 244, 245], "valid": [1, 22, 86, 99, 111, 122, 141, 143, 171, 207, 241, 252], "valu": [1, 3, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 37, 48, 51, 53, 54, 55, 68, 69, 70, 73, 81, 82, 85, 86, 89, 91, 95, 96, 97, 98, 99, 102, 103, 112, 113, 114, 115, 116, 118, 119, 120, 122, 124, 125, 126, 127, 130, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 151, 153, 154, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 201, 203, 204, 205, 206, 207, 210, 216, 219, 224, 226, 229, 231, 241, 244, 247, 248, 251, 252], "exploration_mod": [1, 13, 14, 16, 18, 19, 20, 206, 237, 243, 244], "strategi": [1, 16, 241, 243, 244], "reset_when_don": [1, 13, 14, 16, 18, 19, 20], "These": [1, 2, 7, 48, 51, 53, 54, 55, 85, 102, 243, 245, 248, 252], "tool": [1, 5, 248, 252], "backend": [1, 3, 7, 11, 18, 19, 21, 241, 243, 245, 248], "gloo": [1, 18, 19, 21], "nccl": [1, 18, 19], "mpi": [1, 18, 19], "distributeddatacollector": [1, 20, 21, 237], "rpc": [1, 20, 21], "rpcdatacollector": [1, 21, 237], "launcher": [1, 18, 19, 20, 21], "rai": 1, "submitit": [1, 18, 19, 20, 21], "torch": [1, 3, 8, 9, 10, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 38, 39, 41, 45, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 70, 72, 73, 74, 82, 85, 87, 90, 95, 97, 99, 102, 103, 109, 110, 111, 116, 118, 120, 121, 122, 124, 125, 126, 127, 130, 133, 134, 135, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 158, 162, 182, 183, 184, 201, 208, 209, 216, 219, 221, 224, 226, 229, 231, 241, 243, 244, 245, 247, 248, 249, 251, 252], "multiprocess": [1, 18, 19, 20, 49, 50, 103, 244, 245, 248, 252], "synchron": [1, 13, 19, 53, 233, 234, 244, 245], "mode": [1, 6, 13, 14, 16, 18, 19, 20, 48, 51, 53, 54, 55, 99, 103, 106, 108, 116, 120, 130, 133, 134, 135, 148, 206, 243, 244, 251, 252], "resourc": [1, 238, 243, 245], "exampl": [1, 2, 3, 4, 9, 10, 11, 13, 14, 16, 17, 18, 21, 23, 25, 26, 27, 28, 37, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 70, 72, 73, 74, 80, 82, 85, 87, 95, 97, 99, 102, 103, 109, 110, 111, 121, 122, 124, 127, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 156, 182, 183, 184, 201, 202, 203, 204, 205, 207, 208, 209, 212, 216, 219, 221, 224, 226, 229, 231, 241, 243, 244, 245, 246, 247, 248, 249, 251, 252], "folder": 1, "sub": [1, 2, 3, 13, 14, 18, 19, 20, 48, 51, 53, 54, 55, 86, 149, 150, 201, 210, 244, 245, 247, 251, 252], "all": [1, 3, 4, 8, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 49, 51, 52, 53, 54, 55, 72, 76, 82, 85, 91, 95, 96, 99, 102, 103, 107, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 147, 148, 150, 157, 167, 205, 210, 213, 233, 234, 235, 238, 241, 243, 244, 245, 246, 247, 248, 251, 252], "variou": [1, 3, 13, 14, 16, 17, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 233, 234, 244, 245, 252], "machin": [1, 7, 18, 19, 20], "One": [1, 2, 4, 8, 28, 29, 130, 141, 143, 147, 178, 197, 243, 244, 252], "wonder": 1, "why": [1, 3, 243, 248, 252], "parallelenv": [1, 2, 3, 13, 14, 16, 17, 20, 53, 55, 232, 237, 243, 244, 245, 247, 251, 252], "instead": [1, 4, 7, 8, 11, 26, 48, 51, 53, 54, 55, 77, 95, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 235, 243, 248, 252], "In": [1, 3, 4, 5, 7, 8, 10, 11, 17, 21, 37, 48, 51, 53, 54, 55, 72, 85, 92, 95, 98, 99, 102, 120, 122, 132, 134, 135, 147, 150, 159, 212, 233, 234, 235, 243, 244, 245, 247, 248, 249, 252], "gener": [1, 3, 7, 8, 16, 31, 44, 45, 49, 52, 82, 87, 91, 92, 98, 116, 130, 137, 145, 148, 151, 152, 173, 182, 185, 186, 189, 196, 210, 243, 244, 245, 246, 247, 248, 249, 251, 252], "lower": [1, 2, 17, 24, 103, 131, 132, 245, 248], "io": [1, 53], "footprint": [1, 2], "need": [1, 2, 4, 7, 8, 10, 18, 19, 20, 46, 48, 51, 53, 54, 55, 77, 85, 87, 99, 102, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 125, 127, 128, 129, 131, 132, 141, 143, 144, 147, 157, 159, 164, 173, 177, 181, 193, 210, 235, 243, 244, 245, 248, 251, 252], "commun": [1, 2, 3, 238, 245, 252], "yet": [1, 249], "spec": [1, 2, 3, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 50, 51, 52, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 105, 132, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 153, 154, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 251], "plai": [1, 69, 244, 245, 252], "role": [1, 244, 252], "opposit": 1, "direct": [1, 48, 51, 53, 54, 55, 244], "sinc": [1, 3, 4, 5, 7, 48, 51, 53, 54, 55, 109, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 243, 244, 245, 248, 249, 251, 252], "faster": [1, 4, 53], "share": [1, 2, 3, 6, 8, 38, 39, 40, 46, 49, 54, 55, 103, 138, 139, 140, 235, 245, 247, 251, 252], "among": 1, "achiev": [1, 3, 4, 48, 51, 53, 54, 55, 207, 241, 243, 245, 248, 252], "via": [1, 3, 4, 7, 8, 37, 54, 85, 98, 102, 162, 241, 244, 245, 252], "capabl": [1, 7, 241, 243, 247, 249, 252], "prohibit": [1, 3], "slow": [1, 3, 4], "compar": [1, 3, 48, 206, 244, 245, 252], "gpu": [1, 7, 8, 48, 51, 53, 54, 55, 243, 245, 252], "nativ": [1, 7, 9, 48, 51, 53, 54, 55, 69], "driver": [1, 7], "practic": [1, 4, 5, 8, 120, 134, 135, 159, 238, 243, 244, 245, 249, 252], "mean": [1, 2, 3, 4, 7, 13, 14, 16, 18, 19, 20, 32, 41, 82, 103, 110, 116, 118, 121, 124, 133, 141, 148, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 243, 244, 245, 248, 251, 252], "keyword": [1, 3, 13, 14, 16, 18, 19, 20, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 148, 232, 243, 244, 245, 252], "build": [1, 3, 7, 22, 25, 48, 51, 53, 54, 55, 103, 110, 124, 148, 210, 215, 220, 222, 223, 225, 227, 228, 230, 241, 245, 248, 249, 251, 252], "central": [2, 243, 244], "part": [2, 4, 8, 48, 51, 53, 54, 55, 82, 91, 151, 201, 235, 243, 244, 245, 248, 252], "algorithm": [2, 8, 9, 13, 14, 52, 78, 160, 172, 173, 174, 175, 201, 216, 217, 224, 241, 243, 244, 245, 249, 251], "implement": [2, 3, 9, 11, 16, 46, 48, 51, 53, 54, 55, 87, 98, 103, 120, 133, 134, 135, 160, 170, 172, 175, 216, 224, 226, 229, 241, 243, 244, 245, 248, 251], "wide": [2, 3, 5, 243], "we": [2, 3, 5, 7, 9, 25, 37, 45, 48, 49, 51, 53, 54, 55, 85, 87, 95, 103, 110, 121, 238, 241, 243, 244, 245, 247, 248, 249, 251, 252], "give": [2, 7, 52, 238, 243, 244, 248, 249, 251], "abil": [2, 248], "veri": [2, 3, 244, 248, 251, 252], "influenti": 2, "sampl": [2, 4, 8, 9, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 48, 51, 52, 53, 54, 55, 86, 106, 108, 110, 116, 120, 124, 130, 131, 134, 135, 141, 143, 144, 147, 148, 161, 162, 163, 171, 172, 177, 201, 207, 210, 213, 244, 245, 249, 251, 252], "latenc": 2, "especi": [2, 3, 7, 8, 70], "larger": [2, 4, 170], "volum": 2, "lazymemmapstorag": [2, 237, 243, 244, 249], "advis": [2, 243, 252], "due": [2, 3, 5, 249, 252], "serialis": 2, "memmaptensor": [2, 249], "well": [2, 3, 8, 17, 46, 48, 51, 53, 54, 55, 131, 132, 243, 244, 249, 251, 252], "specifi": [2, 11, 13, 14, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 91, 93, 100, 110, 147, 148, 243, 245], "file": [2, 6, 7, 8, 192, 241, 243, 244, 250, 251], "locat": [2, 7, 51, 82, 90, 120, 127, 134, 135, 244, 245], "improv": [2, 4, 78, 160], "failur": [2, 4], "recoveri": 2, "liststorag": [2, 30, 31, 32, 237], "were": [2, 7, 54, 55, 243, 245], "found": [2, 6, 7, 10, 25, 32, 48, 51, 53, 54, 55, 103, 148, 162, 172, 243, 244, 251], "rough": 2, "benchmark": [2, 3, 9], "http": [2, 5, 6, 7, 10, 18, 19, 20, 30, 41, 53, 69, 85, 112, 113, 114, 115, 118, 119, 124, 126, 128, 129, 131, 132, 144, 153, 160, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 176, 182, 185, 186, 189, 216, 219, 224, 226, 229, 243, 244, 249, 251], "com": [2, 5, 6, 7, 10, 18, 19, 20, 249, 251], "tree": 2, "type": [2, 3, 14, 18, 19, 20, 30, 32, 34, 48, 51, 52, 53, 54, 55, 72, 85, 87, 95, 98, 99, 102, 103, 111, 122, 126, 141, 143, 147, 148, 155, 216, 219, 221, 224, 226, 229, 233, 244, 245, 248, 252], "1x": 2, "lazytensorstorag": [2, 237, 245], "83x": 2, "3": [2, 3, 6, 7, 10, 11, 13, 14, 16, 25, 26, 27, 28, 29, 48, 51, 53, 54, 55, 72, 73, 82, 85, 87, 95, 97, 99, 102, 110, 111, 112, 113, 119, 121, 122, 124, 127, 137, 138, 139, 140, 142, 145, 147, 150, 151, 153, 156, 167, 182, 183, 184, 187, 188, 190, 191, 193, 209, 221, 241, 243, 244, 245, 248, 249, 251, 252], "44x": 2, "too": [2, 7, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 120, 134, 135, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 243, 244, 245, 248, 252], "difficult": [2, 4], "element": [2, 13, 14, 16, 18, 19, 20, 27, 28, 29, 30, 31, 32, 33, 37, 38, 39, 40, 41, 86, 111, 141, 147, 148, 201, 245, 252], "pai": [2, 8, 244], "attent": [2, 8, 244], "alwai": [2, 20, 48, 51, 53, 54, 55, 81, 244, 245, 248], "lead": [2, 3, 4, 8, 10, 11, 25, 31, 37, 45, 95, 120, 134, 135, 248, 251], "dimens": [2, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 69, 70, 77, 82, 86, 93, 97, 100, 111, 122, 125, 126, 133, 134, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 235, 244, 245, 248], "other": [2, 3, 4, 7, 8, 21, 31, 37, 38, 39, 40, 45, 46, 48, 51, 52, 53, 54, 55, 73, 92, 103, 126, 127, 148, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 207, 216, 224, 226, 229, 233, 234, 241, 243, 244, 245, 248, 249, 251, 252], "word": [2, 37, 248, 252], "creat": [2, 3, 4, 5, 6, 7, 10, 13, 14, 16, 17, 18, 19, 20, 30, 31, 32, 48, 49, 51, 53, 54, 55, 85, 91, 98, 99, 103, 109, 111, 112, 113, 114, 115, 119, 122, 123, 148, 163, 165, 173, 193, 207, 214, 217, 218, 231, 233, 234, 243, 244, 245, 248, 249, 251, 252], "1m": [2, 213, 243, 245, 249], "multidimension": [2, 32, 41], "doe": [2, 3, 18, 30, 32, 37, 41, 46, 125, 149, 150, 161, 171, 172, 181, 210, 241, 243, 244, 245, 248, 252], "desir": [2, 3, 48, 51, 53, 54, 55, 72, 82, 85, 86, 95, 99, 102, 108, 111, 122, 147, 148, 243, 248], "diversifi": 2, "make": [2, 4, 7, 37, 46, 48, 51, 53, 54, 55, 61, 64, 82, 85, 86, 105, 125, 148, 172, 207, 218, 235, 243, 244, 245, 247, 248, 249, 251, 252], "more": [2, 3, 4, 6, 8, 11, 13, 14, 16, 17, 18, 19, 20, 30, 31, 32, 33, 37, 48, 51, 53, 54, 55, 104, 122, 125, 127, 141, 143, 147, 153, 160, 165, 172, 182, 185, 186, 189, 205, 219, 238, 241, 243, 244, 245, 247, 248, 249, 252], "To": [2, 3, 4, 6, 7, 8, 18, 19, 20, 30, 31, 32, 37, 48, 51, 53, 54, 55, 103, 138, 139, 140, 144, 210, 243, 244, 245, 248, 249, 251, 252], "do": [2, 3, 4, 7, 51, 81, 86, 109, 125, 139, 241, 243, 244, 245, 247, 248, 251, 252], "custom": [2, 3, 5, 48, 51, 53, 54, 55, 235, 244, 245], "name": [2, 6, 7, 11, 37, 48, 51, 53, 54, 55, 58, 73, 75, 87, 91, 92, 99, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 195, 197, 198, 199, 200, 204, 205, 216, 219, 221, 224, 226, 229, 241, 243, 244, 245, 248, 252], "randomcroptensordict": 2, "here": [2, 3, 4, 7, 8, 9, 10, 243, 244, 245, 248, 251, 252], "how": [2, 3, 18, 19, 20, 30, 32, 41, 48, 51, 53, 54, 55, 161, 169, 171, 172, 210, 238, 243, 244, 245, 247, 248, 249, 251, 252], "wrapper": [2, 3, 11, 17, 32, 33, 52, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 127, 141, 143, 144, 148, 152, 182, 198, 199, 200, 235, 243, 245, 249, 252], "around": [2, 5, 7, 17, 32, 33, 52, 148, 182, 252], "offlin": [2, 8, 13, 14, 16, 17, 18, 19, 20, 105, 170, 241, 249, 251], "present": [2, 3, 30, 37, 41, 45, 48, 51, 53, 54, 55, 75, 91, 92, 109, 112, 113, 114, 115, 119, 126, 144, 147, 148, 149, 150, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 235, 241, 243, 247, 251], "replaybuff": [2, 33, 47, 86, 227, 231, 237, 245, 249, 251], "sampler": [2, 30, 31, 32, 33, 37, 38, 39, 40, 41, 42, 45, 46, 86, 237, 243, 245], "By": [2, 3, 29, 51, 148, 206, 235, 243, 244, 249, 252], "map": [2, 3, 8, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 48, 51, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 103, 127, 138, 139, 140, 147, 148, 150, 152, 153, 237, 243, 244, 245, 249], "tensor": [2, 3, 8, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 47, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 69, 70, 72, 73, 77, 80, 82, 85, 86, 87, 90, 95, 96, 97, 98, 99, 100, 102, 103, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 127, 130, 133, 134, 135, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 157, 158, 162, 163, 167, 168, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 216, 219, 221, 224, 226, 229, 241, 243, 244, 245, 247, 248, 249, 251, 252], "allow": [2, 3, 13, 14, 16, 17, 18, 19, 20, 29, 48, 51, 53, 54, 55, 87, 95, 109, 122, 178, 241, 243, 245, 248, 252], "promptli": 2, "virtual": 2, "instal": [2, 5, 10, 18, 19, 20, 37, 210, 238, 245, 252], "respons": [2, 3, 8, 210, 252], "d4rl": [2, 37], "clone": [2, 4, 8, 138, 139, 140, 147, 170, 216, 224, 226, 229, 237, 243, 244, 248, 251], "repositori": [2, 7], "latest": [2, 10, 53, 207, 245, 248, 251], "wheel": [2, 245], "publish": 2, "pypi": [2, 251], "parent": [2, 3, 34, 48, 70, 77, 78, 82, 85, 95, 98, 100, 138, 172, 248, 251, 252], "subclass": [2, 3, 48, 51, 53, 54, 55, 98, 105, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 142, 143, 144, 146, 147, 148, 149, 157, 172, 243, 248], "basic": [2, 52, 245, 252], "properti": [2, 3, 48, 51, 52, 53, 54, 55, 99, 116, 120, 125, 130, 133, 134, 135, 248], "observ": [2, 3, 8, 13, 14, 16, 34, 37, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 64, 65, 66, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 83, 87, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 103, 109, 112, 113, 114, 115, 121, 128, 129, 131, 137, 138, 139, 140, 142, 143, 144, 145, 146, 151, 152, 153, 154, 163, 167, 182, 183, 184, 193, 216, 219, 221, 224, 226, 229, 231, 241, 244, 245, 247, 248, 251, 252], "action": [2, 3, 8, 9, 13, 14, 16, 26, 29, 34, 48, 51, 52, 53, 54, 55, 57, 64, 65, 66, 73, 74, 78, 81, 87, 92, 99, 109, 110, 112, 113, 114, 115, 117, 118, 122, 123, 124, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 151, 153, 154, 163, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 216, 219, 221, 224, 226, 229, 231, 235, 241, 243, 244, 245, 247, 249, 251, 252], "shape": [2, 3, 13, 14, 16, 21, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 70, 82, 87, 95, 97, 104, 105, 109, 116, 117, 122, 125, 127, 130, 133, 145, 147, 150, 178, 193, 201, 207, 210, 231, 243, 244, 245, 247, 249, 251, 252], "dtype": [2, 3, 13, 14, 16, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 41, 48, 51, 52, 53, 54, 55, 57, 64, 65, 66, 72, 73, 74, 82, 85, 87, 95, 97, 99, 102, 105, 109, 110, 124, 125, 126, 138, 139, 140, 142, 144, 145, 146, 147, 150, 151, 153, 154, 182, 183, 184, 216, 219, 221, 224, 226, 229, 244, 245, 247, 248, 249, 251, 252], "import": [2, 3, 4, 6, 7, 10, 13, 14, 16, 21, 30, 32, 37, 41, 49, 51, 52, 80, 82, 85, 87, 95, 102, 103, 109, 110, 122, 124, 127, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 161, 182, 183, 184, 203, 206, 216, 219, 221, 224, 226, 229, 231, 244, 245, 247, 248, 249, 251, 252], "match": [2, 3, 6, 8, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 49, 51, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 99, 100, 111, 116, 122, 133, 147, 148, 164, 171, 173, 175, 207, 212, 244, 245, 247, 248, 251, 252], "input": [2, 3, 4, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 52, 53, 54, 55, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 91, 92, 94, 95, 96, 98, 100, 101, 102, 103, 105, 109, 111, 112, 113, 114, 115, 121, 122, 125, 126, 131, 132, 144, 147, 148, 149, 150, 159, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 204, 208, 213, 231, 241, 243, 244, 245, 248, 251, 252], "output": [2, 3, 4, 13, 14, 16, 17, 30, 31, 32, 37, 48, 51, 52, 53, 54, 55, 69, 82, 85, 87, 96, 98, 102, 105, 111, 112, 113, 117, 118, 121, 122, 127, 138, 141, 143, 144, 147, 148, 149, 150, 153, 154, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 193, 201, 243, 244, 245, 247, 248, 249, 251, 252], "send": [2, 3, 8, 244, 251], "receiv": [2, 3, 48, 51, 53, 54, 55, 98, 122, 244, 245, 247, 248], "spawn": [2, 3, 4, 18, 21, 53], "check": [2, 3, 4, 5, 6, 7, 11, 18, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 49, 51, 52, 53, 54, 55, 70, 76, 86, 105, 147, 148, 155, 243, 244, 245, 247, 248, 249, 252], "check_env_spec": [2, 3, 237, 245, 248], "method": [2, 3, 4, 13, 14, 16, 17, 30, 31, 32, 33, 37, 38, 39, 40, 41, 46, 48, 51, 53, 54, 55, 69, 72, 77, 82, 85, 87, 88, 95, 98, 99, 102, 110, 121, 138, 139, 140, 147, 148, 149, 155, 160, 192, 232, 241, 242, 243, 245, 248, 252], "saniti": [2, 3, 7, 105, 244, 245], "offer": [3, 7, 248, 252], "handl": [3, 48, 51, 53, 54, 55, 103, 122, 210, 233, 234, 243, 245], "differ": [3, 4, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 69, 73, 82, 87, 99, 100, 122, 124, 153, 154, 170, 172, 178, 182, 183, 206, 210, 212, 233, 234, 241, 243, 244, 245, 247, 248, 249, 252], "dm": [3, 243, 252], "lab": [3, 58, 59, 238], "base": [3, 4, 8, 9, 12, 13, 14, 16, 17, 18, 19, 20, 44, 47, 52, 53, 95, 101, 138, 166, 210, 216, 224, 226, 229, 241, 243, 246, 248, 250, 252], "goal": [3, 4, 243, 244, 245, 248], "abl": [3, 243, 245, 247, 248, 251], "experi": [3, 30, 37, 41, 105, 195, 196, 197, 198, 199, 200, 238, 244, 245], "even": [3, 4, 8, 14, 18, 20, 38, 39, 40, 46, 49, 243, 245, 248, 252], "simul": [3, 5, 7, 8, 67, 110, 124, 243, 245], "some": [3, 4, 7, 8, 9, 21, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 85, 105, 112, 148, 149, 150, 201, 213, 241, 243, 244, 245, 248, 251, 252], "box": [3, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "under": [3, 4, 37, 48, 51, 53, 54, 55, 147, 148, 243, 248, 252], "lib": [3, 5, 6, 7, 9, 10, 13, 14, 16, 21, 49, 51, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 80, 82, 87, 95, 103, 216, 219, 221, 224, 226, 229, 231, 243, 244, 245, 247, 249, 251, 252], "hope": 3, "imit": 3, "nn": [3, 13, 14, 16, 48, 51, 52, 53, 54, 55, 72, 73, 85, 95, 99, 102, 110, 111, 112, 113, 114, 115, 117, 118, 119, 122, 124, 127, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 160, 163, 165, 182, 183, 184, 226, 229, 231, 243, 244, 245, 247, 248, 249, 251], "typic": [3, 4, 8, 48, 51, 53, 54, 55, 177, 241, 245, 248], "organis": [3, 248], "arbitrari": [3, 29, 54, 55, 243, 244, 248], "nest": [3, 25, 48, 51, 53, 54, 55, 182, 183, 184, 241, 244, 245, 248, 251], "structur": [3, 7, 31, 144, 182, 183, 184, 244, 245, 248, 249], "attribut": [3, 4, 48, 51, 53, 54, 55, 85, 94, 148, 248], "batch_siz": [3, 8, 13, 14, 16, 25, 30, 31, 32, 33, 37, 42, 48, 50, 52, 57, 64, 65, 66, 69, 87, 95, 109, 110, 124, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 201, 207, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "togeth": [3, 13, 14, 16, 17, 18, 19, 20, 86, 138, 139, 140, 152, 243, 245], "expect": [3, 4, 7, 25, 34, 45, 48, 51, 52, 53, 54, 55, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 85, 87, 88, 89, 90, 92, 94, 95, 96, 97, 98, 100, 105, 144, 147, 150, 160, 161, 171, 172, 214, 238, 241, 243, 245, 248, 252], "live": [3, 12, 13, 14, 16, 17, 19, 20, 30, 31, 32, 33, 37, 48, 51, 52, 53, 54, 55], "actual": [3, 4, 7, 17, 48, 51, 53, 54, 55, 213, 243, 244, 245, 248], "just": [3, 4, 201, 241, 243, 244, 245, 248, 251, 252], "retriev": [3, 30, 31, 32, 33, 37, 48, 51, 53, 54, 55, 70, 82, 109, 110, 124, 148, 161, 171, 172, 182, 183, 184, 216, 219, 221, 224, 226, 229, 235, 241, 244, 245, 248, 252], "care": [3, 8, 48, 51, 53, 54, 55, 98, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 243, 245, 248], "see": [3, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 104, 111, 120, 122, 125, 134, 135, 147, 148, 207, 243, 244, 245, 248, 252], "below": [3, 7, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 111, 120, 122, 134, 135, 147, 207, 244, 245, 248], "parametr": [3, 126, 148, 170, 175, 243, 245], "hardwar": 3, "input_spec": [3, 48, 52, 72, 73, 74, 82, 87, 92, 94, 98, 99, 100, 110, 124, 243, 245, 248, 252], "compositespec": [3, 48, 50, 51, 52, 53, 54, 55, 73, 87, 94, 95, 98, 110, 124, 137, 141, 143, 145, 150, 237, 243, 245, 248, 252], "output_spec": [3, 87, 98, 99, 248], "reward": [3, 13, 14, 16, 34, 48, 51, 52, 53, 54, 55, 57, 64, 65, 66, 68, 72, 74, 87, 89, 90, 91, 92, 98, 99, 100, 101, 102, 103, 109, 110, 124, 152, 162, 163, 167, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 203, 204, 206, 208, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "observation_spec": [3, 48, 52, 69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 85, 88, 91, 92, 94, 95, 96, 97, 98, 99, 100, 110, 124, 214, 231, 243, 245, 247, 248, 252], "pair": [3, 37, 48, 51, 53, 54, 55, 95, 138, 148, 243, 244, 245, 247, 248, 252], "pointer": [3, 6, 49], "action_spec": [3, 13, 14, 15, 16, 18, 19, 20, 48, 51, 52, 53, 54, 55, 57, 64, 99, 132, 137, 139, 142, 145, 146, 153, 154, 231, 244, 245, 247, 248, 249, 251, 252], "reward_spec": [3, 48, 52, 68, 72, 74, 89, 90, 91, 98, 99, 100, 110, 124, 245, 248, 252], "done_spec": [3, 98, 99, 248, 252], "flag": [3, 8, 30, 31, 32, 33, 37, 185, 186, 187, 188, 189, 190, 191, 248, 249], "importantli": [3, 148], "4": [3, 7, 13, 14, 16, 23, 26, 29, 52, 58, 59, 60, 63, 103, 110, 111, 112, 113, 118, 119, 121, 122, 124, 127, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 156, 192, 243, 244, 245, 248, 249, 251, 252], "action_s": 3, "help": [3, 4, 48, 51, 53, 54, 55, 238, 243, 244, 245], "prealloc": [3, 248], "consist": [3, 48, 51, 53, 54, 55, 111, 122, 243, 244, 245, 248, 249, 252], "With": [3, 241, 243, 252], "necessarili": 3, "requir": [3, 4, 7, 8, 16, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 122, 147, 149, 150, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 241, 243, 244, 245, 248, 252], "If": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 48, 49, 51, 52, 53, 54, 55, 70, 71, 73, 75, 77, 81, 82, 85, 86, 91, 92, 95, 98, 99, 102, 103, 109, 111, 121, 122, 141, 143, 144, 147, 148, 149, 150, 156, 157, 159, 167, 170, 175, 181, 182, 183, 184, 190, 191, 205, 207, 210, 212, 214, 216, 224, 226, 229, 231, 235, 238, 243, 244, 245, 247, 248, 251, 252], "instanti": [3, 54, 55, 98, 243, 244, 248, 252], "0": [3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 21, 27, 28, 29, 30, 32, 37, 41, 48, 51, 52, 53, 54, 55, 57, 64, 68, 70, 72, 73, 81, 82, 85, 95, 97, 99, 102, 103, 105, 110, 111, 112, 113, 115, 118, 120, 122, 124, 125, 126, 127, 131, 132, 133, 134, 135, 141, 143, 144, 147, 150, 157, 160, 161, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 201, 208, 210, 231, 235, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252], "stateless": [3, 98, 243, 248, 252], "set_se": [3, 13, 14, 16, 17, 48, 51, 52, 53, 54, 55, 57, 64, 82, 87, 99, 243, 248, 251, 252], "seed": [3, 13, 14, 16, 17, 48, 51, 52, 53, 54, 55, 58, 65, 66, 99, 105, 210, 243], "next": [3, 4, 8, 13, 14, 16, 25, 30, 31, 32, 37, 48, 49, 51, 52, 53, 54, 55, 57, 64, 65, 66, 80, 87, 103, 109, 110, 124, 132, 152, 163, 173, 181, 182, 183, 184, 204, 208, 243, 244, 247, 248, 249, 251, 252], "determinist": [3, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 118, 128, 132, 137, 143, 147, 148, 243, 244, 248, 252], "preced": [3, 121, 244], "without": [3, 7, 9, 48, 51, 53, 54, 55, 139, 173, 181, 231, 238, 243, 244, 245, 248, 252], "risk": [3, 86], "overlap": 3, "consecut": [3, 45, 144, 244, 252], "still": [3, 9, 94, 141, 171, 243, 244, 247, 248, 252], "reproduc": [3, 105, 245], "maximum": [3, 4, 13, 14, 16, 17, 18, 19, 20, 24, 38, 39, 40, 48, 51, 53, 54, 55, 73, 89, 94, 96, 133, 134, 135, 145, 170, 175, 177, 207, 243, 244, 245, 248, 251, 252], "max_step": [3, 13, 48, 51, 52, 53, 54, 55, 65, 66, 94, 244, 251, 252], "n": [3, 6, 7, 23, 26, 29, 48, 51, 53, 54, 55, 69, 73, 77, 100, 124, 148, 160, 181, 207, 241, 243, 244, 252], "tensordictmodul": [3, 13, 14, 16, 17, 20, 124, 147, 149, 243, 244, 245, 247, 248, 249], "ani": [3, 5, 8, 25, 30, 31, 32, 33, 37, 38, 39, 40, 43, 45, 46, 47, 48, 49, 51, 53, 54, 55, 77, 85, 86, 99, 103, 105, 111, 122, 126, 147, 148, 149, 150, 172, 198, 210, 238, 243, 244, 245, 248, 251, 252], "compat": [3, 7, 11, 18, 19, 46, 48, 51, 53, 54, 55, 62, 69, 103, 155, 178, 244, 251], "figur": [3, 243, 244, 245, 248, 252], "summar": [3, 248], "brief": [3, 245, 252], "popul": [3, 80, 95, 245, 248], "entri": [3, 13, 14, 16, 18, 19, 20, 22, 37, 48, 51, 53, 54, 55, 71, 77, 80, 82, 85, 87, 94, 102, 109, 182, 183, 184, 243, 245, 248, 249], "deliveri": 3, "step_mdp": [3, 237, 243, 244, 248, 251, 252], "nasium": 3, "recent": [3, 7, 11, 243, 244, 251, 252], "shift": [3, 157, 245], "termin": [3, 37, 149, 243, 244, 245, 248, 251], "trust": 3, "truncat": [3, 13, 14, 16, 18, 19, 20, 94, 135, 245, 252], "refer": [3, 7, 8, 48, 51, 53, 54, 55, 99, 103, 110, 118, 124, 128, 129, 131, 132, 153, 160, 165, 166, 167, 168, 172, 182, 185, 186, 189, 219, 243, 244, 245, 251], "stepcount": [3, 13, 244, 245, 251], "chosen": [3, 95, 216, 224, 226, 229], "someth": [3, 48, 51, 53, 54, 55, 238, 244, 245, 248, 252], "els": [3, 241, 243, 244, 245, 248, 249], "100": [3, 48, 51, 53, 54, 55, 82, 202, 210, 231, 244, 245, 247, 248, 249, 251, 252], "truncated_kei": [3, 94], "assess": [3, 243], "split_trajectori": [3, 13, 14, 16, 17, 18, 19, 20, 237], "slice": [3, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37], "adjac": [3, 22, 77], "reli": [3, 160, 243, 245, 248, 252], "traj_id": [3, 13, 14, 16, 22, 251], "junction": 3, "miss": [3, 4, 6, 7, 11, 25, 48, 51, 53, 54, 55, 95, 99, 109, 149, 150, 238], "context": [3, 5, 8, 48, 49, 51, 53, 54, 55, 95, 100, 125, 179, 180, 182, 185, 186, 189, 206, 243, 244, 245, 248, 249], "mark": 3, "through": [3, 4, 5, 8, 16, 18, 20, 54, 55, 86, 122, 148, 149, 150, 157, 243, 244, 245, 247, 248, 249, 252], "inittrack": 3, "our": [3, 7, 8, 18, 243, 244, 245, 247, 249, 251], "tutori": [3, 243, 244, 246, 247, 248, 249, 250, 251, 252], "inform": [3, 4, 13, 14, 16, 17, 18, 19, 20, 48, 49, 51, 53, 54, 55, 111, 122, 241, 244, 245, 248], "design": [3, 13, 14, 29, 48, 51, 53, 54, 55, 86, 99, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 243, 244, 245, 247, 248, 252], "scratch": [3, 8, 243, 244, 248], "better": [3, 8, 244, 245, 248], "featur": [3, 4, 13, 14, 16, 17, 18, 19, 20, 29, 48, 51, 53, 54, 55, 69, 77, 95, 100, 111, 118, 119, 122, 125, 126, 148, 182, 183, 184, 235, 243, 244, 245, 248, 252], "intens": [3, 8], "gym3": 3, "envpool": [3, 53], "interfac": [3, 122, 125, 243, 245, 248], "simultan": [3, 20, 54, 55, 248], "often": [3, 8, 169, 210, 244, 248, 252], "competit": 3, "advantag": [3, 8, 119, 160, 161, 171, 172, 174, 182, 183, 184, 185, 186, 187, 189, 190, 241, 243, 244, 245, 248, 252], "scale": [3, 4, 37, 82, 90, 118, 120, 127, 131, 132, 134, 135, 138, 139, 140, 145, 148, 150, 208, 214, 216, 224, 226, 229, 235, 243, 244, 245, 251], "varieti": 3, "its": [3, 4, 5, 7, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 32, 34, 35, 36, 48, 51, 52, 53, 54, 55, 69, 98, 99, 103, 111, 141, 142, 143, 148, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 210, 231, 241, 243, 244, 245, 248, 249, 252], "own": [3, 13, 14, 17, 21, 48, 51, 53, 54, 55, 244, 245, 248], "As": [3, 4, 48, 51, 53, 54, 55, 148, 243, 244, 245, 248, 249, 251, 252], "inherit": [3, 123, 241, 245], "serialenv": [3, 95, 237, 252], "enjoi": 3, "exact": 3, "Of": [3, 7, 238, 248, 252], "cours": [3, 4, 238, 245, 248, 252], "correspond": [3, 4, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 41, 48, 51, 52, 53, 54, 55, 85, 95, 99, 102, 103, 144, 148, 244, 245, 248, 249], "count": [3, 49, 94, 144, 206, 213, 243, 244, 245, 252], "def": [3, 11, 21, 48, 49, 51, 52, 53, 54, 55, 110, 124, 151, 153, 156, 241, 243, 244, 247, 248, 251, 252], "make_env": [3, 66, 103, 217, 218, 243, 244, 252], "gymenv": [3, 5, 13, 14, 16, 17, 21, 49, 62, 72, 80, 82, 87, 95, 99, 103, 216, 219, 221, 224, 226, 229, 231, 237, 243, 244, 245, 249, 251, 252], "v1": [3, 13, 14, 16, 21, 37, 49, 53, 80, 82, 87, 95, 178, 187, 188, 190, 191, 244, 248, 251, 252], "from_pixel": [3, 58, 59, 216, 224, 226, 229, 243, 244, 249, 251, 252], "9": [3, 7, 103, 244, 245, 248, 249], "81": [3, 248, 249], "must": [3, 7, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 38, 39, 40, 46, 48, 49, 51, 53, 54, 55, 78, 82, 95, 99, 100, 111, 122, 147, 148, 153, 154, 185, 186, 187, 188, 189, 190, 191, 201, 206, 207, 210, 212, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 251], "work": [3, 4, 8, 11, 48, 51, 53, 54, 55, 70, 85, 103, 111, 122, 210, 238, 243, 244, 245, 247, 248, 249, 251, 252], "print": [3, 6, 7, 13, 14, 16, 21, 23, 25, 26, 29, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 70, 73, 74, 80, 82, 87, 95, 97, 103, 109, 111, 122, 127, 137, 138, 139, 140, 142, 143, 144, 146, 147, 150, 151, 153, 154, 156, 216, 219, 221, 224, 226, 229, 231, 241, 243, 244, 245, 247, 248, 249, 251, 252], "simpli": [3, 6, 75, 92, 243, 244, 245, 252], "b": [3, 7, 8, 22, 25, 125, 126, 182, 183, 184, 193, 244, 249], "c": [3, 6, 7, 25, 82, 216, 219, 221, 224, 226, 229, 244], "d": [3, 30, 41, 148, 251], "get": [3, 4, 6, 7, 8, 37, 46, 49, 54, 55, 70, 73, 74, 82, 86, 97, 103, 137, 143, 148, 185, 186, 189, 197, 243, 244, 245, 248, 251, 252], "forc": [3, 6, 7, 13, 14, 18, 20, 244, 248], "reset_work": 3, "fals": [3, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 70, 72, 77, 80, 81, 82, 85, 86, 87, 90, 95, 97, 99, 100, 102, 103, 105, 109, 110, 111, 112, 122, 124, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 162, 163, 164, 165, 166, 167, 168, 172, 173, 174, 175, 177, 178, 182, 183, 184, 187, 188, 190, 191, 203, 204, 206, 207, 208, 210, 216, 219, 221, 224, 226, 229, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "field": [3, 13, 14, 16, 17, 25, 48, 51, 52, 53, 54, 55, 57, 64, 65, 66, 87, 95, 99, 109, 110, 124, 138, 139, 140, 142, 144, 145, 146, 147, 150, 151, 153, 154, 214, 216, 219, 221, 224, 226, 229, 238, 244, 245, 247, 248, 249, 251, 252], "bool": [3, 13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 45, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 64, 65, 66, 70, 73, 77, 80, 81, 82, 85, 87, 90, 95, 97, 99, 100, 102, 103, 105, 109, 110, 111, 112, 113, 120, 122, 124, 125, 126, 134, 135, 141, 144, 147, 148, 149, 150, 155, 160, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 175, 177, 178, 182, 183, 184, 187, 188, 190, 191, 192, 193, 203, 204, 206, 207, 208, 210, 216, 219, 221, 224, 226, 229, 235, 244, 245, 247, 248, 249, 251, 252], "500": [3, 210, 243, 248, 251, 252], "uint8": [3, 36, 97, 244, 249, 251, 252], "none": [3, 8, 11, 12, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 49, 51, 52, 53, 54, 55, 65, 66, 68, 69, 70, 71, 72, 74, 77, 79, 82, 83, 85, 86, 87, 88, 89, 90, 91, 94, 95, 96, 97, 98, 99, 102, 103, 104, 106, 108, 109, 110, 111, 112, 113, 114, 115, 116, 119, 121, 122, 123, 124, 125, 126, 130, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 167, 168, 170, 174, 175, 181, 182, 183, 184, 187, 188, 190, 191, 192, 193, 194, 195, 198, 199, 204, 205, 206, 207, 208, 210, 214, 216, 217, 218, 219, 220, 221, 222, 224, 225, 226, 228, 229, 230, 231, 233, 234, 235, 241, 243, 244, 245, 248, 251, 252], "is_shar": [3, 13, 14, 16, 25, 52, 57, 64, 65, 66, 87, 95, 103, 109, 110, 124, 138, 139, 140, 142, 144, 145, 146, 147, 150, 151, 153, 154, 216, 219, 221, 224, 226, 229, 244, 245, 247, 248, 249, 251, 252], "note": [3, 4, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 103, 144, 148, 243, 244, 247, 252], "launch": [3, 18, 19, 20, 21], "quit": [3, 243, 244, 245, 252], "time": [3, 4, 7, 8, 13, 14, 16, 17, 18, 20, 48, 49, 51, 53, 54, 55, 70, 86, 95, 96, 103, 109, 118, 121, 144, 164, 167, 173, 177, 182, 183, 184, 210, 244, 245, 247, 248, 249, 251, 252], "mani": [3, 4, 161, 164, 171, 172, 173, 177, 244, 245, 248, 252], "start": [3, 4, 5, 13, 49, 109, 205, 244, 248, 252], "bottleneck": [3, 8], "so": [3, 4, 6, 7, 10, 48, 51, 53, 54, 55, 95, 103, 149, 150, 243, 245, 248, 252], "onc": [3, 7, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 99, 141, 143, 208, 241, 243, 244, 245, 248, 252], "great": [3, 7, 8, 251], "speedup": [3, 8, 252], "precis": [3, 97, 109, 243, 245], "anoth": [3, 8, 48, 51, 53, 54, 55, 98, 122, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 243, 245, 247, 248, 252], "thing": [3, 7, 8, 238, 243, 245, 252], "misspecifi": 3, "caus": [3, 7, 8, 86], "breakag": 3, "t": [3, 4, 6, 7, 8, 11, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 35, 36, 41, 45, 48, 49, 51, 53, 54, 55, 85, 96, 102, 103, 109, 147, 156, 162, 182, 183, 184, 210, 212, 235, 238, 243, 244, 245, 247, 248, 249, 251, 252], "rais": [3, 13, 14, 16, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 76, 99, 105, 156, 243, 244, 245, 251], "assert": [3, 6, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 51, 87, 103, 105, 127, 182, 183, 184, 201, 209, 243, 244, 247, 252], "mismatch": [3, 244], "mostli": [3, 17, 252], "purpos": [3, 7, 231, 243, 245, 249, 252], "want": [3, 6, 7, 8, 82, 243, 244, 245, 248, 249, 251, 252], "subprocess": [3, 49], "addit": [3, 4, 37, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 141, 147, 159, 182], "multithread": [3, 30, 31, 32, 37, 53], "multithreadedenv": [3, 237], "underneath": 3, "higher": [3, 4, 243, 244, 245, 252], "restrict": [3, 244, 249, 252], "flexibl": [3, 9, 53, 241, 243, 252], "cover": [3, 238, 243, 245, 248, 251], "popular": 3, "atari": [3, 4, 69, 252], "classic": [3, 52, 244], "benchmark_batched_env": 3, "py": [3, 241, 243, 244, 245, 247, 248, 249, 250, 251, 252], "case": [3, 4, 5, 7, 8, 11, 13, 14, 16, 17, 18, 19, 20, 21, 25, 30, 32, 41, 48, 51, 53, 54, 55, 95, 99, 105, 122, 147, 148, 150, 159, 201, 212, 233, 234, 235, 241, 243, 245, 248, 252], "raw": [3, 4, 120, 134, 135, 244, 248], "treat": 3, "logic": 3, "torchvis": [3, 85, 102, 251, 252], "transformedenv": [3, 13, 49, 72, 77, 80, 81, 82, 87, 95, 98, 103, 216, 219, 221, 224, 226, 229, 243, 244, 245, 247, 248, 249, 251, 252], "primit": [3, 4, 243, 244], "built": [3, 5, 7, 227, 231, 232, 235, 244, 245, 252], "base_env": [3, 73, 74, 95, 243, 244, 245, 249, 251, 252], "totensorimag": [3, 221, 244, 251, 252], "in_kei": [3, 13, 14, 16, 52, 68, 69, 70, 71, 73, 74, 77, 79, 82, 83, 85, 87, 88, 89, 90, 91, 96, 97, 98, 102, 103, 110, 124, 137, 138, 139, 140, 145, 147, 148, 150, 151, 155, 156, 162, 163, 182, 183, 184, 192, 193, 226, 229, 231, 243, 244, 245, 247, 248, 249, 251, 252], "resiz": [3, 244, 252], "64": [3, 112, 113, 119, 243, 244, 245, 247, 248, 249, 251, 252], "now": [3, 7, 243, 245, 247, 249, 252], "appar": [3, 203], "bring": [3, 245, 252], "signific": [3, 5, 8, 245, 252], "kind": [3, 34, 109], "consult": 3, "interest": [3, 148, 245, 248, 252], "abov": [3, 7, 48, 51, 53, 54, 55, 120, 134, 135, 159, 241, 243, 244, 245, 248, 252], "resize_par": 3, "out_kei": [3, 13, 14, 16, 52, 68, 69, 70, 71, 77, 79, 82, 83, 85, 87, 88, 89, 91, 96, 97, 98, 102, 110, 124, 137, 138, 139, 140, 145, 147, 148, 150, 151, 153, 154, 155, 156, 182, 183, 184, 206, 231, 243, 245, 247, 248, 249, 251, 252], "easi": [3, 5, 243, 244, 245, 249, 252], "root": [3, 25, 109, 120, 134, 135, 248, 252], "graph": [3, 4, 8, 179, 180, 248], "inv": [3, 73, 248], "appli": [3, 4, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 51, 53, 54, 55, 69, 70, 72, 73, 75, 76, 77, 78, 80, 84, 86, 87, 91, 92, 94, 95, 96, 98, 99, 101, 103, 134, 182, 205, 241, 243, 244, 245, 248, 251, 252], "revers": 3, "order": [3, 16, 29, 30, 31, 32, 33, 37, 45, 48, 51, 53, 54, 55, 99, 147, 149, 150], "chain": [3, 30, 31, 32, 37, 72, 73, 111, 150, 252], "taken": [3, 48, 51, 53, 54, 55, 243, 244, 245, 248], "includ": [3, 4, 7, 9, 38, 39, 40, 46, 48, 51, 52, 53, 54, 55, 99, 103, 213, 241, 243, 244, 245, 248, 252], "invers": [3, 4, 82, 158, 170, 248], "in_keys_inv": [3, 74, 82, 83, 87, 98, 243, 247, 248, 252], "append_transform": [3, 30, 31, 32, 33, 37, 85, 95, 243, 248, 251, 252], "doubletofloat": [3, 216, 219, 224, 226, 229, 243, 245, 247], "float32": [3, 13, 14, 16, 25, 30, 34, 41, 52, 57, 64, 65, 66, 74, 82, 87, 95, 97, 109, 110, 124, 138, 139, 140, 142, 144, 145, 146, 147, 150, 151, 153, 154, 216, 219, 221, 224, 226, 229, 244, 245, 247, 248, 249, 251, 252], "float64": [3, 48, 51, 53, 54, 55, 65, 66, 72, 85, 95, 99, 102, 147, 247, 252], "append": [3, 8, 30, 31, 32, 33, 37, 49, 95, 243, 244, 245, 248, 249, 251], "regist": [3, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 99, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 241, 245], "manipul": [3, 4, 8, 85, 252], "keep": [3, 4, 7, 8, 14, 45, 82, 85, 102, 103, 109, 144, 203, 210, 243, 244, 245, 248, 251, 252], "mind": 3, "go": [3, 7, 86, 243, 244, 245, 247, 248, 249, 251, 252], "what": [3, 8, 34, 48, 51, 53, 54, 55, 95, 109, 238, 244, 245, 248, 249, 251, 252], "third_transform": 3, "would": [3, 48, 51, 53, 54, 55, 122, 241, 244, 245, 248, 252], "replac": [3, 6, 7, 73, 109], "unexpect": [3, 48, 51, 53, 54, 55, 99, 243, 252], "behviour": 3, "fortun": 3, "eras": [3, 48, 51, 53, 54, 55], "ident": [3, 13, 14, 16, 54, 55, 233, 234, 243, 244], "alreadi": [3, 8, 48, 51, 53, 54, 55, 148, 243, 244, 245], "place": [3, 13, 14, 16, 17, 25, 48, 49, 51, 53, 54, 55, 72, 85, 95, 99, 102, 103, 147, 207, 212, 213, 244, 245, 248], "chang": [3, 5, 7, 38, 39, 40, 45, 46, 48, 51, 53, 54, 55, 87, 98, 99, 103, 243, 245, 248, 249, 252], "happen": [3, 141, 244, 249, 252], "catfram": [3, 244], "hold": [3, 179, 180, 248], "about": [3, 5, 7, 18, 19, 20, 243, 244, 245, 248, 251, 252], "notic": [3, 245, 248], "loss": [3, 8, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 181, 182, 205, 210, 215, 220, 222, 223, 225, 226, 228, 231, 241, 243, 244, 248, 251], "parenthood": 3, "reason": [3, 4, 8, 48, 51, 53, 54, 55, 85, 243, 244, 245], "henc": [3, 86, 243, 245, 248], "composit": [3, 25, 48, 51, 53, 54, 55, 245, 248], "transform1": 3, "transform2": 3, "transform3": 3, "last_two": 3, "isinst": [3, 248], "log": [3, 4, 8, 116, 130, 135, 148, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 203, 204, 206, 210, 231, 241, 244, 245, 248, 251], "reveal": 4, "bug": [4, 251], "curv": 4, "won": [4, 48, 49, 51, 53, 54, 55, 85, 102, 210, 235, 243, 244, 245], "tell": [4, 7], "exploit": 4, "video": [4, 193, 206, 235, 244], "game": [4, 5], "cannot": [4, 7, 21, 25, 86, 244, 245, 248], "cv": 4, "act": 4, "flip": 4, "imag": [4, 7, 58, 71, 85, 97, 102, 122, 243, 244, 249, 252], "correspondingli": 4, "relat": [4, 10, 77, 244, 248], "prescript": 4, "tune": [4, 249], "coeffici": 4, "bonu": [4, 161, 171, 172], "beta": [4, 30, 32, 41, 170, 171, 243, 244, 251], "altern": [4, 26, 53, 159, 243, 244, 245], "reduc": [4, 6, 26, 244, 245], "downstream": [4, 243], "issu": [4, 5, 8, 86, 147, 148, 238, 251], "formul": 4, "ob": [4, 8, 25, 74, 82, 97, 109, 151, 182, 183, 184, 243, 244, 247, 248, 251, 252], "rate": [4, 103, 181, 243, 244, 245], "gradient": [4, 48, 51, 53, 54, 55, 99, 120, 126, 134, 135, 160, 174, 181, 182, 183, 184, 210, 243, 245, 248], "norm": [4, 8, 210, 244, 245, 248], "easier": [4, 243], "behavior": [4, 48, 51, 53, 54, 55, 99, 170, 245], "local": [4, 7, 10, 16, 48, 51, 53, 54, 55, 99, 198, 251], "optima": 4, "sens": [4, 248], "product": [4, 9, 233, 234], "sum": [4, 28, 29, 51, 167, 181, 243, 244, 245, 248, 252], "track": [4, 13, 14, 16, 17, 18, 19, 20, 45, 91, 103, 144, 198, 203, 243, 244, 248], "stat": [4, 82, 214, 235, 245], "w": [4, 71, 88, 97, 144, 193, 244], "r": [4, 82, 148, 159, 181, 244, 248, 252], "yield": [4, 16, 48, 51, 53, 54, 55], "insight": 4, "auxiliari": 4, "credit": 4, "assign": [4, 13, 14, 162, 163, 245], "futur": [4, 48, 51, 53, 54, 55, 85, 99, 102, 122, 238, 251], "past": [4, 244], "becom": [4, 243, 252], "between": [4, 5, 13, 14, 16, 17, 45, 48, 51, 53, 54, 55, 73, 81, 89, 97, 99, 105, 111, 122, 148, 167, 168, 171, 178, 182, 206, 210, 243, 244, 252], "spars": 4, "ineffici": 4, "interact": [4, 5, 7, 8, 13, 14, 16, 18, 19, 20, 148, 245, 248, 252], "ad": [4, 13, 14, 16, 30, 31, 32, 33, 37, 41, 48, 51, 53, 54, 55, 91, 99, 125, 126, 144, 161, 171, 172, 243, 252], "intermedi": [4, 249], "instrument": 4, "greatli": [4, 244], "soccer": 4, "kick": 4, "ball": 4, "likelihood": [4, 243], "discov": 4, "score": 4, "undesir": 4, "though": [4, 122, 245], "unintention": 4, "valuabl": 4, "idiosyncrat": 4, "zero": [4, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 70, 73, 82, 109, 110, 121, 143, 144, 157, 182, 183, 184, 251], "subtask": 4, "hierarch": [4, 251], "framework": [4, 9, 21, 52, 251, 252], "individu": [4, 18, 19, 20, 48, 51, 53, 54, 55, 243], "select": [4, 30, 31, 32, 33, 37, 69, 70, 72, 75, 76, 77, 78, 80, 81, 84, 86, 87, 91, 92, 94, 95, 96, 98, 101, 103, 110, 209, 243, 244], "fall": 4, "section": 4, "explicit": [4, 11, 121, 244], "mechan": [4, 48, 51, 53, 54, 55, 99, 248], "curios": 4, "magnitudin": 4, "domin": 4, "smaller": [4, 48, 51, 53, 54, 55, 170, 245], "addition": 4, "per": [4, 13, 14, 16, 17, 18, 19, 20, 54, 118, 210, 233, 234, 243, 244, 245, 251], "timestep": [4, 185, 186, 187, 188, 189, 190, 191, 244], "realli": 4, "larg": [4, 26, 245], "target": [4, 8, 48, 49, 51, 53, 54, 55, 98, 147, 148, 162, 163, 164, 165, 168, 169, 171, 173, 175, 176, 177, 181, 182, 183, 184, 213, 230, 231, 241, 243, 248], "huge": 4, "std": [4, 82, 103, 127, 141, 252], "torchrl": [4, 5, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 246, 247, 249, 250], "initi": [4, 7, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 82, 85, 95, 98, 99, 104, 110, 124, 125, 126, 141, 143, 144, 164, 171, 173, 175, 216, 219, 221, 224, 226, 229, 235, 244, 248, 252], "estim": [4, 138, 139, 140, 160, 161, 171, 172, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 243, 244, 245, 247, 248, 249, 251, 252], "encount": [4, 54, 55, 238, 244, 248], "unseen": 4, "extrins": 4, "wrong": 4, "goe": [4, 243, 244, 245, 252], "bonus": 4, "denser": 4, "prior": [4, 132, 167], "freshli": 4, "proper": [4, 6, 7, 244, 245], "doesn": [4, 11, 53], "drop": [4, 45, 109], "meant": [4, 52], "encourag": [4, 244], "measur": [4, 244, 245], "novelti": 4, "revisit": 4, "previous": [4, 245, 252], "diminish": 4, "decreas": 4, "ideal": [4, 82, 243, 248], "down": [4, 13, 14, 16, 17, 244], "gone": [4, 5], "anyth": 4, "try": [4, 7, 8, 156, 243, 244, 245, 248, 251, 252], "distil": 4, "add": [4, 6, 30, 31, 32, 33, 37, 43, 47, 48, 51, 53, 54, 55, 125, 160, 205, 243, 244, 245, 248, 251], "nois": [4, 104, 126, 136, 144, 173, 177, 206, 235, 243], "exploratori": [4, 161, 171, 172], "could": [4, 6, 243, 244, 245, 249, 252], "misalign": 4, "trade": 4, "unavoid": 4, "prioriti": [4, 30, 32, 33, 38, 39, 40, 41, 46, 162, 163, 164, 170, 173, 175, 177, 241, 243, 244], "schedul": [4, 7, 206, 245, 248], "separ": [4, 8, 13, 14, 17, 18, 20, 22, 85, 102, 162, 164, 170, 173, 175, 177, 243, 244, 252], "divers": [4, 54, 55], "bootstrap": [4, 244], "noisi": [4, 125, 126, 136], "unstabl": [4, 120, 134, 135], "inher": 4, "stochast": [4, 118, 126, 128, 132, 164, 170, 173, 175, 245], "enemi": 4, "variabl": [4, 7, 8, 26, 29, 124, 138, 139, 140, 173, 241], "pomdp": 4, "previou": [4, 10, 132, 243, 245, 248, 252], "loos": [4, 244, 245], "nonexist": 4, "sure": [4, 7, 46, 235, 243, 245, 248, 251, 252], "architectur": [4, 244], "sequenc": [4, 13, 14, 16, 17, 25, 27, 28, 30, 31, 43, 47, 68, 69, 70, 71, 73, 74, 77, 79, 82, 83, 86, 88, 89, 90, 91, 96, 97, 98, 103, 111, 116, 122, 130, 137, 145, 148, 149, 150, 151, 192, 193, 205, 207, 209, 210, 216, 224, 226, 229, 244, 245, 247, 252], "rather": [4, 87, 243, 244, 245], "last": [4, 13, 14, 16, 17, 22, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 45, 77, 82, 86, 96, 111, 121, 122, 128, 141, 143, 243, 244, 245, 248, 249, 251, 252], "lstm": [4, 121, 127], "explicitli": [4, 243], "rel": [4, 95, 116, 133], "tend": 4, "stabl": [4, 9, 10, 243], "don": [4, 6, 7, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 243, 244, 245, 251, 252], "compens": 4, "descent": [4, 126], "1000": [4, 103, 141, 143, 144, 148, 169, 243, 244, 245, 249], "know": [4, 141, 143, 173, 206, 243, 244, 245], "minimum": [4, 24, 89, 118, 127, 133, 134, 135, 145, 157, 159, 170, 175, 201, 243, 245, 248, 251, 252], "rang": [4, 8, 11, 26, 49, 103, 171, 177, 241, 243, 244, 245, 248, 251], "manual": [4, 18, 20], "deviat": [4, 82, 103, 110, 118, 124, 125, 126, 141, 172, 177, 243], "radic": 4, "begin": [4, 13, 14, 16, 18, 19, 20], "updat": [4, 8, 12, 13, 14, 16, 17, 18, 19, 20, 41, 48, 51, 52, 53, 54, 55, 73, 99, 101, 103, 110, 124, 144, 147, 148, 160, 169, 172, 176, 182, 183, 184, 206, 210, 212, 217, 218, 230, 231, 241, 243, 244, 245, 248, 251, 252], "stabil": [4, 78], "stage": [4, 248], "never": 4, "prevent": [4, 120, 134, 135, 171, 172, 208, 243], "solv": [4, 10, 238, 243, 244, 245, 248], "entir": [4, 244, 245, 248], "submit": [4, 238, 251], "suffici": [4, 243, 244], "recommend": [4, 7], "system": [4, 5, 245, 248], "adequ": [4, 105, 245], "infeas": 4, "allevi": 4, "prune": 4, "develop": [4, 7, 243, 251], "filter": [4, 243], "fire": [4, 48, 51, 53, 54, 55], "certain": [4, 18, 20, 48, 51, 53, 54, 55, 78, 94, 99, 171, 243, 244, 245, 252], "illeg": 4, "chess": 4, "combin": [4, 98, 244], "grasp": 4, "releas": [4, 7, 10, 48, 51, 53, 54, 55, 99, 251], "top": [4, 110, 124], "p": [4, 49], "wherein": 4, "cumul": [4, 91, 110, 245], "probabl": [4, 8, 116, 130, 135, 148, 244, 251], "q": [4, 112, 113, 114, 115, 117, 119, 153, 154, 162, 163, 164, 165, 169, 170, 173, 175, 177, 226, 229], "flow": [4, 243, 245, 248], "directli": [4, 8, 52, 235, 245, 248], "reparameter": [4, 116, 130], "soft": [4, 169, 175, 176], "actor": [4, 110, 112, 114, 118, 124, 138, 139, 140, 142, 143, 144, 145, 146, 153, 154, 160, 161, 162, 164, 166, 170, 171, 172, 173, 175, 177, 216, 219, 221, 224, 226, 229, 237, 243, 244, 245, 249, 251], "critic": [4, 8, 138, 160, 161, 171, 172, 174, 175, 245], "clip": [4, 89, 161, 177, 210, 245, 248], "oppos": 4, "incorrect": 4, "thought": 4, "bound": [4, 17, 24, 25, 48, 51, 53, 54, 55, 103, 131, 132, 144, 147, 148, 244, 245, 252], "region": 4, "squash": [4, 251], "tanh": [4, 111, 120, 122, 133, 134, 135, 243, 245, 248, 249, 251], "correct": [4, 213, 244, 245], "prob": [4, 130, 245], "rememb": 4, "remap": 4, "origin": [4, 8, 13, 14, 16, 17, 73, 85, 99, 102, 147, 148, 169, 172, 226, 229, 247, 248, 252], "side": [4, 252], "real": [5, 148, 248], "world": [5, 52, 152, 167, 248, 252], "robot": [5, 7, 85, 102], "adopt": [5, 243, 252], "histor": 5, "wa": [5, 7, 48, 51, 53, 54, 55, 99, 169, 176, 244, 245, 247, 251], "ceas": 5, "maintain": [5, 9, 248], "fork": 5, "gymnasium": [5, 11, 244, 245, 248, 251], "farama": [5, 245, 248], "foundat": [5, 245], "document": [5, 7, 18, 19, 48, 51, 53, 54, 55, 99, 251], "further": [5, 245], "detail": [5, 6, 7, 48, 51, 53, 54, 55, 99, 153, 160, 165, 172, 219, 238, 247], "usag": [5, 7, 37, 170, 175, 243, 244, 245, 247, 248, 249, 251, 252], "known": [5, 7, 8, 243, 244], "bc": [5, 251], "break": [5, 13, 14, 16, 48, 51, 53, 54, 55, 103, 243, 244, 251], "face": [5, 8, 9, 252], "modif": [5, 25, 48, 51, 53, 54, 55, 77, 243, 245, 248], "against": [5, 7, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 105, 147, 148, 245], "13": [5, 10, 11, 245, 248, 250], "howev": [5, 7, 48, 51, 53, 54, 55, 91, 94, 99, 243, 244, 245, 252], "construct": [5, 31, 48, 51, 53, 54, 55, 105, 132, 148, 210, 216, 224, 243, 245, 248, 252], "automat": [5, 48, 51, 53, 54, 55, 82, 137, 145, 243, 244, 245, 248, 251], "wrap": [5, 13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 105, 138, 139, 140, 152, 243, 244, 245, 252], "best": [5, 9, 244, 251], "gymwrapp": [5, 51, 237, 245, 251], "you": [5, 6, 7, 8, 10, 48, 51, 53, 54, 55, 103, 238, 243, 244, 245, 247, 249, 251, 252], "feel": [5, 238, 251], "free": [5, 7, 160, 167, 172, 241, 245, 251], "gladli": 5, "instruct": [6, 7, 10, 21, 37, 73, 244, 245], "prepar": [6, 245], "conda": [6, 7, 238], "assum": [6, 25, 29, 33, 37, 51, 54, 55, 71, 77, 85, 86, 91, 95, 102, 121, 170, 175, 187, 188, 190, 191, 193, 243, 244, 245, 247, 248], "let": [6, 7, 48, 51, 53, 54, 55, 206, 243, 244, 245, 247, 248, 249, 251, 252], "7": [6, 10, 26, 29, 110, 111, 121, 122, 124, 243, 245, 248, 249, 250, 251], "cmake": 6, "14": [6, 11, 82, 245, 248, 249], "activ": [6, 7, 9, 111, 118, 122, 172, 251], "sim": 6, "bullet": 6, "physic": [6, 7, 241, 243, 248], "headless": [6, 7], "cluster": [6, 7, 8, 18, 238], "withbullet": 6, "forg": [6, 7], "aihabitat": 6, "nightli": 6, "y": [6, 7, 121, 156, 245], "git": [6, 7, 10], "facebookresearch": 6, "subdirectori": 6, "verbos": 6, "export": [6, 7], "magnum_log": 6, "quiet": 6, "habitat_sim_log": 6, "remov": [6, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 93, 252], "command": [6, 7, 10, 243, 245, 248, 252], "readm": [6, 7], "md": [6, 7], "habitatenv": [6, 237], "_has_habitat": 6, "_env": [6, 252], "available_env": [6, 56, 57, 58, 59, 60, 61, 63, 64, 252], "startswith": 6, "oserror": 6, "load": [6, 7, 13, 14, 16, 17, 30, 31, 32, 37, 59, 235, 241], "libllvmlit": 6, "solut": [6, 7, 9, 238, 241, 251], "ionstal": 6, "path": [6, 7, 38, 48, 51, 53, 54, 55, 85, 102, 124, 210, 241], "env_nam": [6, 53, 56, 58, 60, 63, 243, 245, 252], "llvmlite": 6, "config": [6, 7, 85, 102, 214, 216, 217, 218, 219, 221, 224, 226, 227, 229, 232], "var": [6, 7, 48, 51, 53, 54, 55, 99], "ld_preload": [6, 7], "python3": [6, 7, 10, 251], "8": [6, 7, 41, 57, 111, 112, 113, 119, 122, 138, 139, 140, 145, 147, 150, 170, 244, 245, 248, 249, 250, 251], "site": [6, 7], "bind": 6, "deactiv": [6, 7], "importerror": [6, 7, 10], "usr": [6, 7, 10, 251], "x86_64": [6, 7], "linux": [6, 7], "gnu": [6, 7], "libopengl": [6, 7], "undefin": [6, 7, 10, 48, 51, 53, 54, 55, 99], "symbol": [6, 7, 10], "_glapi_tls_curr": [6, 7], "mujoco": [6, 8, 177, 238, 245], "debug": [6, 8, 238, 252], "link": [6, 7], "right": [6, 7, 121, 243, 244, 245, 248, 252], "mujoco_env": [6, 7], "libglvnd": [6, 7], "glx": [6, 7], "cos7": [6, 7], "reinstal": [6, 7], "xvfbwrapper": [6, 7], "sysroot": [6, 7], "lib64": [6, 7], "libgldispatch": [6, 7], "offici": [7, 37], "stand": [7, 138, 139, 140, 247, 248, 252], "joint": [7, 244], "dynam": [7, 170, 245, 248], "contact": 7, "engin": [7, 248], "facilit": [7, 84, 85, 102, 138, 139, 140, 243, 248], "biomechan": 7, "graphic": 7, "anim": 7, "area": 7, "demand": [7, 252], "fast": [7, 9, 57, 87, 173, 243, 244, 245], "accur": [7, 37, 243, 248], "articul": 7, "acquir": [7, 243, 245], "deepmind": [7, 8, 9, 58, 59, 245], "access": [7, 8, 48, 51, 53, 54, 55, 85, 235, 238, 248], "whomev": 7, "licenc": 7, "incorpor": [7, 243, 248], "relianc": 7, "obsolet": 7, "seri": [7, 8, 29, 43, 47, 55, 81, 98, 193, 244, 245, 252], "legaci": 7, "pro": [7, 238], "tip": [7, 238], "glfw": 7, "osmesa": 7, "egl": 7, "hand": [7, 243, 248], "advic": [7, 252], "sudo": [7, 238], "enabl": [7, 8, 37, 144, 206, 245, 248], "apt": 7, "libglfw3": 7, "libglew2": 7, "libgl1": 7, "mesa": 7, "libosmesa6": 7, "awar": [7, 38, 39, 40, 46], "fact": [7, 8, 244, 245, 248, 249, 252], "indent": 7, "workflow": [7, 138, 139, 140], "glew": 7, "mesalib": 7, "anaconda": 7, "libgl": 7, "cos6": 7, "menpo": 7, "glfw3": 7, "both": [7, 48, 49, 51, 53, 54, 55, 87, 99, 111, 122, 138, 139, 140, 206, 243, 245, 248, 249, 252], "mujoco_gl": 7, "pyopengl_platform": 7, "pre": [7, 21, 39, 48, 51, 53, 54, 55, 85, 102, 252], "binari": [7, 23, 29, 68, 153, 154], "setup": [7, 243], "mkdir": 7, "cd": 7, "tag": [7, 193, 198, 235], "earlier": [7, 243, 245], "roboti": 7, "u": [7, 10, 243, 245, 248, 249, 251, 252], "download": [7, 10, 85, 102, 243, 244, 245, 246, 247, 248, 249, 251, 252], "html": [7, 53, 244], "wget": 7, "mujoco210": 7, "tar": 7, "gz": 7, "xf": 7, "charg": 7, "obtain": [7, 51, 85, 102, 110, 207, 243, 244, 245], "mjkei": 7, "txt": 7, "mjlib_path": 7, "home": [7, 249], "bin": 7, "libmujoco210": 7, "ld_library_path": 7, "mujoco_py_mujoco_path": 7, "mujoco_py_mjkey_path": 7, "reload": 7, "hard": [7, 169, 244, 252], "later": [7, 115, 148, 243, 245], "modifi": [7, 8, 48, 51, 53, 54, 55, 72, 77, 85, 95, 98, 99, 102, 144, 147, 213, 216, 224, 226, 229, 243, 244, 245], "nvidia": 7, "older": [7, 11], "hack": 7, "line": [7, 48, 51, 53, 54, 55, 243, 244, 251], "adatp": 7, "script": [7, 105, 216, 219, 221, 224, 226, 229, 231, 235, 241, 243, 244, 245, 247, 248, 249, 251, 252], "unnot": [7, 86], "until": [7, 245], "complet": [7, 9, 45, 51, 238, 244, 245, 247], "mujoco_pi": 7, "trigger": 7, "pipelin": [7, 245], "problem": [7, 8, 16, 244, 245, 248, 252], "troubleshoot": 7, "gl": 7, "h": [7, 71, 88, 97, 124, 193, 244], "eglshim": 7, "10": [7, 21, 25, 49, 52, 65, 66, 97, 110, 121, 124, 143, 144, 164, 173, 174, 175, 177, 182, 183, 184, 201, 241, 243, 244, 245, 248, 250, 251, 252], "fatal": 7, "No": 7, "directori": [7, 38, 198, 241], "glu": 7, "38": [7, 245, 248, 249], "disappear": [7, 244, 247], "libstdc": 7, "6": [7, 13, 14, 16, 17, 64, 82, 111, 116, 121, 122, 133, 151, 216, 219, 221, 224, 226, 229, 244, 245, 248, 249, 250, 251, 252], "glibcxx_3": 7, "29": [7, 245, 248], "compil": 7, "libosmesa": 7, "libgcc": 7, "Then": [7, 243, 245, 247], "filenotfounderror": 7, "errno": 7, "patchelf": 7, "fatalerror": 7, "gladloadgl": 7, "mj_env": 7, "__init__": [7, 52, 110, 124, 151, 153, 156, 241, 243, 244, 248, 252], "912": 7, "glfwerror": 7, "65537": 7, "sovl": 7, "myscript": 7, "cymj": 7, "linuxgpuextensionbuild": 7, "filenam": 7, "runtimeerror": [7, 8, 48, 51, 53, 54, 55, 99, 252], "job": [7, 18, 19, 20, 21], "slurm": 7, "mjrendercontext": 7, "pyx": 7, "46": [7, 245, 248], "114": [7, 248], "_setup_opengl_context": 7, "opengl_context": 7, "130": [7, 248], "offscreenopenglcontext": 7, "fail": [7, 105], "opengl": 7, "global": [7, 48, 51, 53, 54, 55, 148, 241, 243], "cuda_visible_devic": 7, "id": [7, 22, 144, 173, 196, 226], "slurm_step_gpu": 7, "enviro": [7, 10], "black": 7, "read": [7, 17, 22, 38, 39, 40, 46, 51, 69, 70, 72, 73, 75, 76, 77, 78, 80, 84, 86, 87, 91, 92, 94, 95, 96, 98, 101, 103, 130, 138, 139, 140, 147, 148, 150, 152, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 193, 210, 216, 224, 226, 229, 243, 244, 245, 247, 248, 249, 252], "onscreen": 7, "101": [7, 248], "displai": [7, 210, 241, 244, 248], "correctli": [7, 48, 51, 53, 54, 55], "loop": [8, 13, 14, 16, 17, 51, 109, 210, 241, 243, 247], "sketch": [8, 241], "_": [8, 49, 70, 73, 74, 82, 87, 97, 103, 147, 159, 182, 183, 184, 243, 244, 245, 248, 251], "n_training_step": 8, "datapoint": 8, "onlin": [8, 13, 17, 160, 172, 201, 235, 245], "n_data_per_train": 8, "no_grad": [8, 48, 51, 53, 54, 55, 243, 244, 245], "replay_buff": [8, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 207, 231, 243, 244, 245], "extend": [8, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 47, 207, 241, 243, 244, 245, 249, 251], "loss_fn": [8, 251], "backward": [8, 48, 51, 53, 54, 55, 103, 243, 244, 245, 248], "zero_grad": [8, 48, 51, 53, 54, 55, 241, 243, 244, 245, 248], "backpropag": [8, 160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 248], "decor": [8, 11], "differenti": [8, 182, 183, 184, 243, 248], "understand": [8, 243, 244], "denomin": 8, "artifact": 8, "numer": [8, 103, 120, 134, 135, 147, 148, 208, 245, 252], "misconcept": 8, "save": [8, 48, 51, 53, 54, 55, 192, 210, 241, 244], "freed": 8, "appear": [8, 29, 248], "compuat": 8, "twice": [8, 170, 175], "fix": [8, 95, 175, 248, 252], "retain_graph": 8, "discuss": [8, 9], "inplac": [8, 48, 51, 53, 54, 55, 243, 244], "accumul": 8, "onto": [8, 29, 141, 143, 147, 148, 244, 248], "exclud": [8, 37, 75, 109, 243], "forward": [8, 48, 51, 53, 54, 55, 69, 70, 72, 73, 75, 76, 77, 78, 80, 82, 84, 85, 86, 87, 91, 92, 94, 95, 96, 98, 101, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 123, 125, 127, 128, 129, 131, 132, 141, 143, 144, 147, 148, 151, 153, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 182, 183, 184, 243, 244, 248, 251], "submodul": [8, 48, 51, 53, 54, 55], "param": [8, 48, 51, 52, 53, 54, 55, 87, 98, 116, 133, 145, 146, 147, 150, 151, 153, 154, 176, 180, 182, 183, 184, 219, 243, 244, 248, 249, 251], "grad": [8, 48, 51, 53, 54, 55, 244, 245], "whose": [8, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 127, 147, 243], "strictli": [8, 48, 51, 53, 54, 55, 99, 243, 245], "neg": [8, 13, 14, 16, 17, 18, 19, 20, 30, 32, 41, 69, 77, 86, 100, 166, 243, 245, 248], "ask": [8, 243, 245, 249, 252], "core": [8, 216, 219, 221, 224, 226, 229, 241, 251], "much": [8, 30, 32, 41, 171, 172, 244, 245, 248, 252], "render": [8, 206, 243, 244, 245], "upon": [8, 248], "factor": [8, 120, 126, 134, 135, 144, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 177, 243, 244, 252], "fit": [8, 11, 82, 241], "everi": [8, 17, 25, 29, 46, 48, 51, 53, 54, 55, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 210, 241, 243, 244, 245, 248], "bottlneck": 8, "affect": [8, 48, 51, 53, 54, 55, 98, 99, 105], "brax": [8, 56, 57, 87, 252], "jax": [8, 11], "improperli": 8, "item": [8, 13, 25, 76, 162, 163, 201, 241, 243, 244, 245, 248], "underli": [8, 248], "tedeiou": 8, "priorit": [8, 30, 32, 41, 162, 163, 164, 170, 173, 175, 177, 243, 244], "amount": [8, 144, 244], "isn": [8, 147], "contigu": [8, 245, 248, 251, 252], "costli": [8, 248], "concaten": [8, 27, 28, 69, 70, 82, 98, 122, 150, 243, 244, 248, 252], "constitut": [8, 244, 248], "plain": 8, "profil": 8, "indic": [8, 11, 13, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 43, 45, 47, 48, 51, 53, 54, 55, 70, 94, 95, 111, 122, 144, 157, 214, 235, 238, 241, 243, 245, 248, 252], "fulli": [8, 48, 51, 53, 54, 55, 244, 248], "frequent": 8, "techniqu": [8, 244], "program": [8, 170, 252], "functorch": [8, 10, 147, 150, 244, 251], "incl": 8, "suit": [8, 59, 245, 252], "mujoco_instal": 8, "valueerror": [8, 244], "bad": 8, "fds_to_keep": 8, "view": [8, 26, 29, 48, 51, 53, 54, 55, 122, 153, 243, 244, 248, 251, 252], "expand": [8, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 147, 150, 243, 248, 251], "new_shap": 8, "content": [8, 13, 14, 16, 31, 45, 53, 111, 122, 244, 245, 248, 251], "lost": 8, "permut": [8, 45, 251, 252], "spin": [9, 252], "deep": [9, 69, 112, 113, 114, 115, 117, 144, 160, 169, 175, 176, 219, 243], "hug": 9, "syllabu": 9, "lectur": 9, "awesom": 9, "curat": 9, "succinct": 9, "summari": [9, 82, 103, 243, 244, 245], "reddit": 9, "reagent": 9, "orient": [9, 252], "baselines3": 9, "tf": 9, "agent": [9, 126, 248], "bandit": 9, "tensorflow": 9, "kera": 9, "acm": 9, "dopamin": 9, "prototyp": 9, "salina": 9, "simpl": [9, 29, 48, 51, 53, 54, 55, 112, 148, 174, 182, 243, 244, 245, 252], "sequenti": [9, 48, 51, 53, 54, 55, 149, 150, 245, 248, 249, 252], "tianshou": 9, "eleg": 9, "rlpyt": 9, "rllib": 9, "industri": [9, 251], "grade": 9, "factori": 9, "throughput": [9, 243], "cherri": 9, "jaxrl": 9, "space": [9, 29, 34, 73, 129, 141, 143, 144, 147, 148, 150, 153, 154, 243, 244, 245, 248, 251, 252], "mbrl": [9, 52], "rlmeta": 9, "light": 9, "elegantrl": 9, "cloud": 9, "mtrl": 9, "baselin": 9, "689": 10, "dist": [10, 251], "_torchrl": 10, "_zn8pybind116detail11type_casterin2at6tensoreve4loadens_6handleeb": 10, "colab": [10, 245], "notebook": [10, 243, 244, 245, 246, 247, 248, 249, 251, 252], "24": [10, 245, 248, 249], "11": [10, 26, 29, 49, 97, 110, 124, 245, 248, 249], "2022": [10, 251], "12": [10, 245, 248], "pip": [10, 251, 252], "pip3": [10, 245], "extra": [10, 48, 51, 53, 54, 55, 103, 109, 244, 245], "url": 10, "org": [10, 30, 41, 69, 85, 112, 113, 114, 115, 118, 119, 124, 126, 128, 129, 131, 132, 144, 153, 160, 165, 166, 167, 168, 169, 170, 172, 174, 175, 176, 182, 185, 186, 189, 216, 219, 224, 229, 243, 244, 249], "whl": 10, "There": [10, 241, 244, 245, 248, 252], "upgrad": 10, "relas": 10, "lib_version_her": 10, "module_nam": 11, "str": [11, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 41, 48, 50, 51, 53, 54, 55, 58, 68, 69, 70, 71, 72, 73, 74, 75, 77, 79, 80, 82, 83, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98, 99, 102, 103, 106, 108, 110, 111, 112, 113, 114, 115, 119, 121, 122, 123, 124, 125, 126, 127, 137, 141, 142, 143, 144, 145, 147, 148, 151, 153, 154, 155, 159, 160, 161, 162, 163, 164, 165, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 192, 193, 194, 195, 196, 197, 198, 199, 200, 204, 205, 206, 207, 208, 209, 214, 216, 219, 224, 226, 227, 229, 235, 245], "from_vers": 11, "to_vers": 11, "intersect": 11, "eg": [11, 38, 39, 40, 46, 73], "v": [11, 103, 121, 170, 175, 244, 251], "longer": [11, 244], "fun": [11, 245], "self": [11, 48, 51, 52, 53, 54, 55, 72, 85, 95, 99, 102, 110, 124, 141, 143, 147, 151, 153, 156, 241, 248, 251], "x": [11, 22, 25, 97, 111, 117, 119, 121, 122, 124, 153, 156, 157, 159, 185, 186, 187, 188, 189, 190, 191, 193, 210, 244, 245, 248, 251], "27": [11, 245, 248], "arg": [12, 14, 25, 33, 38, 39, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 93, 99, 100, 101, 102, 111, 122, 137, 138, 142, 146, 200, 203, 207, 210, 235, 243, 244, 251], "kwd": 12, "policy_weight": [12, 13, 14, 16, 17, 19, 20], "tensordictbas": [12, 13, 14, 16, 17, 18, 19, 20, 22, 25, 32, 33, 37, 48, 50, 51, 53, 54, 55, 69, 70, 72, 75, 76, 77, 80, 81, 84, 86, 87, 91, 92, 94, 95, 96, 98, 101, 103, 109, 110, 123, 124, 141, 143, 144, 147, 148, 160, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 210, 248], "udpdat": [12, 13, 14, 16, 17, 19, 20], "create_env_fn": [13, 14, 16, 17, 18, 19, 20, 49, 54, 55, 243, 251], "callabl": [13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 48, 49, 51, 52, 53, 54, 55, 159, 217, 218, 233, 234, 235], "int": [13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 46, 47, 48, 51, 52, 53, 54, 55, 58, 69, 70, 71, 72, 73, 77, 78, 81, 82, 85, 86, 88, 93, 94, 96, 99, 100, 102, 105, 110, 111, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133, 134, 141, 143, 144, 146, 147, 148, 153, 154, 160, 161, 162, 164, 166, 167, 168, 170, 171, 172, 173, 175, 177, 192, 193, 201, 202, 203, 206, 207, 210, 212, 216, 219, 224, 226, 227, 229, 233, 234, 235, 248], "200": [13, 14, 16, 17, 48, 51, 53, 54, 55, 65, 66, 112, 113, 118, 131, 132, 248], "total_fram": [13, 14, 16, 17, 18, 19, 20, 210, 213, 231, 241, 243, 244, 245, 251], "create_env_kwarg": [13, 14, 16, 17, 49, 53, 54, 55, 243], "dict": [13, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 48, 49, 51, 53, 54, 55, 95, 99, 103, 111, 112, 113, 114, 115, 119, 121, 122, 148, 197, 198, 206, 217, 218, 219, 226, 229, 233, 234, 235, 245, 252], "postproc": [13, 14, 16, 17, 18, 19, 20, 243, 244], "preemptive_threshold": [13, 14], "float": [13, 14, 24, 26, 29, 30, 32, 35, 41, 48, 51, 53, 54, 55, 72, 74, 82, 85, 89, 90, 95, 97, 99, 102, 103, 116, 118, 120, 124, 125, 126, 131, 132, 133, 135, 141, 143, 144, 147, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 208, 243, 244, 252], "given": [13, 14, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 52, 53, 54, 55, 72, 73, 82, 85, 95, 99, 102, 109, 110, 118, 124, 144, 147, 148, 149, 150, 153, 154, 159, 162, 163, 181, 182, 183, 184, 202, 206, 231, 241, 243, 244, 245, 248, 252], "datacollector": [13, 14, 16, 17, 148, 245], "recept": 13, "safe": [13, 14, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 141, 144, 147, 148, 155, 243, 251], "env_mak": [13, 14, 16, 231, 252], "lambda": [13, 14, 16, 17, 21, 49, 166, 168, 184, 187, 188, 190, 191, 231, 251, 252], "50": [13, 14, 16, 245, 248], "linear": [13, 14, 16, 48, 51, 52, 53, 54, 55, 72, 85, 95, 99, 102, 110, 111, 122, 124, 125, 126, 127, 131, 132, 137, 138, 139, 140, 143, 144, 145, 146, 147, 150, 151, 153, 154, 156, 182, 183, 184, 231, 243, 244, 247, 249, 251], "2000": [13, 14, 16, 245], "enumer": [13, 14, 16, 48, 51, 53, 54, 55, 243, 244, 245, 251], "step_count": [13, 14, 16, 94, 244, 245, 251], "int64": [13, 14, 16, 23, 26, 27, 28, 29, 142, 144, 146, 153, 154, 221, 244, 245, 248, 251, 252], "shutdown": [13, 14, 16, 17, 243, 244, 251], "del": [13, 14, 16, 243, 244, 245, 247, 251, 252], "randompolici": [13, 14, 16, 18, 19, 20, 21, 237], "total": [13, 14, 16, 17, 18, 19, 20, 23, 27, 28, 29, 51, 161, 171, 172, 201, 203, 206, 210, 213, 214, 243, 244, 245, 247, 248, 249, 250, 251, 252], "lifespan": [13, 14, 16, 18, 19, 20], "divis": [13, 14, 16, 18, 19, 20, 244], "endless": [13, 14, 16, 18, 19, 20], "accommod": [13, 14, 16, 17], "kept": [13, 14, 16, 17, 45, 54, 55, 73, 98, 105, 109, 120, 134, 135], "long": [13, 14, 16, 17, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 73, 244], "dictionari": [13, 14, 16, 17, 18, 19, 20, 25, 48, 51, 53, 54, 55, 95, 99, 148, 233, 234, 235, 241, 243, 245, 248, 252], "span": [13, 14, 16, 17, 18, 19, 20], "unless": [13, 14, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 45, 48, 51, 53, 54, 55, 245], "n_step": [13, 14, 16, 17, 18, 19, 20, 144, 243, 245], "independ": [13, 14, 16, 17, 18, 19, 20, 98, 100, 170, 175, 241, 243, 244, 251], "ignor": [13, 14, 16, 17, 18, 19, 20, 48, 51, 53, 54, 55, 73, 75, 92, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 252], "mainli": [13, 14, 16, 17, 18, 19, 20, 248], "post": [13, 14, 16, 18, 19, 20, 48, 51, 53, 54, 55, 243, 244], "multistep": [13, 14, 16, 18, 19, 20, 243, 244], "accord": [13, 14, 16, 17, 18, 19, 20, 82, 90, 120, 125, 131, 134, 135, 248], "return_same_td": [13, 14, 16], "cautious": [13, 14, 16, 172], "whole": [13, 14, 16, 25, 48, 51, 53, 54, 55, 99, 201, 244, 245], "boolm": [13, 14], "update_policy_weight_": [13, 14], "sync": [13, 14, 18, 19, 20, 212, 231, 241, 243, 251], "async": [13, 14, 18, 19, 20, 243, 251], "ratio": [13, 14, 245], "finish": [13, 14], "rest": [13, 14, 245, 251], "earli": [13, 14, 243, 251], "load_state_dict": [13, 14, 16, 17, 48, 51, 53, 54, 55, 99, 103, 241, 243], "state_dict": [13, 14, 16, 17, 48, 51, 53, 54, 55, 99, 103, 235, 241, 243, 244, 252], "ordereddict": [13, 14, 16, 17, 48, 51, 53, 54, 55, 99, 103, 244], "form": [13, 14, 17, 30, 31, 32, 37, 48, 51, 53, 54, 55, 103, 159, 161, 171, 172, 210], "worker0": [13, 14, 17], "state_dict0": [13, 14, 17], "worker1": [13, 14, 17], "state_dict1": [13, 14, 17], "reset_idx": [13, 14, 17], "static_se": [13, 14, 16, 17, 48, 51, 53, 54, 55, 99], "integ": [13, 14, 16, 17, 22, 27, 28, 29, 36, 46, 48, 51, 53, 54, 55, 78, 82, 94, 111, 122], "increment": [13, 14, 16, 17, 48, 51, 53, 54, 55, 94, 171], "env_fn": [13, 14, 16, 17, 49, 233, 234], "v0": [13, 14, 17, 51, 60, 61, 63, 64, 72, 99, 103, 231], "env_fn_parallel": [13, 14, 16, 17], "out_se": [13, 14, 16, 17, 252], "shut": [13, 14, 16, 17, 244], "irrevers": [13, 14, 17], "kwarg": [14, 16, 17, 25, 37, 38, 39, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 85, 93, 95, 99, 100, 101, 102, 111, 112, 113, 114, 115, 119, 120, 122, 123, 130, 133, 135, 137, 138, 142, 145, 146, 148, 161, 171, 181, 193, 197, 198, 200, 203, 210, 216, 217, 218, 219, 224, 226, 229, 232, 233, 234, 243, 244, 245, 251], "envcreat": [16, 21, 231, 232, 235, 237, 243, 244, 251, 252], "interrupt": 16, "_interruptor": 16, "outsid": 16, "start_collect": 16, "stop_collect": 16, "preeptiv": 16, "stop": [16, 48, 51, 53, 54, 55, 245, 251, 252], "chunk": 16, "policy_state_dict": 16, "env_state_dict": 16, "close": [16, 17, 51, 53, 161, 171, 172, 243, 247, 248, 251], "pin_memori": [17, 30, 31, 32, 37, 54, 55, 84, 243, 251], "paradigm": 17, "regular": [17, 147, 148, 154, 165, 212, 241, 243, 252], "prefer": [17, 20, 86, 92, 245], "mere": 17, "greater": [17, 243, 244, 251], "signal": [17, 37, 94, 243, 245], "sent": [17, 38, 39, 103], "server": 17, "length": [17, 20, 23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 54, 55, 86, 110, 111, 112, 114, 117, 122, 124, 147, 201, 207, 243, 244, 245, 248, 252], "postprocessor": 17, "format": [17, 28, 29, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 244, 252], "collector_class": [18, 19, 20], "collector_kwarg": [18, 19, 20], "num_workers_per_collector": [18, 19, 20], "slurm_kwarg": [18, 19, 20], "update_after_each_batch": [18, 20], "max_weight_update_interv": [18, 19, 20], "tcp_port": [18, 19, 20, 21], "deriv": [18, 19, 20, 210], "string": [18, 19, 20, 48, 51, 53, 54, 55, 85, 102, 148, 159, 192, 209, 216, 224, 226, 229, 245], "respect": [18, 19, 20, 48, 51, 53, 54, 55, 68, 72, 85, 86, 95, 99, 102, 132, 147, 151, 205, 245], "copi": [18, 19, 20, 48, 51, 53, 54, 55, 87, 99, 109, 243, 244], "subnod": [18, 19, 20], "readi": [18, 20, 238, 245, 247], "serv": [18, 20, 62, 252], "fashion": [18, 20], "executor": [18, 19, 20], "distributed_back": [18, 19], "ucc": [18, 19], "overwritten": [18, 20, 48, 51, 53, 54, 55, 77], "seen": [18, 20, 244], "turn": [18, 20, 79, 100, 206, 243, 244, 248, 249], "mp": [18, 19, 20, 49, 103], "submitit_delai": [18, 21], "former": [18, 19, 20, 37, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157], "whilst": [18, 19, 20], "latter": [18, 19, 20, 37, 48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 233, 234], "homonym": [18, 19, 20, 248], "visit": [18, 19, 20], "facebookincub": [18, 19, 20], "tcp": [18, 19, 20, 21], "port": [18, 19, 20, 21], "10003": [18, 19, 20, 21], "worker_rank": [18, 19], "update_interv": 19, "frequenc": [19, 243], "visible_devic": 20, "tensorpipe_opt": 20, "experiment": [20, 29, 148], "union": [20, 51, 111, 164, 173], "tensorpiperpcbackendopt": 20, "num_job": 21, "tcpport": 21, "submitit_main_conf": 21, "slurm_cpus_per_task": 21, "32": [21, 25, 65, 66, 111, 112, 113, 119, 122, 128, 129, 243, 244, 245, 248, 249, 251, 252], "slurm_gpus_per_nod": 21, "slurm_partit": 21, "timeout_min": 21, "submitit_collection_conf": 21, "delai": 21, "jump": 21, "host": [21, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "wherea": [21, 73, 241, 243], "default_config": 21, "default_slurm_conf_main": 21, "default_slurm_conf": 21, "boundedtensorspec": [21, 25, 138, 139, 140, 143, 144, 145, 237, 245, 248, 251, 252], "__name__": [21, 49, 244], "__main__": [21, 49], "rollout_tensordict": 22, "prefix": [22, 48, 51, 53, 54, 55, 99, 192, 252], "max": [22, 29, 32, 41, 73, 96, 133, 134, 135, 161, 164, 173, 175, 243, 245], "durat": [22, 244], "tupl": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 48, 51, 53, 54, 55, 82, 87, 112, 121, 122, 127, 162, 166, 182, 183, 184, 204, 208, 220, 222, 225, 228], "meta": [22, 34, 37, 50, 241, 245], "aren": 22, "discret": [23, 26, 27, 28, 29, 36, 73, 130, 153, 154, 164, 165, 244, 252], "5": [23, 49, 53, 64, 65, 66, 110, 111, 118, 120, 121, 122, 124, 134, 135, 142, 146, 153, 154, 170, 171, 177, 243, 244, 248, 249, 250, 251, 252], "assert_is_in": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "belong": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "otherwis": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 37, 48, 51, 53, 54, 55, 73, 82, 95, 99, 103, 120, 134, 135, 167, 175, 206, 207, 241, 243, 244, 245, 248, 252], "encod": [23, 24, 25, 26, 27, 28, 29, 31, 34, 35, 36, 73, 129, 130, 131, 142, 146, 153, 154, 159, 244, 245, 248], "val": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 244, 251], "ndarrai": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 51, 144], "np": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 51, 243, 248], "compli": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "current": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 48, 51, 53, 54, 55, 62, 86, 99, 106, 109, 118, 121, 132, 144, 153, 154, 196, 216, 224, 241, 244, 245, 248, 251, 252], "least": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "complient": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "singleton": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 111, 122], "classmethod": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "implements_for_spec": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "torch_funct": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "overrid": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 235], "tensor_to_index": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "is_in": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 252], "project": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 73, 141, 143, 144, 147, 148, 244, 251, 252], "back": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 147, 148, 243, 245, 248], "rand": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 52, 57, 64, 110, 124, 248, 251, 252], "uniform": [23, 24, 25, 26, 27, 28, 29, 30, 32, 34, 35, 36, 41], "unbound": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 95, 248], "squeez": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 93, 111, 244, 248, 251], "dim": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 69, 70, 95, 100, 121, 235, 244, 248], "to_numpi": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "transformed_in": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 98, 99, 127, 133, 235], "to_one_hot": [23, 26, 27], "hot": [23, 26, 27, 28, 29, 73, 130, 142, 146, 153, 154, 244], "to_one_hot_spec": [23, 26, 27], "onehotdiscretetensorspec": [23, 26, 142, 146, 153, 154, 237], "convert": [23, 26, 27, 28, 29, 48, 51, 53, 54, 55, 72, 74, 85, 95, 99, 102, 103, 147, 159, 244, 245, 248], "type_check": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36], "fill": [23, 24, 25, 26, 27, 28, 29, 34, 35, 36, 95, 248, 249], "upper": 24, "unnam": 25, "effect": [25, 48, 51, 53, 54, 55, 91, 99, 210, 244, 252], "pixels_spec": 25, "observation_vector_spec": 25, "33": [25, 48, 51, 53, 54, 55, 111, 122, 245, 248], "composite_spec": 25, "observation_vector": [25, 70, 216, 219, 224, 226, 229, 243], "td": [25, 56, 57, 58, 59, 60, 61, 63, 64, 70, 73, 74, 80, 82, 97, 99, 103, 109, 110, 123, 124, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 150, 151, 153, 154, 183, 184, 187, 188, 190, 191, 192, 201, 209, 216, 219, 221, 224, 226, 229, 248, 251, 252], "within": [25, 33, 48, 51, 53, 54, 55, 103, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 248, 251], "randn": [25, 82, 121, 127, 137, 138, 139, 140, 142, 145, 146, 147, 150, 151, 153, 154, 182, 183, 184, 209, 251, 252], "td_project": 25, "include_nest": 25, "leaves_onli": 25, "itemsview": 25, "immedi": [25, 48, 51, 53, 54, 55, 181], "children": [25, 48, 51, 53, 54, 55], "keysview": 25, "reflect": [25, 109, 213, 245], "selected_kei": [25, 92, 243], "valuesview": 25, "onehottensorspec": 26, "categor": [26, 28, 29, 130, 153, 154], "action_valu": [26, 29, 142, 146, 153, 154, 221, 244], "arang": [26, 29, 142, 153, 201], "argmax": [26, 142, 146, 153, 154], "chosen_action_valu": [26, 29, 146, 221, 244], "outcom": [26, 29, 116, 133], "nvec": [27, 28], "cardin": [27, 28, 153, 154, 245], "ax": [27, 125, 126], "multionehotdiscretetensorspec": [27, 237], "use_regist": [28, 29], "to_categor": [28, 29], "to_categorical_spec": [28, 29], "multidiscretetensorspec": [28, 237], "unidimension": 29, "keepdim": 29, "user_regist": 29, "priori": 29, "definit": [29, 46], "uniqu": 29, "discretebox": [29, 252], "discretetensorspec": [29, 237, 252], "alpha": [30, 32, 41, 111, 164, 173, 175, 243, 244, 251], "ep": [30, 32, 41, 103, 144, 161, 176, 208], "1e": [30, 32, 41, 103, 116, 118, 127, 133, 245], "08": [30, 32, 41, 245, 248], "collate_fn": [30, 31, 32, 37, 251], "prefetch": [30, 31, 32, 37, 243, 244], "schaul": [30, 41], "quan": [30, 41], "j": [30, 41, 48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 241, 244], "antonogl": [30, 41], "silver": [30, 41], "2015": [30, 41], "arxiv": [30, 41, 69, 85, 112, 113, 114, 115, 118, 119, 124, 126, 128, 129, 131, 132, 144, 153, 160, 165, 166, 167, 168, 169, 170, 172, 175, 176, 182, 185, 186, 189, 216, 219, 224, 229, 243, 249], "ab": [30, 41, 85, 103, 118, 119, 124, 126, 128, 129, 131, 132, 160, 166, 167, 168, 169, 170, 172, 175, 216, 224, 243, 249], "1511": [30, 41, 119], "05952": [30, 41], "expon": [30, 32, 41], "\u03b1": [30, 32, 41], "determin": [30, 32, 37, 41, 85, 102, 144, 244], "delta": [30, 32, 41, 133, 148, 237], "ensur": [30, 32, 41, 45, 48, 51, 53, 54, 55, 69, 85, 103, 155, 243, 244, 245, 248], "null": [30, 32, 41, 68, 243], "doubl": [30, 32, 35, 48, 51, 53, 54, 55, 72, 74, 85, 95, 97, 99, 102, 147, 163, 165, 169, 173, 176, 243, 244, 245, 252], "max_siz": [30, 31, 32, 38, 40, 46, 244], "1_000": [30, 31, 32], "merg": [30, 31, 32, 37, 248], "mini": [30, 31, 32, 37], "style": [30, 31, 32, 37], "rb": [30, 31, 32, 37, 244, 249, 251], "insert_transform": [30, 31, 32, 33, 37], "insert": [30, 31, 32, 33, 37, 43, 47, 100, 244], "posit": [30, 31, 32, 33, 37, 48, 51, 53, 54, 55, 77, 78, 93, 94, 96, 99, 100, 127, 245, 248], "return_info": [30, 31, 32, 33, 37], "info": [30, 31, 32, 33, 37, 48, 51, 53, 54, 55, 65, 66, 104], "writer": [31, 37, 43, 237, 245], "randomsampl": [31, 37, 237, 243], "roundrobinwrit": [31, 37, 237], "priority_kei": [32, 33, 163, 165, 170, 175, 251], "td_error": [32, 33, 162, 163, 164, 165, 170, 173, 175, 177, 243, 251], "reduct": [32, 41], "prioritizedreplaybuff": [32, 237, 251], "update_tensordict_prior": [32, 243, 251], "min": [32, 41, 133, 134, 135, 161, 164, 173, 175, 243, 244, 245], "median": [32, 41, 148], "include_info": [32, 33, 37], "kw": [33, 43], "describ": [34, 70, 98, 133, 134, 196, 216, 224, 245, 248, 252], "from_env": 37, "use_timeout_as_don": 37, "env_kwarg": [37, 233, 234, 243], "metadata": [37, 243, 245, 252], "transit": [37, 48, 51, 53, 54, 55, 152, 243, 244, 248], "reconstruct": [37, 167, 252], "timeout": 37, "recov": [37, 141, 143, 149, 170, 247], "regard": [37, 153, 160, 165, 172, 245, 248], "get_dataset": 37, "qlearning_dataset": 37, "less": [37, 53, 233, 234, 243, 244, 245, 251], "left": [37, 85, 87, 96, 98, 102, 243, 244, 245], "terminate_on_end": 37, "possess": 37, "unexpectedli": 37, "particular": [37, 48, 51, 53, 54, 55, 99, 241, 244, 247], "episod": [37, 91, 110, 185, 186, 187, 188, 189, 190, 191, 244], "absent": 37, "traj_split": 37, "observationnorm": [37, 103, 235, 243, 244, 245, 251], "maze2d": 37, "umaz": 37, "loc": [37, 82, 90, 120, 127, 134, 135, 138, 139, 140, 145, 148, 150, 214, 216, 224, 226, 229, 235, 243, 244, 245, 251], "128": [37, 113, 243, 244, 248, 249], "scratch_dir": [38, 243], "memmap": [38, 54, 55, 103, 207], "attach": [38, 39, 40, 46, 244], "entiti": [38, 39, 40, 46], "guarante": [38, 39, 40, 46, 48, 51, 53, 54, 55, 103, 251], "made": [38, 39, 40, 46, 48, 51, 53, 54, 55, 144, 243, 249], "alloc": [39, 243], "max_capac": [41, 243], "update_prior": [41, 207, 241, 251], "uniformli": [42, 252], "roundrobin": 43, "piec": [43, 47, 245, 248], "drop_last": 45, "consum": [45, 245], "incomplet": 45, "unlik": [45, 165, 172, 244, 251], "fresh": 45, "caution": [45, 105, 252], "shuffl": 45, "haven": [45, 249], "similarli": [45, 48, 51, 53, 54, 55, 149, 150, 170, 243, 252], "remain": [45, 73, 126], "enforc": [45, 48, 51, 53, 54, 55, 99, 149, 248], "draw": 45, "duplic": [45, 48, 51, 53, 54, 55, 163, 165], "__len__": 46, "_inplace_upd": [48, 53, 54, 55, 56, 57, 65, 66, 99], "_batch_lock": [48, 53, 54, 55, 56, 57, 65, 66, 99], "run_type_check": [48, 52], "add_modul": [48, 51, 53, 54, 55], "child": [48, 51, 53, 54, 55], "fn": [48, 51, 53, 54, 55, 127, 233, 234], "recurs": [48, 51, 53, 54, 55], "init": [48, 51, 53, 54, 55, 243, 244, 245], "init_weight": [48, 51, 53, 54, 55], "m": [48, 51, 53, 54, 55, 73, 148, 248], "fill_": [48, 51, 53, 54, 55, 244, 252], "net": [48, 51, 53, 54, 55, 121, 173, 226, 231, 244, 248, 249, 251], "in_featur": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 111, 112, 113, 114, 115, 121, 122, 125, 126, 138, 147, 251], "out_featur": [48, 51, 52, 53, 54, 55, 72, 85, 95, 99, 102, 110, 111, 112, 113, 114, 115, 118, 119, 121, 122, 124, 125, 126, 138, 142, 147, 243, 251], "bia": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 111, 118, 122, 125, 126, 127, 143, 144, 147, 157, 158, 159, 244, 245, 251], "requires_grad": [48, 51, 53, 54, 55, 243], "batch_lock": [48, 50, 51, 53, 54, 55, 95, 99, 248], "environn": [48, 51, 52, 53, 54, 55, 99], "immut": [48, 51, 53, 54, 55, 87, 99, 216, 224], "bfloat16": [48, 51, 53, 54, 55], "cast": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 103, 147, 216, 219, 221, 224, 226, 229, 252], "datatyp": [48, 51, 53, 54, 55], "member": [48, 51, 53, 54, 55], "xdoctest": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "skip": [48, 51, 53, 54, 55, 78, 99, 105, 148, 192, 193, 203, 206, 245, 248], "buf": [48, 51, 53, 54, 55], "20l": [48, 51, 53, 54, 55], "1l": [48, 51, 53, 54, 55], "5l": [48, 51, 53, 54, 55], "associ": [48, 51, 53, 54, 55, 131, 235], "eval": [48, 51, 53, 54, 55, 99, 103, 243, 244, 245], "evalu": [48, 51, 53, 54, 55, 99, 116, 130, 135, 173, 217, 218, 244, 245], "dropout": [48, 51, 53, 54, 55, 99], "batchnorm": [48, 51, 53, 54, 55, 99], "disabl": [48, 51, 53, 54, 55, 99, 120, 134, 135, 243], "comparison": [48, 51, 53, 54, 55, 99], "similar": [48, 51, 53, 54, 55, 72, 85, 95, 99, 101, 102, 103, 147, 148, 243, 244, 245, 248, 252], "confus": [48, 51, 53, 54, 55, 99], "extra_repr": [48, 51, 53, 54, 55], "represent": [48, 51, 53, 54, 55, 85, 102, 243, 248, 249, 252], "fake_tensordict": [48, 51, 53, 54, 55, 243, 244], "fake": [48, 51, 53, 54, 55, 243, 244], "overridden": [48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157], "recip": [48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157], "afterward": [48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157, 252], "silent": [48, 51, 53, 54, 55, 111, 112, 113, 114, 115, 117, 118, 119, 121, 122, 127, 128, 129, 131, 132, 141, 143, 144, 157], "get_buff": [48, 51, 53, 54, 55], "throw": [48, 51, 53, 54, 55, 252], "docstr": [48, 51, 53, 54, 55], "get_submodul": [48, 51, 53, 54, 55], "explan": [48, 51, 53, 54, 55], "qualifi": [48, 51, 53, 54, 55], "referenc": [48, 51, 53, 54, 55], "attributeerror": [48, 51, 53, 54, 55], "invalid": [48, 51, 53, 54, 55], "resolv": [48, 51, 53, 54, 55], "get_extra_st": [48, 51, 53, 54, 55, 103], "set_extra_st": [48, 51, 53, 54, 55, 103], "picklabl": [48, 51, 53, 54, 55, 103], "pickl": [48, 51, 53, 54, 55, 103], "get_paramet": [48, 51, 53, 54, 55], "sai": [48, 51, 53, 54, 55, 249, 252], "net_b": [48, 51, 53, 54, 55], "net_c": [48, 51, 53, 54, 55], "conv": [48, 51, 53, 54, 55, 111, 244], "conv2d": [48, 51, 53, 54, 55, 111, 251], "16": [48, 51, 53, 54, 55, 245, 248], "kernel_s": [48, 51, 53, 54, 55, 111, 112, 113, 244, 251], "stride": [48, 51, 53, 54, 55, 111, 112, 113, 119, 244, 251], "diagram": [48, 51, 53, 54, 55], "show": [48, 51, 53, 54, 55, 243, 244, 245, 248, 251], "itself": [48, 51, 53, 54, 55, 245], "degre": [48, 51, 53, 54, 55], "named_modul": [48, 51, 53, 54, 55], "o": [48, 51, 53, 54, 55], "half": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 243], "ipu": [48, 51, 53, 54, 55], "strict": [48, 51, 53, 54, 55, 99], "descend": [48, 51, 53, 54, 55, 99], "exactli": [48, 51, 53, 54, 55, 62, 99, 243], "persist": [48, 51, 53, 54, 55, 99, 109], "missing_kei": [48, 51, 53, 54, 55, 99], "unexpected_kei": [48, 51, 53, 54, 55, 99], "namedtupl": [48, 51, 53, 54, 55, 99], "l": [48, 51, 53, 54, 55, 181, 245, 248], "idx": [48, 51, 53, 54, 55], "named_buff": [48, 51, 53, 54, 55, 244], "remove_dupl": [48, 51, 53, 54, 55], "prepend": [48, 51, 53, 54, 55], "running_var": [48, 51, 53, 54, 55], "named_children": [48, 51, 53, 54, 55], "conv4": [48, 51, 53, 54, 55], "conv5": [48, 51, 53, 54, 55], "memo": [48, 51, 53, 54, 55], "named_paramet": [48, 51, 53, 54, 55, 244], "rand_act": [48, 51, 53, 54, 55], "register_backward_hook": [48, 51, 53, 54, 55], "removablehandl": [48, 51, 53, 54, 55], "deprec": [48, 51, 53, 54, 55, 99, 252], "favor": [48, 51, 53, 54, 55, 245], "register_full_backward_hook": [48, 51, 53, 54, 55], "register_buff": [48, 51, 53, 54, 55], "running_mean": [48, 51, 53, 54, 55], "alongsid": [48, 51, 53, 54, 55], "num_featur": [48, 51, 53, 54, 55], "register_forward_hook": [48, 51, 53, 54, 55, 153, 154], "with_kwarg": [48, 51, 53, 54, 55], "signatur": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 156, 248], "possibli": [48, 51, 53, 54, 55, 111, 147, 210, 245, 248, 252], "register_module_forward_hook": [48, 51, 53, 54, 55], "register_forward_pre_hook": [48, 51, 53, 54, 55], "invok": [48, 51, 53, 54, 55], "And": [48, 51, 53, 54, 55], "forward_pr": [48, 51, 53, 54, 55], "register_module_forward_pre_hook": [48, 51, 53, 54, 55], "grad_input": [48, 51, 53, 54, 55], "grad_output": [48, 51, 53, 54, 55], "subsequ": [48, 51, 53, 54, 55], "technic": [48, 51, 53, 54, 55, 244], "caller": [48, 51, 53, 54, 55], "register_module_full_backward_hook": [48, 51, 53, 54, 55], "register_full_backward_pre_hook": [48, 51, 53, 54, 55], "backward_pr": [48, 51, 53, 54, 55], "register_module_full_backward_pre_hook": [48, 51, 53, 54, 55], "register_load_state_dict_post_hook": [48, 51, 53, 54, 55], "incompatible_kei": [48, 51, 53, 54, 55], "thrown": [48, 51, 53, 54, 55], "clear": [48, 51, 53, 54, 55, 202], "register_modul": [48, 51, 53, 54, 55, 241], "alia": [48, 51, 53, 54, 55], "register_paramet": [48, 51, 53, 54, 55], "register_state_dict_pre_hook": [48, 51, 53, 54, 55], "keep_var": [48, 51, 53, 54, 55, 99], "requires_grad_": [48, 51, 53, 54, 55, 243], "autograd": [48, 51, 53, 54, 55, 99], "freez": [48, 51, 53, 54, 55], "finetun": [48, 51, 53, 54, 55], "gan": [48, 51, 53, 54, 55], "_step": [48, 51, 53, 54, 55, 77, 87], "privat": [48, 51, 53, 54, 55, 248, 252], "_reset": [48, 51, 52, 53, 54, 55, 110, 124], "callback": [48, 51, 53, 54, 55], "auto_reset": [48, 51, 53, 54, 55, 244, 248], "auto_cast_to_devic": [48, 51, 53, 54, 55], "break_when_any_don": [48, 51, 53, 54, 55], "return_contigu": [48, 51, 53, 54, 55, 105, 247], "soon": [48, 51, 53, 54, 55], "lazystackedtensordict": [48, 51, 52, 53, 54, 55, 110, 124, 247, 251, 252], "concomitt": [48, 51, 53, 54, 55], "share_memori": [48, 49, 51, 53, 54, 55, 243], "share_memory_": [48, 51, 53, 54, 55, 251], "workspac": [48, 51, 53, 54, 55], "destin": [48, 51, 53, 54, 55, 99, 109], "averag": [48, 51, 53, 54, 55, 99, 103, 144, 166, 167, 208, 243, 245], "shallow": [48, 51, 53, 54, 55, 99], "pleas": [48, 51, 53, 54, 55, 99, 238], "detach": [48, 51, 53, 54, 55, 99, 243, 244], "carri": [48, 51, 53, 54, 55, 244, 248], "non_block": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 244], "memory_format": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "channels_last": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "Its": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "complex": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147, 243, 244], "integr": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 115, 124, 147, 248, 249], "unchang": [48, 51, 53, 54, 55, 72, 73, 85, 95, 99, 102, 147], "tri": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "pin": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "4d": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "ignore_w": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "1913": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "3420": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "5113": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "2325": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "torch_doctest_cuda1": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "gpu1": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "1914": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "5112": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "2324": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "float16": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "cdoubl": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "3741": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "2382": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "5593": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "4443": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "complex128": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "6122": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "1150": [48, 51, 53, 54, 55, 72, 85, 95, 99, 102, 147], "to_empti": [48, 51, 53, 54, 55], "dst_type": [48, 51, 53, 54, 55], "xpu": [48, 51, 53, 54, 55], "set_to_non": [48, 51, 53, 54, 55], "creator": [49, 217, 218, 233, 234, 235], "substitut": [49, 103], "vecnorm": [49, 235], "discount": [49, 160, 161, 162, 163, 165, 166, 168, 170, 171, 172, 175, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 243, 244, 245], "env_creat": [49, 243], "test_env1": 49, "_td": 49, "observation_count": [49, 252], "test_env2": 49, "sleep": [49, 252], "p1": 49, "p2": 49, "join": [49, 216, 224, 245], "9934": 49, "env_str": 50, "discard": [51, 109, 192, 252], "info_dict_read": 51, "set_info_dict_read": 51, "put": [51, 103, 235, 244, 245, 248], "f": [51, 159, 182, 183, 184, 243, 244, 245, 248, 252], "read_act": 51, "read_don": 51, "reader": [51, 243, 244], "frame_skip": [51, 58, 59, 60, 63, 78, 203, 206, 213, 241, 243, 245, 251], "broken": [51, 105], "read_ob": 51, "dictat": [51, 148, 248], "inner": [51, 73, 241, 243, 245, 252], "read_reward": 51, "total_reward": 51, "step_reward": 51, "far": [51, 120, 134, 135, 248, 252], "baseinfodictread": 51, "info_dict": 51, "hoc": 51, "manner": [51, 85, 243, 244, 245, 247, 248], "dict_read": 51, "default_info_dict_read": 51, "my_info_kei": 51, "some_env": 51, "limit": [52, 243, 248], "safeti": 52, "constraint": [52, 245], "behav": [52, 62, 130, 170, 249], "unboundedcontinuoustensorspec": [52, 95, 110, 137, 138, 139, 140, 147, 150, 151, 237, 245, 248, 252], "mymbenv": [52, 110, 124], "world_model": [52, 110, 124, 167], "super": [52, 110, 124, 151, 153, 156, 243, 244, 248, 251], "hidden_observ": [52, 110, 124], "mlp": [52, 110, 111, 112, 113, 114, 115, 121, 124, 138, 142, 216, 224, 226, 229, 237, 243, 244, 247, 249, 251], "worldmodelwrapp": [52, 110, 124, 237], "safemodul": [52, 110, 123, 138, 139, 140, 141, 143, 144, 145, 148, 150, 152, 155, 156, 160, 161, 162, 164, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 206, 217, 218, 231, 237, 251], "activation_class": [52, 110, 111, 112, 113, 114, 115, 118, 119, 122, 124, 243, 244, 251], "relu": [52, 110, 124, 127, 159], "activate_last_lay": [52, 110, 115, 122, 124], "depth": [52, 110, 111, 112, 113, 114, 115, 118, 119, 122, 124, 128, 129, 142, 244, 247], "equal": [53, 54, 55, 81, 82, 111, 117, 122, 178, 201, 233, 234, 245, 249], "readthedoc": 53, "en": 53, "python_interfac": 53, "num_work": [53, 54, 55, 243, 244], "thread": 53, "task_id": 53, "my_env_fun": [54, 55], "custom_attribute_list": [54, 55], "custom_attribut": [54, 55], "custom_method_list": [54, 55], "custom_method": [54, 55], "deploi": [54, 55], "creation": [54, 55, 252], "slight": [54, 55, 244], "overhead": [54, 55], "share_individual_td": [54, 55], "lazi": [54, 55, 85, 125, 149, 150, 243, 244, 247, 252], "shared_memori": [54, 55], "policy_proof": [54, 55], "ll": [54, 55, 243, 244, 245, 252], "hidden": [54, 55, 118, 121, 128, 129, 131, 132, 138, 139, 140, 147, 150, 216, 224, 247, 251], "allow_step_when_don": [54, 55], "update_kwarg": [54, 55], "googl": [56, 57, 245], "ant": [56, 57, 249], "get_environ": 57, "87": [57, 248, 249], "acrobot": [57, 252], "fetch": [57, 249, 252], "dm_control": [58, 59, 243, 247, 252], "task_nam": 58, "cheetah": [58, 59, 243, 252], "habitat": [62, 238, 249], "placehold": [62, 99], "secur": 62, "jumanji": [63, 64], "snake": [63, 64], "6x6": [63, 64], "td1": 64, "int32": [64, 251], "12x12": 64, "tsp50": 64, "tsp100": 64, "vma": [65, 66], "scenario_nam": 65, "flock": [65, 66], "num_env": [65, 66], "continuous_act": [65, 66], "scenario": [65, 66, 243, 248], "n_agent": [65, 66], "cohesion_rew": [65, 66], "collision_rew": [65, 66], "separation_rew": [65, 66], "velocity_rew": [65, 66], "18": [65, 66, 245, 248, 249, 252], "model_bas": [67, 110, 124], "transform_reward_spec": [68, 72, 74, 87, 89, 90, 98, 100], "success": [69, 98, 244, 248, 251], "account": [69, 244], "movement": 69, "veloc": [69, 248, 252], "propos": [69, 123, 169, 176, 226, 229], "pdf": [69, 112, 113, 114, 115, 144, 153, 165, 173, 176, 182, 185, 186, 189, 219, 226, 229], "1312": 69, "5602": 69, "_buffer": [69, 96], "transform_observation_spec": [69, 70, 71, 72, 74, 75, 77, 79, 80, 82, 87, 88, 91, 92, 94, 95, 96, 97, 98, 100, 248], "del_kei": [70, 244, 247, 248], "unsqueeze_if_oor": 70, "observation_posit": 70, "observation_veloc": 70, "delet": 70, "unsqueez": [70, 97, 100, 121, 248], "key1": [70, 201, 209], "key2": [70, 201, 209], "crop": [71, 86, 193], "center": [71, 193], "width": [71, 88], "height": [71, 88], "squar": [71, 120, 134, 135, 193], "rewardsc": [72, 99, 243, 244], "rewardclip": 72, "transformed_env": [72, 98, 99], "tranform": [72, 75, 80, 92, 94, 98, 101, 244], "dest": [72, 85, 102, 147], "transform_input_spec": [72, 73, 74, 82, 87, 94, 98, 100], "num_actions_effect": 73, "max_act": [73, 177], "action_kei": [73, 110, 123, 124, 141, 143], "include_forward": 73, "dimension": [73, 182, 185, 186, 189], "num_act": [73, 164, 244], "action_out": 73, "_call": [73, 77, 248], "inde": [73, 245, 248], "manual_se": [73, 82, 143, 144, 243, 248, 251, 252], "expos": [74, 149], "extern": [74, 252], "excluded_kei": 75, "finit": 76, "first_dim": 77, "last_dim": 77, "allow_positive_dim": [77, 100], "flatten": [77, 207, 243, 244], "th": [77, 100, 248], "permit": [77, 100], "exclus": [77, 235], "frameskip": 77, "repeatedli": [78, 245], "init_kei": 80, "is_init": 80, "tracker": 80, "noop": [81, 251], "30": [81, 131, 132, 244, 245, 248], "op": [81, 141, 143, 212], "randomli": [81, 82, 95, 148, 248], "noop_max": 81, "out_keys_inv": [82, 83, 87, 98, 248], "standard_norm": [82, 90, 243, 244], "affin": [82, 90], "layer": [82, 103, 111, 112, 113, 118, 122, 125, 126, 128, 129, 136, 243, 244, 245, 249], "normal": [82, 103, 111, 120, 122, 127, 134, 135, 141, 148, 161, 171, 172, 206, 208, 235, 241, 252], "set_default_tensor_typ": 82, "doubletensor": 82, "isclos": 82, "next_ob": [82, 182, 183, 184, 243, 251], "rubric": [82, 150], "init_stat": [82, 243, 244, 245], "3752e": 82, "01": [82, 144, 157, 160, 161, 171, 172, 245, 248, 249, 250], "5087e": 82, "03": [82, 245, 248, 249, 250], "9294e": 82, "9636": 82, "5608": [82, 248], "6408": 82, "num_it": [82, 244, 245], "reduce_dim": [82, 243, 244, 245], "cat_dim": [82, 243, 244, 245], "keep_dim": [82, 244], "constant": [82, 241, 243, 245, 252], "statist": [82, 103, 174, 235, 243, 244, 245, 252], "approach": [82, 243, 245, 252], "gaussian": [82, 95, 110, 124, 125, 126, 141, 245], "empir": [82, 110, 124, 148, 245], "3d": 82, "third": 82, "r3m": [85, 249], "resnet": [85, 102], "visual": [85, 102, 245, 248], "embed": [85, 101, 102, 138, 139, 140, 147, 249], "ego4d": [85, 102], "paper": [85, 102, 169, 226, 229, 243, 245], "univers": [85, 102], "suraj": 85, "nair": 85, "aravind": 85, "rajeswaran": 85, "vikash": [85, 102], "kumar": [85, 102], "chelsea": 85, "finn": 85, "abhinav": 85, "gupta": 85, "2203": [85, 124, 249], "12601": [85, 249], "_init": 85, "snippet": [85, 243], "resnet50": [85, 102, 249], "model_nam": [85, 102, 196], "resnet34": 85, "resnet18": 85, "empti": [85, 96, 99, 102, 243, 248], "r3m_vec": [85, 249], "feed": [85, 102], "244": [85, 102, 248], "stack_imag": [85, 102], "tread": [85, 102], "separet": [85, 102], "hub": [85, 102, 249], "cach": [85, 99, 102, 202, 249], "public": [85, 102], "resnet50_weight": [85, 102], "imagenet1k_v1": [85, 102], "download_path": [85, 102], "tensor_pixels_kei": [85, 102], "sub_seq_len": 86, "sample_dim": 86, "mask_kei": 86, "primarili": 86, "hesit": 86, "request": 86, "robust": 86, "vari": 86, "mix": 86, "NOT": 86, "improp": 86, "create_copi": 87, "renam": [87, 109, 243], "stuff": 87, "braxenv": [87, 237], "newnam": 87, "transform_output_spec": [87, 98], "untouch": [87, 98], "transform_done_spec": [87, 98], "interpol": [88, 244], "bilinear": 88, "clamp_min": [89, 144], "clamp_max": 89, "clip_min": 89, "scalar": [89, 113, 115, 125, 126, 141, 143, 144, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 244, 248], "clip_max": 89, "episode_": 91, "reward1": 91, "reward2": 91, "ho": 91, "excludetransform": 92, "squeeze_dim": 93, "recognis": 94, "primer": 95, "default_valu": 95, "drawn": [95, 148, 245], "unit": [95, 110, 118, 128, 129, 131, 132, 245], "transfomedenv": 95, "lock": [95, 103, 248], "mykei": 95, "dtype_or_devic": 95, "pool": 96, "255": [97, 248], "ri": 97, "randint": [97, 243], "principl": 98, "cattransform": 98, "notabl": 98, "cache_spec": 99, "anymor": [99, 147, 243], "unsqueeze_dim": [100, 248], "danger": 100, "vip": [101, 102, 249], "toward": 102, "implicit": [102, 170], "jason": 102, "ma": 102, "shagun": 102, "sodhani": 102, "dinesh": 102, "jayaraman": 102, "osbert": 102, "bastani": 102, "ami": 102, "zhang": 102, "vip_vec": 102, "shared_td": 103, "decai": [103, 141, 143, 164, 173, 177, 208, 243, 244, 252], "9999": [103, 248], "0001": [103, 118, 127, 245, 248], "fly": [103, 171, 245, 248, 252], "to_observation_norm": 103, "99": [103, 124, 160, 161, 164, 166, 168, 170, 171, 172, 173, 174, 175, 177, 181, 231, 243, 244, 245, 248, 251], "underflow": [103, 208], "build_td_for_shared_vecnorm": 103, "memmori": 103, "memmap_": 103, "queue": 103, "td_share": 103, "state_dim": [104, 131, 132], "action_dim": [104, 112, 114, 247], "gsde": [104, 173, 235], "func": [104, 251], "gsdemodul": 104, "check_dtyp": 105, "short": [105, 245], "discrep": [105, 160, 161, 162, 163, 171, 172], "imposs": 105, "heterogen": [105, 244], "probabilistictdmodul": [108, 122, 148, 170, 175, 181, 206], "next_tensordict": [109, 243], "keep_oth": [109, 248], "exclude_reward": 109, "exclude_don": 109, "exclude_act": 109, "THe": 109, "next_": 109, "funtion": [109, 248], "planning_horizon": [110, 124], "optim_step": [110, 124], "num_candid": [110, 124], "top_k": [110, 124], "reward_kei": [110, 124, 204, 208], "cross": 110, "entropi": [110, 160, 161, 164, 171, 172, 173, 175], "botev": 110, "et": 110, "al": [110, 221, 252], "2013": 110, "cem": 110, "plan": [110, 123, 124], "varianc": [110, 120, 127, 134, 135, 245], "rank": 110, "k": [110, 244], "repeat": [110, 245, 248], "maximis": [110, 112, 114, 124, 243, 245, 248], "horizon": [110, 124, 245], "modelbasedenv": [110, 124], "mpc": [110, 123, 124], "candid": [110, 124], "modelbasedenvbas": [110, 123, 124, 237], "next_hidden_observ": 110, "num_cel": [111, 112, 113, 114, 115, 118, 119, 122, 138, 243, 244, 245, 251], "elu": [111, 112, 113, 114, 115, 118, 119, 244, 251], "activation_kwarg": [111, 122], "norm_class": [111, 112, 113, 122], "norm_kwarg": [111, 122], "bias_last_lay": [111, 112, 113, 114, 115, 119, 122], "aggregator_class": [111, 112, 113, 244, 251], "squashdim": [111, 112, 251], "aggregator_kwarg": [111, 112, 113, 244], "squeeze_output": [111, 112, 113, 244], "convolut": [111, 112, 113], "neural": [111, 147, 244, 245, 248, 252], "produc": [111, 122, 130, 138, 140, 193, 245, 252], "len": [111, 122, 243, 244, 248, 249, 251], "cell": [111, 122, 245], "kernel": [111, 119, 121], "device_typ": [111, 112, 113, 114, 115, 119, 122, 125, 126], "cnet": 111, "34": [111, 122, 245, 248], "35": [111, 122, 245, 248, 249, 250], "rectangular": 111, "conv_net_kwarg": [112, 113], "mlp_net_kwarg": [112, 113, 114], "use_avg_pool": [112, 113], "WITH": [112, 113, 114, 115, 144, 176, 219], "1509": [112, 113, 114, 115, 124, 144, 169, 176, 219, 243], "02971": [112, 113, 114, 115, 144, 176, 219, 243], "convnet": [112, 237, 251], "ndims_in": 112, "avgpool": [112, 113], "adaptiveavgpool2d": [113, 244], "400": [114, 115, 248], "300": [114, 115, 216, 224, 248], "mlp_net_kwargs_net1": 115, "mlp_net_kwargs_net2": 115, "atol": [116, 133], "06": [116, 133, 245, 248], "rtol": [116, 133], "batch_shap": [116, 133], "event_shap": [116, 133], "absolut": [116, 133], "toler": [116, 133], "log_prob": [116, 130, 135], "densiti": [116, 130, 135], "mass": [116, 130, 135, 248], "rsampl": [116, 130, 148], "sample_shap": [116, 130], "dqnet": 117, "atom": 117, "std_bia": 118, "std_min_val": 118, "predict": [118, 123, 124, 152, 165, 167, 168, 170, 175, 181, 244], "belief": [118, 128, 131, 132], "1912": [118, 166, 167, 168], "01603": [118, 166, 167, 168], "softplu": [118, 127, 157, 158, 159], "out_features_valu": 119, "cnn_kwarg": [119, 244], "mlp_kwarg": [119, 121, 244], "duel": [119, 244], "cnn": [119, 244, 251], "06581": 119, "512": [119, 248], "upscal": [120, 134, 135], "tanh_loc": [120, 134, 135], "event_dim": [120, 133, 134], "ultim": [120, 134, 135], "poor": [120, 134, 135], "explos": [120, 134, 135], "switch": [120, 134, 135], "sigma": [120, 134, 135, 141, 144, 245], "formula": [120, 134, 135, 161, 171, 172, 245], "lstm_kwarg": 121, "embedd": 121, "next_observ": [121, 247], "time_step": 121, "2d": 121, "hidden_s": 121, "input_s": 121, "hidden0_in": 121, "hidden1_in": 121, "hidden0_out": 121, "hidden1_out": 121, "single_bias_last_lay": 122, "layer_class": 122, "layer_kwarg": 122, "perceptron": 122, "seamless": 122, "reshap": [122, 245], "lazylinear": [122, 245, 248, 249, 251], "42": [122, 210, 245, 248], "noisylinear": [122, 125, 237, 244], "noisylazylinear": [122, 237], "At": [123, 245, 247, 248, 249], "mpcplanner": 123, "tensordict_out": [123, 252], "advantage_modul": [124, 160, 245], "temperatur": [124, 170], "mppi": 124, "covari": 124, "william": [124, 174], "aldrich": 124, "theodor": 124, "01149": 124, "tempor": [124, 183, 244], "hansen": 124, "wang": 124, "su": 124, "04955": 124, "ndunboundedcontinuoustensorspec": [124, 150], "valueoper": [124, 138, 139, 140, 160, 161, 171, 172, 231, 237, 243, 245], "tdlambdaestim": [124, 237], "value_net": [124, 182, 183, 184, 245], "adv": 124, "95": [124, 166, 243, 244, 245, 248, 249], "std_init": [125, 126], "term": [125, 126, 159, 160, 164, 212, 244, 245], "matrix": [125, 126], "initialize_paramet": 125, "isol": [125, 244], "1706": 126, "10295v3": 126, "induc": 126, "aid": 126, "emploi": 126, "scale_map": 127, "biased_softplus_1": 127, "scale_lb": [127, 131, 132], "exp": [127, 159], "module_norm": 127, "decod": 128, "1803": [128, 129], "10122": [128, 129], "rnn_hidden": 128, "latent": 129, "logit": 130, "excacli": 130, "hidden_dim": [131, 132], "posterior": [131, 167], "rssm": [131, 132, 167], "1811": [131, 132, 248], "04551": [131, 132], "obs_embed": 131, "rnn_hidden_dim": 132, "dream": 132, "recurr": [132, 244], "tanhtransform": 134, "tensordict_modul": [137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156], "translat": [137, 145], "td_modul": [137, 138, 139, 140, 145, 147, 148, 150, 151, 251], "get_policy_oper": [138, 139, 140, 216, 224], "alon": [138, 139, 140], "tdmodul": [138, 139, 140, 231], "get_critic_oper": 138, "common_oper": [138, 140], "policy_oper": [138, 139, 140], "value_oper": [138, 139, 140], "probabilisticactor": [138, 139, 140, 164, 170, 175, 237, 243, 245], "tanhnorm": [138, 139, 140, 145, 150, 237, 245, 251], "normalparamwrapp": [138, 139, 140, 145, 150, 237, 251], "spec_hidden": [138, 140], "module_hidden": [138, 140], "td_module_hidden": [138, 140], "spec_act": [138, 140], "module_act": [138, 140], "td_module_act": [138, 139, 140], "dist_in_kei": [138, 139, 140, 145, 150], "sample_out_kei": [138, 140, 150], "distribution_class": [138, 139, 140, 145, 148, 150, 243, 245, 251], "return_log_prob": [138, 139, 140, 148, 150, 245, 251], "module_valu": [138, 139, 140], "td_module_valu": [138, 139, 140], "state_action_valu": [138, 151, 181, 219, 226, 229, 231, 243, 251], "td_clone": [138, 139, 140], "sample_log_prob": [138, 139, 140, 148, 150, 216, 224, 226, 245, 251], "tensordictmodulewrapp": [138, 217, 218, 231], "get_value_oper": [138, 139, 140, 216, 224], "action_modul": 139, "state_valu": [139, 140, 151, 182, 183, 184, 185, 186, 187, 189, 190, 216, 224, 229, 243, 245], "safesequenti": [139, 140, 152, 237], "sigma_init": 141, "sigma_end": 141, "annealing_num_step": [141, 143, 144, 243, 244], "po": [141, 143], "epsilon": [141, 143, 144, 176, 208, 244, 245], "action_spac": [142, 146, 153, 154], "one_hot": [142, 146, 153, 154], "nbin": [142, 153], "qvalue_actor": [142, 146, 153, 154], "eps_init": [143, 144, 244], "eps_end": [143, 144, 244], "greedi": [143, 154, 244], "explorative_polici": [143, 144], "0000": [143, 245, 248, 251], "6986": 143, "9366": 143, "5837": 143, "8596": 143, "grad_fn": [143, 251], "addbackward0": [143, 251], "theta": [144, 245, 248], "15": [144, 166, 244, 245, 248, 250, 251], "mu": [144, 245], "dt": [144, 248], "x0": 144, "sigma_min": 144, "n_steps_ann": 144, "ornstein": [144, 243], "uhlenbeck": [144, 243], "ou": [144, 243], "introduc": 144, "auto": [144, 164, 173, 175], "correl": 144, "sort": 144, "equat": [144, 159, 161, 176, 245, 248], "prev_nois": 144, "current_sigma": 144, "sqrt": 144, "ou_prev_nois": 144, "ou_step": 144, "increas": [144, 244], "anneal": 144, "_ou_prev_nois": 144, "_ou_step": 144, "probabilist": [145, 245, 251], "functional_modul": [145, 146, 147, 150, 151, 153, 154], "make_funct": [145, 146, 147, 150, 151, 153, 154, 155, 244, 251], "functionalmodul": [147, 155], "functionalmodulewithbuff": [147, 155], "obj": [147, 148, 149], "character": 147, "overflow": [147, 148], "grucel": 147, "td_fmodul": 147, "td_function": 147, "td_state": 147, "vmap": [147, 150, 244, 251], "ensembl": [147, 173], "params_repeat": 147, "td_vmap": [147, 150], "irrespect": [147, 148], "random_sampl": [147, 148], "tensor_spec": 148, "default_interaction_mod": 148, "distribution_kwarg": [148, 243, 245], "cache_dist": 148, "n_empirical_estim": 148, "probabilistictensordictmodul": [148, 149, 251], "rule": [148, 245], "interaction_mod": 148, "get_dist": [148, 149], "__call__": [148, 241], "suppli": 148, "fist": 148, "set_interaction_mod": 148, "diverg": [148, 167, 171], "partial_toler": [149, 150, 247], "probabilistictensordictsequenti": [149, 251], "tensordictsequenti": [149, 243, 247, 249, 251], "who": [149, 150], "AND": [149, 150], "scan": [149, 150], "tensordictsequenci": 150, "tensordictsequ": 150, "safeprobabilisticmodul": [150, 237], "spec1": 150, "net1": 150, "module1": 150, "td_module1": 150, "spec2": 150, "module2": 150, "td_module2": 150, "custommodul": [151, 156], "cat": [151, 251], "transition_model": 152, "reward_model": 152, "imaginari": 152, "imagin": 152, "get_reward_oper": 152, "get_transition_model_oper": 152, "var_num": [153, 154], "perspect": [153, 165, 245], "1707": [153, 165, 172, 216, 224], "06887": [153, 165], "mult_one_hot": [153, 154], "customdistributionalqv": 153, "log_softmax": 153, "_functorch": 155, "wrapper_typ": 155, "mislead": 156, "other_kei": 156, "typeerror": [156, 243], "min_val": [157, 159], "bias": [157, 243, 244], "_bia": 157, "invert": [158, 245], "surject": 159, "expln": 159, "biased_softplu": [159, 237], "beggin": 159, "biased_softplus_": 159, "syntax": [159, 243], "condit": [159, 243, 248], "met": [159, 248], "safeprobabilisticsequenti": [160, 161, 171, 172, 174, 217, 218, 237], "advantage_kei": [160, 161, 171, 172, 174, 182, 183, 184, 245], "value_target_kei": [160, 172, 174, 182, 183, 184, 245], "value_target": [160, 172, 174, 182, 183, 184, 245], "entropy_bonu": [160, 161, 171, 172, 245], "samples_mc_entropi": [160, 161, 171, 172], "entropy_coef": [160, 161, 171, 172, 245], "critic_coef": [160, 161, 171, 172, 245], "gamma": [160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 174, 175, 177, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 231, 243, 244, 245, 251], "loss_critic_typ": [160, 161, 171, 172, 174, 245], "smooth_l1": [160, 161, 162, 163, 164, 170, 171, 172, 173, 174, 175, 177, 178, 245], "1602": 160, "01783v2": 160, "advantage_diff_kei": 160, "advantage_diff": 160, "value_error": [160, 182, 183, 184], "loss_function_typ": 160, "l1": [160, 161, 162, 163, 164, 171, 172, 173, 177, 178, 244], "l2": [160, 161, 162, 163, 164, 167, 168, 171, 172, 173, 177, 178], "tha": 160, "throughout": [160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 245, 252], "essenti": [160, 161, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 248], "clip_epsilon": [161, 245], "normalize_advantag": [161, 171, 172], "threshold": [161, 245], "favour": [161, 171, 172], "mont": [161, 171, 172], "carlo": [161, 171, 172], "multipli": [161, 164, 171, 172, 173, 175, 208, 243], "loss_funct": [161, 162, 163, 164, 170, 172, 173, 175, 177, 178], "actor_network": [162, 164, 170, 173, 174, 175, 177], "value_network": [162, 163, 165, 170, 175, 182, 183, 184, 245], "delay_actor": [162, 175, 177], "delay_valu": [162, 163, 165, 174, 175], "input_tensordict": [162, 163, 165], "qvalueactor": [163, 237, 244], "qvalue_network": [164, 170, 173, 175, 177], "num_qvalue_net": [164, 170, 173, 175, 177], "priotity_kei": [164, 170, 173, 175, 177], "alpha_init": [164, 173, 175], "min_alpha": [164, 173, 175], "max_alpha": [164, 173, 175], "fixed_alpha": [164, 173, 175], "target_entropy_weight": 164, "98": [164, 182, 183, 184, 245, 248, 249, 251], "target_entropi": [164, 173, 175], "delay_qvalu": [164, 173, 175, 177], "distributionalqvalueactor": [165, 237], "disctount": 165, "actor_model": 166, "value_model": [166, 168], "model_based_env": 166, "dreamerenv": [166, 237], "imagination_horizon": 166, "lmbda": [166, 182, 184, 185, 187, 188, 189, 190, 191, 243, 244, 245], "discount_loss": [166, 168], "unrol": 166, "lambda_kl": 167, "lambda_reco": 167, "lambda_reward": 167, "reco_loss": 167, "reward_loss": 167, "free_nat": 167, "delayed_clamp": 167, "global_averag": 167, "kl": [167, 171], "nat": 167, "clamp": [167, 210, 248], "value_loss": [168, 243], "fake_data": 168, "loss_modul": [169, 176, 210, 230, 231, 241, 245], "dqnloss": [169, 176, 222, 237], "ddpgloss": [169, 176, 220, 231, 237, 251], "sacloss": [169, 176, 228, 237], "td3loss": [169, 176, 237], "value_network_update_interv": 169, "contrast": 169, "06461": 169, "expectil": 170, "2110": 170, "06169": 170, "qvalue_network_bi": [170, 175], "tau": [170, 243, 244], "antmaz": 170, "sticht": 170, "loss_value_diff": 170, "diff": 170, "dtarg": 171, "decrement": 171, "samples_mc_kl": 171, "penalti": 171, "old_polici": 171, "new_polici": 171, "adapt": [171, 243, 248], "old": [171, 252], "thu": 171, "distanc": [171, 178, 181, 182], "apart": 171, "proxim": [172, 216, 224, 245], "optimis": [172, 206, 245], "flavour": [172, 251], "constrain": 172, "clipppoloss": [172, 237, 245], "klpenppoloss": [172, 237], "regularis": 172, "06347": [172, 216, 224], "sub_sample_len": 173, "openreview": [173, 226], "ay8zfzm0tdd": [173, 226], "idea": [173, 241], "subsampl": [173, 201, 241], "connectionist": 174, "1992": [174, 245], "doi": 174, "1007": 174, "bf00992696": 174, "1801": [175, 229], "01290": [175, 229], "applic": [175, 248], "1812": 175, "05905": 175, "prod": 175, "n_action": 175, "redqloss": [176, 237], "999": [176, 208, 244], "prev_param": 176, "new_param": 176, "policy_nois": 177, "noise_clip": 177, "v2": [178, 187, 188, 190, 191, 216, 219, 224, 226, 229], "strict_shap": 178, "view_a": 178, "next_val_kei": 181, "pred_next_v": 181, "usus": 181, "mse": [181, 244], "q_valu": 181, "target_valu": [181, 251], "n_steps_to_next": 181, "value_next_st": 181, "average_ga": [182, 245], "value_kei": [182, 183, 184], "1506": [182, 185, 186, 189], "02438": [182, 185, 186, 189], "exponenti": [182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 208], "propag": [182, 183, 184, 245], "throught": [182, 183, 184], "advang": 182, "gradient_mod": 182, "sign": 182, "unused_arg": 182, "target_param": [182, 183, 184], "relev": [182, 183, 184, 248], "94": [182, 184, 245, 248], "unpack": [182, 183, 184], "average_reward": [183, 184], "next_state_valu": [185, 186, 187, 188, 189, 190, 191, 237, 251], "old_stat": [185, 186, 187, 189, 190], "new_stat": [185, 186, 187, 188, 189, 190, 191], "rolling_gamma": [187, 188, 190, 191], "ti": [187, 188, 190, 191], "event": [187, 188, 190, 191], "g1": [187, 188, 190, 191], "g2": [187, 188, 190, 191], "g3": [187, 188, 190, 191], "g4": [187, 188, 190, 191], "v3": [187, 188, 190, 191], "v4": [187, 188, 190, 191, 243, 245, 249], "upcom": [187, 188, 190, 191, 243], "out_file_bas": 192, "skip_reset": 192, "dump": 192, "interv": [192, 193, 202, 212, 244, 248], "center_crop": 193, "make_grid": 193, "Will": 193, "grid": 193, "exp_nam": [194, 195, 198, 199, 200, 231, 243], "log_dir": [194, 195, 197, 199], "templat": 194, "csv": [195, 197], "minim": 195, "dependeci": 195, "experiment_nam": [196, 197], "uuid": [196, 252], "date": 196, "logger_typ": 197, "logger_nam": 197, "tensorboard": [197, 199, 251], "wandb": [197, 200, 251], "mlflow": [197, 198], "might": [197, 238, 243, 252], "wandb_kwarg": 197, "mlflow_kwarg": 197, "tracking_uri": 198, "uri": 198, "datastor": 198, "tb_log": 199, "tensoarboard": 199, "sub_traj_len": 201, "min_sub_traj_len": 201, "full": [201, 243, 244, 245, 247, 248, 249, 251, 252], "20": [201, 245, 248, 251, 252], "register_op": [201, 202, 203, 204, 205, 207, 208, 209, 212, 241], "process_optim_batch": [201, 207, 208, 241], "td_out": [201, 209], "_process_optim_batch_hook": [201, 241], "clear_cuda": 202, "pre_optim_step": [202, 241], "counter": [203, 241], "log_pbar": [203, 204, 206, 208, 241], "progress": [203, 204, 206, 210, 241, 252], "bar": [203, 204, 206, 210, 241], "count_fram": 203, "pre_steps_log": [203, 204, 241], "lognam": 204, "r_train": 204, "log_reward": 204, "loss_compon": 205, "appl": 205, "omit": [205, 243, 245, 248], "loss_": 205, "optimizer_hook": 205, "loss_actor": 205, "record_interv": [206, 243], "record_fram": [206, 213, 243], "policy_explor": [206, 231, 243], "log_kei": 206, "suffix": 206, "underestim": 206, "suppos": [206, 241, 252], "set_exploration_mod": [206, 237, 243, 244, 245, 251], "reward_evalu": 206, "tensordictreplaybuff": [207, 231, 237, 243, 244], "flatten_tensordict": 207, "max_dim": 207, "rb_trainer": 207, "batch_process": [207, 208, 209, 241], "post_loss": [207, 241], "jitter": 208, "finfo": 208, "default_dtyp": 208, "get_default_dtyp": 208, "reward_norm": 208, "update_reward_stat": 208, "normalize_reward": 208, "make_train": [209, 237], "_process_batch_hook": [209, 241], "versatil": 210, "lossmodul": [210, 230, 231], "optim_steps_per_batch": [210, 241], "epoch": [210, 245], "clip_grad_norm": 210, "partial": 210, "clip_norm": 210, "progress_bar": 210, "tqdm": [210, 243, 244, 245, 248], "save_trainer_interv": 210, "disk": [210, 241, 244], "10000": [210, 244, 245], "save_trainer_fil": [210, 241], "datacollectorbas": [212, 217, 218, 231, 237], "update_weights_interv": 212, "sit": [212, 244], "update_weight": 212, "post_step": [212, 241], "cfg": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 235], "dictconfig": [213, 214, 216, 217, 218, 219, 221, 224, 226, 227, 229, 230, 231, 232, 235], "divid": [213, 243], "unknowingli": 213, "annealing_fram": [213, 243], "init_env_step": [213, 214, 243], "proof_environ": [214, 216, 219, 221, 224, 226, 229, 243], "sta": 214, "ot": 214, "a2closs": [215, 237], "in_keys_actor": [216, 224], "observation_kei": [216, 224, 226, 229], "actorvalueoper": [216, 224, 237], "dummi": [216, 219, 221, 224, 226, 229, 243, 252], "actorcriticoper": [216, 224, 237], "parser_env_arg": [216, 224, 226], "make_ppo_model": [216, 237], "parser_model_args_continu": [216, 224, 226, 229], "cattensor": [216, 219, 224, 226, 229, 243, 244, 247, 248, 252], "hydra": [216, 219, 221, 224, 226, 229], "config_stor": [216, 219, 221, 224, 226, 229], "configstor": [216, 219, 221, 224, 226, 229], "dataclass": [216, 219, 221, 224, 226, 229], "halfcheetah": [216, 219, 224, 226, 229, 243], "config_field": [216, 219, 221, 224, 226, 229], "config_cl": [216, 219, 221, 224, 226, 229], "ppomodelconfig": [216, 224], "envconfig": [216, 219, 221, 224, 226, 229], "make_dataclass": [216, 219, 221, 224, 226, 229], "cls_name": [216, 219, 221, 224, 226, 229], "config_path": [216, 219, 221, 224, 226, 229], "config_nam": [216, 219, 221, 224, 226, 229], "actor_valu": [216, 224], "17": [216, 219, 224, 226, 229, 245, 248], "actor_model_explor": [217, 218, 243], "make_env_kwarg": [217, 218], "actor_net_kwarg": [219, 226, 229], "value_net_kwarg": [219, 229], "modulelist": [219, 226, 229, 251], "ddpgcnnactor": [219, 237], "ddpgmlpactor": [219, 237], "ddpgcnnqnet": [219, 237], "ddpgmlpqnet": [219, 237], "ddpgmodelconfig": 219, "targetnetupdat": [220, 222, 225, 228, 230, 231], "discretemodelconfig": 221, "pong": [221, 252], "v5": [221, 252], "pixels_onli": [221, 243, 244, 251, 252], "210": [221, 248, 252], "160": [221, 248, 252], "ppoloss": [223, 237], "redqloss_deprec": 225, "qvalue_net_kwarg": [226, 229], "qvalu": [226, 229, 244], "redqmodelconfig": 226, "replayargsconfig": 227, "sacmodelconfig": 229, "target_net_updat": 231, "constitu": 231, "learnt": [231, 244, 245], "tempfil": 231, "tensorboardlogg": [231, 237], "egreedywrapp": [231, 237, 244], "env_proof": 231, "obs_spec": [231, 248], "net_valu": 231, "dir": [231, 241], "gettempdir": 231, "argpars": [232, 235], "namespac": [232, 235], "parser": [232, 235], "transformed_env_constructor": [232, 237], "num_env_per_collector": [233, 234], "num_collector": [233, 234, 244], "video_tag": 235, "norm_obs_onli": 235, "use_env_cr": 235, "custom_env_mak": 235, "custom_env": 235, "return_transformed_env": 235, "action_dim_gsd": 235, "state_dim_gsd": 235, "batch_dim": 235, "obs_norm_state_dict": 235, "wheter": 235, "maker": 235, "asyncdatacollector": 237, "distributedsyncdatacollector": 237, "submitit_delayed_launch": 237, "tensordictprioritizedreplaybuff": [237, 251], "prioritizedsampl": [237, 243], "samplerwithoutreplac": [237, 245], "d4rlexperiencereplai": 237, "binarydiscretetensorspec": 237, "unboundeddiscretetensorspec": [237, 245, 252], "tensordictrecord": 237, "videorecord": [237, 245], "get_available_librari": 237, "braxwrapp": 237, "dmcontrolenv": [237, 243, 247, 252], "dmcontrolwrapp": 237, "jumanjienv": 237, "jumanjiwrapp": 237, "vmasenv": 237, "vmaswrapp": 237, "actorcriticwrapp": 237, "additivegaussianwrapp": 237, "ornsteinuhlenbeckprocesswrapp": [237, 243], "is_tensordict_compat": 237, "ensure_tensordict_compat": 237, "qvaluehook": 237, "distributionalqvaluehook": 237, "duelingcnndqnet": [237, 244], "distributionaldqnnet": 237, "lstmnet": 237, "dreameractor": 237, "obsencod": 237, "obsdecod": 237, "rssmprior": 237, "rssmposterior": 237, "reset_nois": 237, "cemplann": 237, "mpcplannerbas": 237, "mppiplann": 237, "independentnorm": 237, "truncatednorm": 237, "tanhdelta": [237, 243], "onehotcategor": 237, "inv_softplu": 237, "distributionaldqnloss": [237, 244], "discretesacloss": 237, "iqlloss": 237, "reinforceloss": 237, "dreameractorloss": 237, "dreamermodelloss": 237, "dreamervalueloss": 237, "gae": [237, 245], "tdestim": 237, "generalized_advantage_estim": 237, "vec_generalized_advantage_estim": 237, "vec_td_lambda_return_estim": 237, "vec_td_lambda_advantage_estim": [237, 243, 244], "td_lambda_return_estim": 237, "td_lambda_advantage_estim": 237, "td_advantage_estim": 237, "distance_loss": 237, "hold_out_net": [237, 243], "hold_out_param": 237, "softupd": [237, 243], "hardupd": [237, 243], "batchsubsampl": [237, 241], "clearcudacach": 237, "countframeslog": 237, "logreward": [237, 241], "optimizerhook": 237, "replaybuffertrain": [237, 241], "rewardnorm": 237, "selectkei": [237, 241], "trainerhookbas": [237, 241], "updateweight": [237, 241], "make_a2c_loss": 237, "make_a2c_model": 237, "make_collector_offpolici": 237, "make_collector_onpolici": 237, "make_ddpg_actor": [237, 243], "make_ddpg_loss": 237, "make_dqn_actor": 237, "make_dqn_loss": 237, "make_ppo_loss": 237, "make_redq_loss": 237, "make_redq_model": 237, "make_replay_buff": [237, 243], "make_sac_loss": 237, "make_sac_model": 237, "make_target_updat": 237, "parallel_env_constructor": [237, 243], "sync_async_collector": 237, "sync_sync_collector": 237, "correct_for_frame_skip": 237, "get_stats_random_rollout": 237, "csvlogger": 237, "mlflowlogg": 237, "wandblogg": 237, "get_logg": 237, "generate_exp_nam": 237, "journei": 238, "guid": [238, 243, 244], "textbook": 238, "highlight": 238, "ever": 238, "bump": 238, "think": [238, 245, 252], "benefit": 238, "pr": 238, "outer": [241, 243, 244, 252], "believ": 241, "scheme": [241, 252], "substenti": 241, "_pre_steps_log_hook": 241, "_pre_optim_hook": 241, "sub_batch": 241, "_post_loss_hook": 241, "_post_optim_hook": 241, "post_optim": 241, "_post_optim_log": 241, "post_optim_log": 241, "_post_steps_hook": 241, "_post_steps_log_hook": 241, "post_steps_log": 241, "comment": [241, 244, 251], "categori": 241, "extens": 241, "reserv": 241, "three": [241, 245, 248], "logginghook": 241, "logging_hook": 241, "save_dict": 241, "some_valu": 241, "torchsnapshot": 241, "ckpt_backend": 241, "pt": [241, 249], "filepath": 241, "select_kei": 241, "save_train": 241, "load_from_fil": 241, "perfectli": [241, 243, 248], "intern": 242, "author": [243, 244, 245, 248], "vincent": [243, 244, 245, 248], "moen": [243, 244, 245, 248], "topic": 243, "asid": 243, "strongli": 243, "familiar": [243, 244, 252], "transpar": [243, 244], "understood": [243, 244], "sota": [243, 244, 251], "illustr": [243, 244], "deepcopi": 243, "matplotlib": [243, 244, 245, 248, 252], "pyplot": [243, 244, 245, 248, 252], "plt": [243, 244, 245, 248, 252], "environmet": 243, "remaind": 243, "focu": [243, 245], "funciton": 243, "env_librari": 243, "env_task": 243, "env_arg": 243, "elif": [243, 244], "notimplementederror": 243, "friendli": 243, "special": [243, 252], "torchr": 243, "rescal": 243, "presum": 243, "leav": 243, "make_transformed_env": 243, "reward_sc": 243, "double_to_float_list": 243, "double_to_float_inv_list": 243, "dmcontrol": 243, "get_env_stat": 243, "proof_env": 243, "transform_state_dict": 243, "significantli": [243, 244], "leverag": [243, 252], "env_per_collector": 243, "make_t_env": 243, "copy_": 243, "parallel_env": [243, 251, 252], "maxim": [243, 248], "recal": [243, 244, 245], "materi": 243, "small": [243, 245, 252], "env_spec": 243, "actor_net": [243, 245], "num_lay": 243, "actor_modul": [243, 251], "q_net": 243, "qnet": 243, "make_record": 243, "recorder_obj": 243, "flavor": 243, "circular": 243, "pick": [243, 244], "arrai": 243, "buffer_s": [243, 244], "prb": 243, "buffer_scratch_dir": 243, "adjust": [243, 248], "magnitud": 243, "1000000": 243, "device_count": [243, 244, 249, 252], "500k": 243, "meaning": 243, "5000": [243, 244, 245], "myopic": [243, 244], "n_steps_forward": 243, "lr": [243, 244, 245, 248], "5e": 243, "weight_decai": 243, "utd": 243, "update_to_data": 243, "005": [243, 244], "tmp": 243, "semin": 243, "qnet_target": 243, "tight": 243, "natur": 243, "seamlessli": [243, 248], "traceback": [243, 244, 251], "__w": [243, 244, 251], "doc": [243, 244, 251], "coding_ddpg": [243, 244, 250], "677": 243, "1642": [243, 244], "got": 243, "adam": [243, 244, 245, 248], "optimizer_actor": 243, "optimizer_qnet": 243, "total_collection_step": 243, "scheduler1": 243, "lr_schedul": [243, 245, 248], "cosineannealinglr": [243, 245, 248], "t_max": 243, "scheduler2": 243, "temporarili": 243, "explain": [243, 249], "fed": 243, "hood": [243, 248], "coupl": [243, 248], "rewards_ev": 243, "norm_factor_train": 243, "collected_fram": 243, "pbar": [243, 244, 245, 248], "r0": 243, "numel": [243, 244, 245, 249], "current_fram": [243, 244], "sampled_tensordict": 243, "backprop": 243, "next_valu": [243, 244], "value_est": 243, "pow": [243, 244], "sampled_tensordict_actor": 243, "actor_loss": 243, "p_in": 243, "p_dest": 243, "zip": [243, 246], "b_in": 243, "b_dest": 243, "td_record": 243, "r_evalu": 243, "set_descript": [243, 244, 245, 248], "4f": [243, 244, 245, 248], "plot": [243, 244, 245, 248], "mention": [243, 244, 252], "label": [243, 244], "legend": [243, 244], "xlabel": [243, 244, 248], "ylabel": [243, 244], "tight_layout": 243, "250": [243, 248], "100000": [243, 244], "batch_size_traj": 243, "simplic": [243, 244, 245, 249], "td_lambda": 243, "roughli": [243, 251], "four": [243, 248], "big": [243, 244, 245, 252], "incompat": 243, "rand_idx": 243, "titl": [243, 244, 245, 248], "labmda": 243, "minut": [243, 244, 245, 247, 248, 249, 251, 252], "54": [243, 245, 248, 250], "740": [243, 250], "3620": [243, 250], "mb": [243, 244, 245, 247, 248, 249, 250, 251, 252], "jupyt": [243, 244, 245, 246, 247, 248, 249, 251, 252], "ipynb": [243, 244, 245, 247, 248, 249, 251, 252], "galleri": [243, 244, 245, 246, 247, 248, 249, 251, 252], "sphinx": [243, 244, 245, 246, 247, 248, 249, 251, 252], "cartpol": [244, 252], "tabl": 244, "highest": 244, "lookup": 244, "amort": [244, 245], "conjunct": 244, "cart": 244, "pole": 244, "un": 244, "actuat": 244, "frictionless": 244, "upright": [244, 252], "balanc": [244, 252], "prerequisit": 244, "flesh": 244, "grayscal": [244, 252], "did": [244, 245, 252], "get_funct": 244, "is_notebook": 244, "shell": 244, "get_ipython": 244, "__class__": 244, "zmqinteractiveshel": 244, "qtconsol": 244, "terminalinteractiveshel": 244, "ipython": [244, 248], "nameerror": 244, "interpret": 244, "hopefulli": 244, "sensit": 244, "variat": 244, "2e": [244, 248], "aka": 244, "upd": 244, "n_optim": 244, "smooth": 244, "harder": [244, 251], "500000": 244, "256": [244, 245, 248], "eps_greedy_v": 244, "eps_greedy_val_env": 244, "mandatori": [244, 245, 248], "init_bia": 244, "observation_norm_state_dict": 244, "five": 244, "64x64": 244, "channel": 244, "motion": [244, 248], "simpler": 244, "test_env": 244, "9920": 244, "0789": 244, "trick": 244, "mathbb": 244, "rightarrow": 244, "concept": 244, "pessimist": [244, 245], "power": 244, "ubiquit": 244, "trainabl": [244, 249], "augment": 244, "make_model": 244, "dummy_env": 244, "output_s": 244, "unflatten_kei": 244, "fairli": 244, "params_target": 244, "actor_explor": 244, "flat": 244, "unflatten": 244, "params_flat": 244, "flatten_kei": 244, "coding_ppo": [244, 245, 250], "themselv": 244, "data_collector": 244, "coding_dqn": [244, 250], "479": [244, 248], "1094": 244, "q_": 244, "v_": 244, "defaultdict": [244, 245, 248], "logs_exp1": 244, "prev_traj_count": 244, "traj_length": 244, "enough": 244, "sampled_data": 244, "sampled_data_out": 244, "tdstep": 244, "exp_valu": 244, "mse_loss": 244, "gv": 244, "clip_grad_norm_": [244, 245, 248], "p_target": 244, "p_orig": 244, "grad_val": 244, "traj_count": 244, "eval_rollout": [244, 245], "traj_lengths_ev": 244, "mavg": 244, "05": [244, 248], "traj_count_ev": 244, "figsiz": [244, 245, 248], "subplot": [244, 245, 248, 252], "traj": 244, "savefig": 244, "albeit": [244, 248], "slowli": 244, "dqn_td0": 244, "png": 244, "capac": [244, 245], "logs_exp2": 244, "dqn_tdlambda": 244, "fewer": 244, "plot_both": 244, "frames_td0": 244, "frames_tdlambda": 244, "evals_td0": 244, "evals_tdlambda": 244, "mavgs_td0": 244, "mavgs_tdlambda": 244, "traj_count_td0": 244, "traj_count_tdlambda": 244, "td0": 244, "pixels_sav": 244, "imageio": 244, "mimwrit": 244, "mp4": 244, "fp": 244, "qvaluenetwork": 244, "nth": 244, "noticebli": 244, "collectorclass": 244, "till": 244, "steps_to_next_ob": 244, "worst": 244, "accuraci": 244, "fanci": 244, "285": [244, 248, 250], "3711": [244, 250], "demonstr": [245, 248, 252], "talk": 245, "repetit": 245, "six": 245, "sophist": 245, "invent": 245, "overview": [245, 251], "theta_k": 245, "frac": 245, "pi_": 245, "exceed": 245, "discourag": [245, 248], "indispens": 245, "loader": 245, "analyz": 245, "lingua": 245, "franca": 245, "descript": 245, "normalparamextractor": 245, "has_cuda": [245, 252], "3e": 245, "max_grad_norm": 245, "ourselv": [245, 252], "benefici": 245, "errat": 245, "hamper": 245, "reactiv": 245, "group": 245, "xy": 245, "exce": 245, "budget": 245, "50_000": 245, "sub_batch_s": 245, "num_epoch": 245, "intro": 245, "entropy_ep": 245, "generalist": 245, "interchang": [245, 249], "panel": 245, "charact": 245, "inverteddoublependulum": 245, "transmit": 245, "stai": 245, "thumb": 245, "supplementari": [245, 252], "told": 245, "stringent": 245, "nevertheless": 245, "concret": 245, "everyth": 245, "continuousbox": [245, 248, 251, 252], "environemnt": 245, "confid": 245, "succeed": [245, 248], "pack": [245, 252], "ran": 245, "mutli": 245, "boundari": 245, "f_": 245, "text": 245, "mu_": 245, "difficulti": [245, 252], "brought": 245, "scrictli": 245, "d_ob": 245, "d_action": 245, "extract": 245, "carrier": 245, "policy_modul": 245, "That": 245, "said": 245, "value_modul": [245, 251], "briefli": 245, "simplest": [245, 252], "oblivi": 245, "refil": 245, "conveni": [245, 248], "easiest": 245, "hide": 245, "awai": 245, "mathemat": 245, "deal": 245, "tradeoff": 245, "eval_str": 245, "tensordict_data": 245, "data_view": 245, "subdata": 245, "loss_val": 245, "loss_valu": [245, 251], "loss_object": 245, "loss_crit": 245, "loss_entropi": 245, "cum_reward_str": 245, "stepcount_str": 245, "param_group": 245, "lr_str": 245, "nice": 245, "noth": 245, "50000": 245, "00": [245, 248, 249, 250], "04": [245, 248, 249, 250], "232": [245, 248], "95it": [245, 248], "73": [245, 248, 249], "2719": [245, 248], "0955": [245, 248], "0003": [245, 248], "25": [245, 248], "233": [245, 248], "13it": [245, 248], "1168": 245, "3000": 245, "22": [245, 248], "64it": 245, "1532": 245, "4000": 245, "231": [245, 248], "24it": [245, 248], "1678": 245, "21": [245, 247, 248, 249, 250], "97it": [245, 248], "2108": 245, "6000": 245, "07": [245, 248, 250], "234": [245, 248], "16it": 245, "2124": 245, "7000": 245, "96it": 245, "1936": 245, "23": [245, 248], "8000": 245, "02": [245, 248, 249], "59": [245, 248], "48it": [245, 248], "19": [245, 248], "9000": 245, "62it": 245, "1918": [245, 248], "70it": 245, "2086": 245, "11000": 245, "47": [245, 248, 250, 252], "240": [245, 248, 251, 252], "6265": 245, "2114": 245, "12000": 245, "51": [245, 248], "43": [245, 248], "92it": 245, "2003": [245, 248], "39": [245, 248, 249], "26": [245, 248, 249], "13000": 245, "55": [245, 248, 249], "35it": [245, 248], "1702": 245, "28": [245, 248, 249, 250], "14000": 245, "1908": 245, "15000": 245, "51it": 245, "2309": 245, "0002": [245, 248], "16000": 245, "236": [245, 248], "07it": 245, "2564": [245, 248], "52": [245, 248, 249], "17000": 245, "94it": 245, "2419": 245, "36": [245, 247, 248], "18000": 245, "235": [245, 248], "56it": 245, "2334": 245, "31": [245, 248, 249], "19000": 245, "55it": 245, "2313": 245, "40": [245, 248, 249], "20000": 245, "237": [245, 248], "2342": 245, "21000": 245, "238": [245, 248], "148": [245, 248], "1500": 245, "2438": 245, "53": [245, 248, 249], "44": [245, 248, 249], "22000": 245, "58": [245, 248, 249], "43it": [245, 248], "70": [245, 248, 249], "23000": 245, "37": [245, 248], "54it": 245, "2445": 245, "48": [245, 248, 249, 250], "24000": 245, "10it": [245, 248], "2514": 245, "25000": 245, "45": [245, 248, 250], "30it": [245, 248], "26000": 245, "41": [245, 248], "39it": [245, 248], "2327": 245, "56": [245, 247, 248, 250], "27000": 245, "40it": [245, 248], "2339": 245, "28000": 245, "2353": 245, "29000": 245, "12it": [245, 248], "2456": 245, "60": [245, 248, 249, 251], "30000": 245, "38it": [245, 248], "2372": 245, "62": [245, 248, 249], "31000": 245, "19it": [245, 248], "202": [245, 248], "6111": 245, "2657": [245, 248], "32000": 245, "2586": 245, "66": [245, 248, 249], "33000": 245, "2662": 245, "69": [245, 248, 249], "68": [245, 248], "34000": 245, "09it": [245, 248], "2693": 245, "61": [245, 248, 249], "35000": 245, "44it": [245, 248], "2777": 245, "74": [245, 248, 249], "72": [245, 248], "36000": 245, "239": [245, 248], "00it": [245, 248], "2754": 245, "37000": 245, "23it": [245, 248], "2803": 245, "57": [245, 248], "76": [245, 248, 249], "38000": 245, "14it": [245, 248], "2811": 245, "78": [245, 248], "39000": 245, "2823": 245, "80": [245, 248, 249], "40000": 245, "49": [245, 248], "33it": [245, 248], "2761": 245, "82": [245, 248], "41000": 245, "268": [245, 248], "5266": 245, "2680": [245, 248], "84": [245, 248], "42000": 245, "29it": [245, 248], "2890": 245, "86": [245, 248], "43000": 245, "80it": [245, 248], "2736": 245, "88": [245, 248, 249], "44000": 245, "20it": [245, 248], "2744": 245, "90": [245, 248, 249], "45000": 245, "2673": 245, "92": [245, 248, 249], "46000": 245, "2810": 245, "47000": 245, "2690": 245, "96": [245, 248, 249], "48000": 245, "2588": 245, "49000": 245, "66it": 245, "2651": 245, "90it": 245, "2565": 245, "65": [245, 248, 249], "cap": 245, "bit": 245, "966": [245, 250], "tutorials_python": 246, "tutorials_jupyt": 246, "distinct": 247, "humanoid": [247, 252], "walk": [247, 252], "env1": 247, "env1_obs_kei": 247, "observation_stand": 247, "env2": 247, "env2_obs_kei": 247, "observation_walk": 247, "tdreset1": 247, "tdreset2": 247, "tdreset": 247, "67": [247, 248, 249], "backbon": [247, 251], "policy_common": 247, "policy_stand": 247, "policy_walk": 247, "seq": 247, "But": 247, "env1_mak": 247, "env2_mak": 247, "_single_task": 247, "td_rollout": 247, "shown": 247, "744": [247, 250], "multi_task": [247, 250], "ground": 248, "freeli": 248, "inspir": 248, "sep": 248, "touch": 248, "undertaken": 248, "broader": 248, "challeng": [248, 249], "wider": 248, "algebra": 248, "acquaint": 248, "avenu": 248, "unsqueezetransform": 248, "_apply_to_composit": 248, "default_x": 248, "pi": 248, "default_i": 248, "_set_se": 248, "torqu": 248, "upward": 248, "angular": 248, "convent": 248, "dot": 248, "_t": 248, "sin": 248, "theta_t": 248, "rad": 248, "sec": 248, "gravit": 248, "theta_": 248, "001": 248, "angl": 248, "deleg": 248, "new_th": 248, "plu": 248, "new_thdot": 248, "thdot": 248, "g_forc": 248, "max_torqu": 248, "angle_norm": 248, "max_spe": 248, "zeros_lik": 248, "is_empti": 248, "gen_param": 248, "high_th": 248, "high_thdot": 248, "low_th": 248, "low_thdot": 248, "rng": 248, "lazili": 248, "shortcut": [248, 252], "characterist": 248, "irrelev": 248, "_make_spec": 248, "td_param": 248, "make_composite_from_td": 248, "commong": 248, "pseudo": 248, "pendulumenv": 248, "render_mod": 248, "human": 248, "rgb_arrai": 248, "render_fp": 248, "random_": 248, "_make_step": 248, "staticmethod": 248, "hyperparam": 248, "complic": [248, 252], "showcas": 248, "skeleton": 248, "_apply_transform": [248, 252], "_inv_apply_transform": [248, 252], "eventu": 248, "subset": [248, 249], "unitari": 248, "sine": 248, "cosin": 248, "sintransform": 248, "costransform": 248, "co": 248, "t_sin": 248, "t_co": 248, "cat_transform": 248, "mdp": 248, "convin": 248, "simplifi": 248, "simple_rollout": 248, "_data": 248, "unexplor": 248, "assumpt": 248, "recreat": 248, "20_000": 248, "init_td": 248, "traj_return": 248, "gn": 248, "last_reward": 248, "is_ipython": 248, "inlin": 248, "get_backend": 248, "ion": 248, "gcf": 248, "clear_output": 248, "625": 248, "9981": 248, "3292": 248, "8997": 248, "7032": 248, "696": 248, "46it": 248, "8466": 248, "0202": 248, "807": 248, "47it": 248, "2897": 248, "6322": 248, "0338": 248, "4880": 248, "504": 248, "1698": 248, "9674": 248, "188": 248, "0643": 248, "9703": 248, "127": 248, "49it": 248, "3363": 248, "0207": 248, "048": 248, "3501": 248, "5927": 248, "5956": 248, "7665": 248, "732": 248, "3527": 248, "0354": 248, "468": 248, "2219": 248, "2999": 248, "8446": 248, "7448": 248, "961": 248, "7403": 248, "5034": 248, "411": 248, "9381": 248, "7937": 248, "619": 248, "8760": 248, "1022": 248, "79": [248, 249], "6977": 248, "0331": 248, "987": 248, "8657": 248, "4508": 248, "919": 248, "9990": 248, "8757": 248, "921": 248, "9021": 248, "9585": 248, "518": 248, "6612": 248, "6255": 248, "648": 248, "7181": 248, "7913": 248, "089": 248, "0750": 248, "5913": 248, "596": 248, "8299": 248, "4152": 248, "9993": 248, "4527": 248, "2555": 248, "551": 248, "3655": 248, "3651": 248, "6557": 248, "3352": 248, "9137": 248, "7104": 248, "8728": [248, 251], "144": 248, "8547": 248, "6320": 248, "871": 248, "7414": 248, "4717": 248, "211": 248, "7268": 248, "1833": 248, "6634": 248, "3899": 248, "09": 248, "6083": 248, "3508": 248, "5830": 248, "6835": 248, "8209": 248, "3483": 248, "45it": 248, "7688": 248, "599": 248, "8693": 248, "3066": 248, "008": 248, "5190": 248, "5916": 248, "0074": 248, "053": 248, "3596": 248, "3337": 248, "3250": 248, "4695": 248, "556": 248, "4941": 248, "0976": 248, "436": 248, "5073": 248, "5455": 248, "6267": 248, "7900": 248, "7116": 248, "0649": 248, "206": 248, "9751": 248, "0522": 248, "328": 248, "0844": 248, "7387": 248, "845": 248, "78it": 248, "2246": 248, "5251": 248, "3373": 248, "9479": 248, "2709": 248, "3046": 248, "3977": 248, "3212": 248, "642": 248, "25it": 248, "3854": 248, "9375": 248, "837": 248, "31it": 248, "6287": 248, "6260": 248, "7219": 248, "8860": 248, "37it": 248, "6979": 248, "2648": 248, "4459": 248, "3500": 248, "41it": 248, "3812": 248, "3433": 248, "222": 248, "4411": 248, "6690": 248, "3777": 248, "1538": 248, "322": 248, "8743": 248, "4807": 248, "22e": 248, "3545": 248, "0107": 248, "85": 248, "2255": 248, "3131": 248, "1588": 248, "4491": 248, "076": 248, "63": 248, "2080": 248, "2076": 248, "831": 248, "26it": 248, "7440": 248, "6878": 248, "102": 248, "18it": 248, "2344": 248, "1025": 248, "902": 248, "9207": 248, "3350": 248, "2087": 248, "2254": 248, "06it": 248, "9928": 248, "3105": 248, "04it": 248, "6532": 248, "8399": 248, "224": 248, "03it": 248, "5124": 248, "8030": 248, "71": [248, 249], "02it": 248, "6501": 248, "4525": 248, "89": [248, 249, 250, 252], "01it": 248, "8541": 248, "8998": 248, "796e": 248, "2027": 248, "1556": 248, "3472": 248, "3081": 248, "396": 248, "75": 248, "3959": 248, "7512": 248, "28it": 248, "3240": 248, "8101": 248, "77": 248, "34it": 248, "2314": 248, "4188": 248, "295": 248, "9779": 248, "5535": 248, "15it": 248, "5627": 248, "6739": 248, "21it": 248, "8125": 248, "6816": 248, "755": 248, "6262": 248, "0773": 248, "8989": 248, "1044": 248, "83": [248, 249], "4514": 248, "0407": 248, "0062": 248, "4916": 248, "42it": 248, "4074": 248, "0404": 248, "3795": 248, "3577": 248, "122": [248, 252], "3650": 248, "4141": 248, "134": 248, "9704": 248, "9697": 248, "1513": 248, "4501": 248, "2994": 248, "4022": 248, "579": 248, "91": [248, 249], "2008": 248, "9061": 248, "558": 248, "0307": 248, "9752": 248, "93": [248, 249], "5623": 248, "5012": 248, "81it": 248, "2079": 248, "5742": 248, "125": 248, "99it": 248, "2724": 248, "3876": 248, "2708": 248, "7700": 248, "058": 248, "97": [248, 249], "1960": 248, "1463": 248, "3716": 248, "0288": 248, "2872": 248, "0933": 248, "36it": 248, "9320": 248, "1261": 248, "1747": 248, "4484": 248, "0453": 248, "3530": 248, "209": 248, "103": 248, "3564": 248, "3918": 248, "104": 248, "4985": 248, "105": 248, "5372": 248, "6419": 248, "106": 248, "4172": 248, "1033": 248, "107": 248, "5129": 248, "1738": 248, "982": 248, "108": 248, "2507": 248, "6379": 248, "109": 248, "2202": 248, "9865": 248, "110": 248, "6413": 248, "0470": 248, "111": 248, "7870": 248, "4711": 248, "386": 248, "112": 248, "8113": 248, "5438": 248, "113": 248, "7211": 248, "2379": 248, "054": 248, "4828": 248, "5023": 248, "115": [248, 251], "9169": 248, "8205": 248, "171": 248, "116": 248, "0791": 248, "4240": 248, "117": 248, "0138": 248, "3126": 248, "651": 248, "118": 248, "6676": 248, "3220": 248, "119": 248, "0057": 248, "120": 248, "4148": 248, "9243": 248, "121": [248, 252], "2873": 248, "2469": 248, "1979": 248, "1586": 248, "123": 248, "6911": 248, "8230": 248, "124": 248, "7729": 248, "9686": 248, "126": 248, "2032": 248, "0313": 248, "656": 248, "9053": 248, "4081": 248, "9441": 248, "3413": 248, "5864": 248, "006": 248, "129": 248, "0038": 248, "5304": 248, "7869": 248, "2975": 248, "131": 248, "7712": 248, "1618": 248, "132": 248, "7366": 248, "133": 248, "4165": 248, "0684": 248, "188e": 248, "27it": 248, "8963": 248, "1896": 248, "135": 248, "32it": 248, "7390": 248, "136": 248, "9629": 248, "9319": 248, "169": 248, "137": 248, "3621": 248, "138": 248, "7266": 248, "1210": 248, "139": 248, "8384": 248, "5619": 248, "140": 248, "0575": 248, "5144": 248, "141": 248, "8710": 248, "7681": 248, "142": 248, "8321": 248, "8516": 248, "945": 248, "143": 248, "0932": 248, "2351": 248, "773": 248, "0999": 248, "1744": 248, "145": 248, "2118": 248, "8154": 248, "146": 248, "7484": 248, "4035": 248, "147": 248, "5152": 248, "0088": 248, "5423": 248, "7286": 248, "149": 248, "7692": 248, "1465": 248, "150": 248, "0797": 248, "1392": 248, "151": 248, "9611": 248, "9006": 248, "152": 248, "7773": 248, "6767": 248, "153": 248, "4340": 248, "2778": 248, "154": 248, "5407": 248, "8302": 248, "595": 248, "155": 248, "4597": 248, "1627": 248, "156": 248, "7073": 248, "3922": 248, "157": 248, "7815": 248, "9858": 248, "158": 248, "6953": 248, "7051": 248, "159": 248, "6165": 248, "0605": 248, "3321": 248, "9367": 248, "161": 248, "3238": 248, "1825": 248, "162": 248, "6537": 248, "6867": 248, "163": [248, 249, 251], "8555": 248, "0956": 248, "164": 248, "3248": 248, "0159": 248, "165": 248, "2370": 248, "7480": 248, "166": 248, "8993": 248, "8285": 248, "167": 248, "5465": 248, "3198": 248, "168": 248, "9088": 248, "3417": 248, "2199": 248, "2993": 248, "170": 248, "7042": 248, "1570": 248, "6141": 248, "284": 248, "172": 248, "9925": 248, "2946": 248, "173": 248, "5968": 248, "174": 248, "1712": 248, "175": 248, "6813": 248, "9453": 248, "176": 248, "5664": 248, "177": 248, "3610": 248, "9569": 248, "178": 248, "0602": 248, "9931": 248, "179": 248, "7767": 248, "8155": 248, "180": 248, "0498": 248, "7331": 248, "568": 248, "181": 248, "0781": 248, "1768": 248, "182": 248, "9178": 248, "6354": 248, "183": 248, "1244": 248, "8991": 248, "336": 248, "184": 248, "8262": 248, "2116": 248, "185": 248, "2508": 248, "7676": 248, "186": 248, "0428": 248, "2621": 248, "187": 248, "0812": 248, "9802": 248, "199": 248, "9924": 248, "0870": 248, "189": 248, "3196": 248, "2363": 248, "190": 248, "9864": 248, "0182": 248, "191": 248, "98it": 248, "0345": 248, "9245": 248, "192": 248, "11it": 248, "9191": 248, "1752": 248, "491": 248, "193": 248, "1470": 248, "8907": 248, "257": 248, "194": 248, "1925": 248, "676": 248, "195": 248, "1042": 248, "5107": 248, "842": 248, "196": 248, "0179": 248, "2845": 248, "197": 248, "9784": 248, "0536": 248, "198": 248, "8914": 248, "3151": 248, "2599": 248, "7948": 248, "4072": 248, "201": 248, "5997": 248, "8325": 248, "8960": 248, "4193": 248, "203": 248, "0600": 248, "8070": 248, "204": 248, "0523": 248, "0025": 248, "205": 248, "5027": 248, "0148": 248, "736": 248, "0363": 248, "3280": 248, "207": 248, "1871": 248, "1571": 248, "208": 248, "8204": 248, "6373": 248, "9863": 248, "2612": 248, "0748": 248, "9467": 248, "8050": 248, "6954": 248, "291": 248, "212": 248, "4752": 248, "1008": 248, "016": 248, "213": 248, "8463": 248, "1723": 248, "214": 248, "6868": 248, "215": 248, "5380": 248, "1126": 248, "891": 248, "216": 248, "2562": 248, "217": 248, "5513": 248, "0549": 248, "566": 248, "218": 248, "0561": 248, "1288": 248, "607": 248, "219": 248, "3470": 248, "0052": 248, "220": 248, "4686": 248, "0242": 248, "941": 248, "221": 248, "8202": 248, "9284": 248, "1519": 248, "799": 248, "223": 248, "9705": 248, "0056": 248, "027": 248, "9204": 248, "991": 248, "225": 248, "0383": 248, "226": 248, "1037": 248, "7906": 248, "227": 248, "3671": 248, "5151": 248, "228": 248, "9767": 248, "9817": 248, "229": 248, "6483": 248, "230": 248, "6856": 248, "5156": 248, "7647": 248, "4922": 248, "3724": 248, "4932": 248, "3750": 248, "873": 248, "7854": 248, "2685": 248, "839": 248, "2902": 248, "1122": 248, "618": 248, "0771": 248, "428": 248, "0086": 248, "324": 248, "3233": 248, "3264": 248, "4450": 248, "1583": 248, "3840": 248, "3740": 248, "241": 248, "2403": 248, "0024": 248, "569": 248, "242": 248, "1011": 248, "0112": 248, "251": 248, "243": 248, "6538": 248, "0162": 248, "9349": 248, "7379": 248, "245": 248, "8236": 248, "0259": 248, "8227": 248, "246": 248, "4424": 248, "6078": 248, "247": 248, "1075": 248, "2630": 248, "248": 248, "2208": 248, "0820": 248, "684": 248, "249": 248, "7146": 248, "364": 248, "4423": 248, "9679": 248, "4463": 248, "5761": 248, "252": 248, "0347": 248, "0947": 248, "253": 248, "4200": 248, "0638": 248, "254": 248, "4313": 248, "0403": 248, "074": 248, "6630": 248, "0239": 248, "1293": 248, "0677": 248, "638": 248, "8976": 248, "0517": 248, "092": 248, "258": 248, "3424": 248, "1411": 248, "259": 248, "0897": 248, "0417": 248, "013": 248, "260": 248, "9226": 248, "0016": 248, "4881": 248, "261": 248, "1743": 248, "0167": 248, "262": 248, "1668": 248, "0481": 248, "608": 248, "263": 248, "1277": 248, "0092": 248, "8715": 248, "264": 248, "0661": 248, "0067": 248, "7747": 248, "265": 248, "2779": 248, "0430": 248, "9998": 248, "266": 248, "9067": 248, "0251": 248, "015": 248, "267": 248, "4558": 248, "0186": 248, "1901": 248, "1413": 248, "269": 248, "1785": 248, "0324": 248, "562": 248, "270": 248, "2759": 248, "826": 248, "271": 248, "1844": 248, "0168": 248, "587": 248, "272": 248, "3009": 248, "0362": 248, "273": 248, "82it": 248, "7069": 248, "274": 248, "0793": 248, "5345": 248, "275": 248, "0513": 248, "0211": 248, "088": 248, "276": 248, "4400": 248, "0433": 248, "866": 248, "277": 248, "2846": 248, "0157": 248, "427": 248, "278": 248, "2392": 248, "1046": 248, "408": 248, "279": 248, "1373": 248, "5125": 248, "280": 248, "1448": 248, "0560": 248, "678": 248, "281": 248, "5425": 248, "0506": 248, "282": 248, "5210": 248, "0940": 248, "334": 248, "283": 248, "0558": 248, "876": 248, "2645": 248, "0130": 248, "5357": 248, "7399": 248, "8931": 248, "286": 248, "2394": 248, "9803": 248, "287": 248, "6626": 248, "8780": 248, "288": 248, "2521": 248, "0027": 248, "289": 248, "1452": 248, "0534": 248, "877": 248, "290": 248, "2637": 248, "0477": 248, "519": 248, "2021": 248, "0382": 248, "742": 248, "292": 248, "1473": 248, "0208": 248, "293": 248, "3379": 248, "0450": 248, "294": 248, "2145": 248, "0270": 248, "3688": 248, "7527": 248, "296": 248, "8627": 248, "297": 248, "2180": 248, "0066": 248, "298": 248, "0373": 248, "0055": 248, "299": 248, "5879": 248, "9401": 248, "6223": 248, "8889": 248, "301": 248, "2797": 248, "1580": 248, "302": 248, "9936": 248, "4949": 248, "303": 248, "4579": 248, "9796": 248, "304": 248, "0070": 248, "9057": 248, "305": 248, "2540": 248, "746": 248, "306": 248, "5077": 248, "1406": 248, "307": 248, "7956": 248, "7657": 248, "308": 248, "9119": 248, "1691": 248, "309": 248, "2513": 248, "3036": 248, "310": 248, "0779": 248, "0079": 248, "8692": 248, "311": 248, "9439": 248, "0460": 248, "592": 248, "312": 248, "8099": 248, "0491": 248, "313": 248, "516": 248, "314": 248, "8046": 248, "0147": 248, "404": 248, "315": 248, "0122": 248, "0017": 248, "6365": 248, "316": 248, "1499": 248, "0109": 248, "717": 248, "317": 248, "0034": 248, "4328": 248, "318": 248, "1559": 248, "0010": 248, "3445": 248, "319": 248, "9434": 248, "2862": 248, "320": [248, 252], "9168": 248, "0020": 248, "7494": 248, "321": 248, "7114": 248, "004": 248, "2146": 248, "323": 248, "8207": 248, "0008": 248, "093": 248, "0291": 248, "0036": 248, "733": 248, "325": 248, "0031": 248, "0059": 248, "9693": 248, "326": 248, "4539": 248, "4015": 248, "327": 248, "2260": 248, "0032": 248, "8712": 248, "2449": 248, "0100": 248, "7291": 248, "329": 248, "0009": 248, "5744": 248, "330": 248, "9889": 248, "0205": 248, "563": 248, "331": 248, "9478": 248, "0578": 248, "332": 248, "3117": 248, "3474": 248, "333": 248, "3562": 248, "2592": 248, "2034": 248, "0292": 248, "335": [248, 251], "6824": 248, "2522": 248, "565": 248, "337": 248, "9085": 248, "0041": 248, "798": 248, "338": 248, "0409": 248, "0278": 248, "339": 248, "0081": 248, "077": 248, "340": 248, "1038": 248, "0184": 248, "341": 248, "5232": 248, "2485": 248, "948": 248, "342": 248, "3397": 248, "343": 248, "1390": 248, "1946": 248, "344": 248, "3108": 248, "9773": 248, "345": 248, "9628": 248, "8776": 248, "346": 248, "2432": 248, "593": 248, "347": 248, "4281": 248, "3059": 248, "348": 248, "9241": 248, "0303": 248, "349": 248, "4747": 248, "3566": 248, "350": 248, "5687": 248, "1356": 248, "351": 248, "9195": 248, "2604": 248, "352": 248, "50it": 248, "5555": 248, "353": 248, "4093": 248, "354": 248, "3465": 248, "0412": 248, "498": 248, "355": 248, "4612": 248, "0659": 248, "888": 248, "356": 248, "0915": 248, "6161": 248, "357": 248, "4199": 248, "6984": 248, "358": 248, "1434": 248, "5982": 248, "359": 248, "6443": 248, "8121": 248, "360": 248, "9721": 248, "559": 248, "361": 248, "5386": 248, "0893": 248, "362": 248, "1242": [248, 251], "0828": 248, "507": 248, "363": 248, "8708": 248, "1920": 248, "548": 248, "9075": 248, "4399": 248, "365": 248, "6237": 248, "0761": 248, "929": 248, "366": 248, "1787": 248, "1726": 248, "367": 248, "4725": 248, "368": 248, "0309": 248, "502": 248, "369": 248, "6823": 248, "0098": 248, "370": 248, "2397": 248, "371": 248, "4634": 248, "0099": 248, "699": 248, "372": 248, "9857": 248, "9962": 248, "373": 248, "9991": 248, "2484": 248, "374": 248, "8959": 248, "737": 248, "375": 248, "1581": 248, "376": 248, "8401": 248, "377": 248, "9562": 248, "0272": 248, "378": 248, "9824": 248, "4239": 248, "379": 248, "2841": 248, "380": 248, "83it": 248, "9922": 248, "4334": 248, "381": 248, "9613": 248, "6321": 248, "382": 248, "0516": 248, "8370": 248, "383": 248, "9549": 248, "7350": 248, "384": 248, "1794": 248, "4433": 248, "385": 248, "5432": 248, "738": 248, "9084": 248, "387": 248, "8010": 248, "388": 248, "9532": 248, "6513": 248, "389": 248, "8265": 248, "0729": 248, "390": 248, "8901": 248, "3721": 248, "391": 248, "8347": 248, "7444": 248, "392": 248, "6952": 248, "7052": 248, "393": 248, "4568": 248, "1346": 248, "394": 248, "2150": 248, "0438": 248, "943": 248, "395": 248, "2904": 248, "9225": 248, "3052": 248, "0075": 248, "8393": 248, "397": 248, "1268": 248, "398": 248, "4296": 248, "1481": 248, "399": 248, "5538": 248, "3458": 248, "2728": 248, "1060": 248, "401": 248, "7887": 248, "402": 248, "9080": 248, "5411": 248, "403": 248, "1620": 248, "7441": 248, "7703": 248, "405": 248, "6127": 248, "3102": 248, "406": 248, "4175": 248, "5960": 248, "407": 248, "0043": 248, "8779": 248, "409": 248, "6928": 248, "410": 248, "2700": 248, "022": 248, "0357": 248, "0019": 248, "028": 248, "412": 248, "0935": 248, "0060": 248, "7993": 248, "413": 248, "9033": 248, "0065": 248, "6378": 248, "414": 248, "9597": 248, "415": 248, "0110": 248, "0005": 248, "4133": 248, "416": 248, "84it": 248, "8585": 248, "0042": 248, "6746": 248, "417": 248, "7328": 248, "1174": 248, "4613": 248, "418": 248, "2442": 248, "0233": 248, "419": 248, "3477": 248, "018": 248, "420": 248, "6869": 248, "0289": 248, "4806": 248, "421": 248, "1528": 248, "0134": 248, "2848": 248, "422": 248, "1684": 248, "2155": 248, "423": 248, "0116": 248, "5719": 248, "424": 248, "0214": 248, "2801": 248, "425": 248, "4760": 248, "0224": 248, "6168": 248, "426": 248, "2511": 248, "0045": 248, "1865": 248, "8317": 248, "1415": 248, "2207": 248, "0841": 248, "429": 248, "0849": 248, "985": 248, "430": 248, "9495": 248, "0372": 248, "9485": 248, "431": 248, "9242": 248, "0039": 248, "4826": 248, "432": 248, "1635": 248, "433": 248, "9218": 248, "1003": 248, "434": 248, "7468": 248, "1522": 248, "435": 248, "7471": 248, "5852": 248, "9354": 248, "0013": 248, "037": 248, "437": 248, "3633": 248, "0187": 248, "061": 248, "438": 248, "7091": 248, "0212": 248, "439": 248, "0950": 248, "6344": 248, "440": 248, "1945": 248, "5790": 248, "441": 248, "6370": 248, "7047": 248, "442": 248, "9447": 248, "0551": 248, "443": 248, "0674": 248, "0146": 248, "046": 248, "444": 248, "0087": 248, "0247": 248, "445": 248, "2640": 248, "0129": 248, "8987": 248, "446": 248, "1670": 248, "5398": 248, "447": 248, "9180": 248, "7940": 248, "448": 248, "2948": 248, "0588": 248, "449": 248, "0486": 248, "0029": 248, "1134": 248, "450": 248, "3267": 248, "5681": 248, "451": 248, "0151": 248, "452": 248, "6647": 248, "0316": 248, "453": 248, "5449": 248, "0209": 248, "097": 248, "454": 248, "9321": 248, "3687": 248, "953": 248, "455": 248, "9511": 248, "2701": 248, "456": 248, "0406": 248, "8281": 248, "457": 248, "0379": 248, "458": 248, "2470": 248, "0437": 248, "459": 248, "5843": 248, "0072": 248, "460": 248, "6838": 248, "3447": 248, "461": 248, "7313": 248, "0355": 248, "462": 248, "9268": 248, "0265": 248, "9834": 248, "463": 248, "8536": 248, "9786": 248, "464": 248, "0696": 248, "7232": 248, "465": 248, "9096": 248, "4422": 248, "466": 248, "3227": 248, "0026": 248, "467": 248, "9565": 248, "9563": 248, "9941": 248, "1284": 248, "469": 248, "1401": 248, "2850": 248, "470": 248, "1807": 248, "8859": 248, "471": 248, "0268": 248, "2992": 248, "472": 248, "7436": 248, "0048": 248, "034": 248, "473": 248, "7046": 248, "0352": 248, "474": 248, "2023": 248, "3258": 248, "515": 248, "475": 248, "0141": 248, "9798": 248, "476": 248, "4474": 248, "0912": 248, "477": 248, "9181": 248, "5476": 248, "478": 248, "1264": 248, "3269": 248, "0714": 248, "0030": 248, "5317": 248, "480": [248, 249], "5477": 248, "0255": 248, "8628": 248, "481": 248, "1258": 248, "0015": 248, "482": 248, "9650": 248, "4266": 248, "483": 248, "8081": 248, "0004": 248, "4455": 248, "484": 248, "5812": 248, "1719": 248, "485": 248, "1741": 248, "486": 248, "1595": 248, "0089": 248, "936": 248, "487": 248, "1667": 248, "3892": 248, "488": 248, "3824": 248, "0093": 248, "6528": 248, "489": 248, "1727": 248, "1435": 248, "059": 248, "490": 248, "0916": 248, "0018": 248, "4518": 248, "9310": 248, "0006": 248, "3553": 248, "492": 248, "22it": 248, "9972": 248, "4515": 248, "493": 248, "9493": 248, "8759": 248, "494": 248, "3700": 248, "495": 248, "0269": 248, "4107": 248, "496": 248, "6094": 248, "497": 248, "9116": 248, "1518": 248, "6022": 248, "0047": 248, "2026": 248, "499": 248, "8009": 248, "0007": 248, "1845": 248, "6948": 248, "501": 248, "0971": 248, "0387": 248, "951": 248, "2885": 248, "503": 248, "0894": 248, "2552": 248, "0191": 248, "505": 248, "8276": 248, "506": 248, "9520": 248, "0037": 248, "5835": 248, "0374": 248, "7556": 248, "508": 248, "0579": 248, "0399": 248, "9277": 248, "509": 248, "0094": 248, "7127": 248, "510": 248, "0119": 248, "0121": 248, "511": 248, "6013": 248, "0220": 248, "8064": 248, "2684": 248, "8179": 248, "513": 248, "4730": 248, "0046": 248, "5481": 248, "514": 248, "0234": 248, "4331": 248, "8143": 248, "2915": [248, 251], "9051": 248, "0353": 248, "9127": 248, "517": 248, "0527": 248, "6465": 248, "7579": 248, "2010": 248, "3927": 248, "5383": 248, "862": 248, "520": 248, "7386": 248, "1014": 248, "521": 248, "9163": 248, "4487": 248, "522": 248, "5626": 248, "523": 248, "2899": 248, "0113": 248, "524": 248, "6441": 248, "0044": 248, "3965": 248, "525": 248, "5001": 248, "2060": 248, "526": 248, "8905": 248, "4168": 248, "527": 248, "4458": 248, "0012": 248, "051": 248, "528": 248, "9446": 248, "3096": 248, "529": 248, "2399": 248, "1971": 248, "530": 248, "4471": 248, "531": 248, "1270": 248, "0023": 248, "532": 248, "533": 248, "6550": 248, "583": 248, "534": 248, "1092": 248, "0049": 248, "787": 248, "535": 248, "7641": 248, "6674": 248, "536": 248, "0083": 248, "6375": 248, "537": 248, "1713": 248, "4933": 248, "538": 248, "3557": 248, "3964": 248, "539": 248, "0040": 248, "4129": 248, "540": 248, "7999": 248, "3176": 248, "541": 248, "2613": 248, "4742": 248, "542": 248, "1826": 248, "934": 248, "543": 248, "3158": 248, "544": 248, "3686": 248, "4047": 248, "545": 248, "7943": 248, "0902": 248, "546": 248, "3889": 248, "547": 248, "4309": 248, "4762": 248, "1662": 248, "9526": 248, "549": 248, "2170": 248, "0520": 248, "4367": 248, "550": 248, "4584": 248, "6931": 248, "0306": 248, "752": 248, "552": 248, "9054": 248, "2062": [248, 252], "553": 248, "9523": 248, "4382": 248, "554": 248, "3534": 248, "0136": 248, "663": 248, "555": 248, "0279": 248, "0171": 248, "5679": 248, "4345": 248, "0145": 248, "4652": 248, "557": 248, "1205": 248, "0091": 248, "4838": 248, "0630": 248, "1721": 248, "3604": 248, "560": 248, "1695": 248, "561": 248, "6994": 248, "3646": 248, "0192": 248, "4547": 248, "564": 248, "2580": 248, "2356": 248, "1397": 248, "8400": 248, "7309": 248, "567": 248, "2400": 248, "0101": 248, "8539": 248, "1256": 248, "4851": 248, "0284": 248, "570": 248, "7214": 248, "2575": 248, "571": 248, "3996": 248, "572": 248, "2542": 248, "4089": 248, "573": 248, "5782": 248, "0071": 248, "7487": 248, "574": 248, "3665": 248, "0050": 248, "7797": 248, "575": 248, "5660": 248, "1355": 248, "932": 248, "576": 248, "8266": 248, "577": 248, "3782": 248, "743": [248, 251], "578": 248, "1228": 248, "2931": 248, "043": 248, "6242": 248, "580": 248, "7491": 248, "6910": 248, "581": 248, "2258": 248, "0262": 248, "582": 248, "2386": 248, "0249": 248, "816": 248, "2947": 248, "2122": 248, "584": 248, "0096": 248, "0124": 248, "585": 248, "2979": 248, "0156": 248, "4948": 248, "586": 248, "3268": 248, "0369": 248, "6409": 248, "4034": 248, "4395": 248, "588": 248, "8407": 248, "4432": 248, "589": 248, "0069": 248, "3628": 248, "590": 248, "3101": 248, "591": 248, "3404": 248, "2912": 248, "2964": 248, "2112": 248, "4832": 248, "594": 248, "8374": 248, "4346": 248, "7782": 248, "3826": 248, "7098": 248, "597": 248, "8646": 248, "0526": 248, "598": 248, "7452": 248, "9579": 248, "0991": 248, "889": 248, "600": 248, "0332": 248, "0199": 248, "601": 248, "602": 248, "7237": 248, "3591": 248, "603": 248, "3797": 248, "0022": 248, "6776": 248, "604": 248, "9337": 248, "605": 248, "6301": 248, "606": 248, "5972": 248, "5044": 248, "2131": 248, "664": 248, "609": 248, "1180": 248, "6142": 248, "610": 248, "5289": 248, "6693": 248, "611": 248, "4947": 248, "612": 248, "2196": 248, "4060": 248, "613": 248, "7377": 248, "3732": 248, "614": 248, "4574": 248, "0997": 248, "3581": 248, "615": 248, "9247": 248, "3012": 248, "616": 248, "3761": 248, "5136": 248, "617": 248, "4771": 248, "894": 248, "0177": 248, "3644": 248, "620": 248, "5914": 248, "1632": 248, "621": 248, "4353": 248, "7637": 248, "622": 248, "7577": 248, "1609": 248, "809": 248, "623": 248, "8873": 248, "624": 248, "6568": 248, "5234": 248, "subject": 248, "saw": 248, "879": [248, 250], "fine": 249, "semat": 249, "r3mtransform": 249, "sake": 249, "embodi": 249, "ai": 249, "env_transform": [249, 252], "s3": 249, "amazonaw": 249, "r3m_50": 249, "374m": 249, "8m": 249, "140mb": 249, "122mb": 249, "9m": 249, "8mb": 249, "6m": 249, "6mb": 249, "5m": 249, "4mb": 249, "3m": 249, "7m": 249, "9mb": 249, "115m": 249, "130m": 249, "105mb": 249, "141m": 249, "7mb": 249, "150m": 249, "164m": 249, "180m": 249, "102mb": 249, "195m": 249, "114mb": 249, "206m": 249, "216m": 249, "229m": 249, "1mb": 249, "246m": 249, "261m": 249, "104mb": 249, "273m": 249, "2mb": 249, "283m": 249, "5mb": 249, "295m": 249, "311m": 249, "3mb": 249, "324m": 249, "332m": 249, "342m": 249, "350m": 249, "359m": 249, "365m": 249, "373m": 249, "0mb": 249, "2048": 249, "wiser": 249, "again": [249, 252], "conclud": 249, "_storag": 249, "014": [249, 250], "3462": 249, "pretrained_model": [249, 250], "973": 250, "torchrl_demo": [250, 251], "698": [250, 251], "3690": [250, 251], "torchrl_env": [250, 252], "647": [250, 252], "3461": 250, "demo": 251, "icml": 251, "dai": 251, "vmoen": 251, "fb": 251, "question": 251, "team": 251, "decid": 251, "invest": 251, "platform": 251, "media": 251, "truli": 251, "predominantli": 251, "tensordict1": 251, "tensordict2": 251, "tensordict_sampl": 251, "_sampler": 251, "_sum_tre": 251, "modulenotfounderror": 251, "06984968483448029": 251, "28791671991348267": 251, "gym_env": 251, "noopresetenv": [251, 252], "lazyconv2d": 251, "6400": 251, "backbone_modul": 251, "params_expand": 251, "tensordict_exp": 251, "base_modul": 251, "0137": 251, "1524": 251, "0641": 251, "copybackward": 251, "1335": 251, "9833": 251, "3497": 251, "6889": 251, "6433": 251, "clampbackward1": 251, "1131": 251, "1761": 251, "3425": 251, "2665": 251, "6207": 251, "1441": 251, "2375": 251, "1372": 251, "3810": 251, "meanbackward1": 251, "tensordicts_prealloc": 251, "tensordicts_stack": 251, "tensordict_rollout": [251, 252], "disclaim": 251, "concatmodul": 251, "loss_td": 251, "1501": 251, "_call_impl": 251, "forward_cal": 251, "pred_val": 251, "_loss_valu": 251, "_contextlib": 251, "decorate_context": 251, "3367": 251, "_default_get": 251, "1012": 251, "keyerror": 251, "year": 251, "roadmap": 251, "compris": 251, "contributor": 251, "curiou": 251, "feedback": 251, "nascent": 251, "supervis": 252, "unsupervis": 252, "rom": 252, "licens": 252, "pygam": 252, "unifi": 252, "insid": 252, "_build_env": 252, "sphinx_gallery_start_ignor": 252, "warn": 252, "filterwarn": 252, "sphinx_gallery_end_ignor": 252, "adventur": 252, "ram": 252, "airraid": 252, "alien": 252, "amidar": 252, "assault": 252, "7671": 252, "exectut": 252, "reproduct": 252, "tensordict_tprim": 252, "quickli": 252, "imshow": 252, "axesimag": 252, "0x7f4a23d2b340": 252, "inconsist": 252, "swingup": 252, "swingup_spars": 252, "ball_in_cup": 252, "catch": 252, "balance_spars": 252, "three_pol": 252, "two_pol": 252, "finger": 252, "turn_easi": 252, "turn_hard": 252, "fish": 252, "swim": 252, "hopper": 252, "hop": 252, "run_pure_st": 252, "bring_bal": 252, "bring_peg": 252, "insert_bal": 252, "insert_peg": 252, "point_mass": 252, "reacher": 252, "swimmer": 252, "swimmer6": 252, "swimmer15": 252, "walker": 252, "dog": 252, "trot": 252, "humanoid_cmu": 252, "lqr": 252, "lqr_2_1": 252, "lqr_6_2": 252, "quadrup": 252, "escap": 252, "stacker": 252, "stack_2": 252, "stack_4": 252, "wrapper1": 252, "wrapper2": 252, "obviou": 252, "truth": 252, "env0": 252, "env_transformed_bi": 252, "stanc": 252, "transformeddistribut": 252, "base_dist": 252, "concat": 252, "mofidi": 252, "transformedenviron": 252, "moderet": 252, "computation": 252, "legitim": 252, "incom": 252, "amongst": 252, "wor": 252, "convention": 252, "scope": 252, "markovian": 252, "3288080526": 252, "sometim": 252, "constain": 252, "uuid1": 252, "foo": 252, "bar_": 252, "get_someth": 252, "bar_99e109fa": 252, "ca35": 252, "11ed": 252, "80cb": 252, "0242ac120002": 252, "aargh": 252, "ahead": 252, "foo_list": 252, "vec_env": 252, "_dispatch_caller_parallel": 252, "0x7f494abe3ee0": 252, "bar_a17667c8": 252, "bb21": 252, "bar_a176ceb6": 252, "aa8": 252, "bar_a1759f96": 252, "ba9b": 252, "parallen": 252, "carefulli": 252, "commonli": 252, "approxim": 252, "particularili": 252, "evolv": 252, "steadi": 252, "approx": 252, "4157": 252, "1109": 252, "1601": 252, "2431": 252, "2528": 252, "_extra_st": 252, "observation_ssq": 252, "observation_sum": 252, "0740": 252, "0668": 252, "3160": 252, "1404": 252, "2152": 252, "1332": 252, "dispach": 252, "absor": 252}, "objects": {"torchrl._utils": [[11, 0, 1, "", "implement_for"]], "torchrl.collectors.collectors": [[12, 0, 1, "", "DataCollectorBase"], [13, 0, 1, "", "MultiSyncDataCollector"], [14, 0, 1, "", "MultiaSyncDataCollector"], [15, 0, 1, "", "RandomPolicy"], [16, 0, 1, "", "SyncDataCollector"], [17, 0, 1, "", "aSyncDataCollector"]], "torchrl.collectors.collectors.DataCollectorBase": [[12, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiSyncDataCollector": [[13, 1, 1, "", "load_state_dict"], [13, 1, 1, "", "reset"], [13, 1, 1, "", "set_seed"], [13, 1, 1, "", "shutdown"], [13, 1, 1, "", "state_dict"], [13, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiaSyncDataCollector": [[14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "reset"], [14, 1, 1, "", "set_seed"], [14, 1, 1, "", "shutdown"], [14, 1, 1, "", "state_dict"], [14, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.SyncDataCollector": [[16, 1, 1, "", "iterator"], [16, 1, 1, "", "load_state_dict"], [16, 1, 1, "", "reset"], [16, 1, 1, "", "rollout"], [16, 1, 1, "", "set_seed"], [16, 1, 1, "", "shutdown"], [16, 1, 1, "", "state_dict"], [16, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.aSyncDataCollector": [[17, 1, 1, "", "load_state_dict"], [17, 1, 1, "", "reset"], [17, 1, 1, "", "set_seed"], [17, 1, 1, "", "shutdown"], [17, 1, 1, "", "state_dict"], [17, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed": [[18, 0, 1, "", "DistributedDataCollector"], [19, 0, 1, "", "DistributedSyncDataCollector"], [20, 0, 1, "", "RPCDataCollector"], [21, 0, 1, "", "submitit_delayed_launcher"]], "torchrl.collectors.distributed.DistributedDataCollector": [[18, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.DistributedSyncDataCollector": [[19, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.distributed.RPCDataCollector": [[20, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.utils": [[22, 2, 1, "", "split_trajectories"]], "torchrl.data": [[23, 0, 1, "", "BinaryDiscreteTensorSpec"], [24, 0, 1, "", "BoundedTensorSpec"], [25, 0, 1, "", "CompositeSpec"], [26, 0, 1, "", "DiscreteTensorSpec"], [27, 0, 1, "", "MultiDiscreteTensorSpec"], [28, 0, 1, "", "MultiOneHotDiscreteTensorSpec"], [29, 0, 1, "", "OneHotDiscreteTensorSpec"], [30, 0, 1, "", "PrioritizedReplayBuffer"], [31, 0, 1, "", "ReplayBuffer"], [32, 0, 1, "", "TensorDictPrioritizedReplayBuffer"], [33, 0, 1, "", "TensorDictReplayBuffer"], [34, 0, 1, "", "TensorSpec"], [35, 0, 1, "", "UnboundedContinuousTensorSpec"], [36, 0, 1, "", "UnboundedDiscreteTensorSpec"]], "torchrl.data.BinaryDiscreteTensorSpec": [[23, 1, 1, "", "assert_is_in"], [23, 1, 1, "", "encode"], [23, 1, 1, "", "expand"], [23, 1, 1, "", "implements_for_spec"], [23, 1, 1, "", "index"], [23, 1, 1, "", "is_in"], [23, 1, 1, "", "project"], [23, 1, 1, "", "rand"], [23, 1, 1, "", "squeeze"], [23, 1, 1, "", "to_numpy"], [23, 1, 1, "", "to_one_hot"], [23, 1, 1, "", "to_one_hot_spec"], [23, 1, 1, "", "type_check"], [23, 1, 1, "", "zero"]], "torchrl.data.BoundedTensorSpec": [[24, 1, 1, "", "assert_is_in"], [24, 1, 1, "", "encode"], [24, 1, 1, "", "expand"], [24, 1, 1, "", "implements_for_spec"], [24, 1, 1, "", "index"], [24, 1, 1, "", "is_in"], [24, 1, 1, "", "project"], [24, 1, 1, "", "rand"], [24, 1, 1, "", "squeeze"], [24, 1, 1, "", "to_numpy"], [24, 1, 1, "", "type_check"], [24, 1, 1, "", "zero"]], "torchrl.data.CompositeSpec": [[25, 1, 1, "", "assert_is_in"], [25, 1, 1, "", "encode"], [25, 1, 1, "", "expand"], [25, 1, 1, "", "implements_for_spec"], [25, 1, 1, "", "index"], [25, 1, 1, "", "is_in"], [25, 1, 1, "", "items"], [25, 1, 1, "", "keys"], [25, 1, 1, "", "project"], [25, 1, 1, "", "rand"], [25, 1, 1, "", "squeeze"], [25, 1, 1, "", "to_numpy"], [25, 1, 1, "", "type_check"], [25, 1, 1, "", "values"], [25, 1, 1, "", "zero"]], "torchrl.data.DiscreteTensorSpec": [[26, 1, 1, "", "assert_is_in"], [26, 1, 1, "", "encode"], [26, 1, 1, "", "expand"], [26, 1, 1, "", "implements_for_spec"], [26, 1, 1, "", "index"], [26, 1, 1, "", "is_in"], [26, 1, 1, "", "project"], [26, 1, 1, "", "rand"], [26, 1, 1, "", "squeeze"], [26, 1, 1, "", "to_numpy"], [26, 1, 1, "", "to_one_hot"], [26, 1, 1, "", "to_one_hot_spec"], [26, 1, 1, "", "type_check"], [26, 1, 1, "", "zero"]], "torchrl.data.MultiDiscreteTensorSpec": [[27, 1, 1, "", "assert_is_in"], [27, 1, 1, "", "encode"], [27, 1, 1, "", "expand"], [27, 1, 1, "", "implements_for_spec"], [27, 1, 1, "", "index"], [27, 1, 1, "", "is_in"], [27, 1, 1, "", "project"], [27, 1, 1, "", "rand"], [27, 1, 1, "", "squeeze"], [27, 1, 1, "", "to_numpy"], [27, 1, 1, "", "to_one_hot"], [27, 1, 1, "", "to_one_hot_spec"], [27, 1, 1, "", "type_check"], [27, 1, 1, "", "zero"]], "torchrl.data.MultiOneHotDiscreteTensorSpec": [[28, 1, 1, "", "assert_is_in"], [28, 1, 1, "", "encode"], [28, 1, 1, "", "expand"], [28, 1, 1, "", "implements_for_spec"], [28, 1, 1, "", "index"], [28, 1, 1, "", "is_in"], [28, 1, 1, "", "project"], [28, 1, 1, "", "rand"], [28, 1, 1, "", "squeeze"], [28, 1, 1, "", "to_categorical"], [28, 1, 1, "", "to_categorical_spec"], [28, 1, 1, "", "to_numpy"], [28, 1, 1, "", "type_check"], [28, 1, 1, "", "zero"]], "torchrl.data.OneHotDiscreteTensorSpec": [[29, 1, 1, "", "assert_is_in"], [29, 1, 1, "", "encode"], [29, 1, 1, "", "expand"], [29, 1, 1, "", "implements_for_spec"], [29, 1, 1, "", "index"], [29, 1, 1, "", "is_in"], [29, 1, 1, "", "project"], [29, 1, 1, "", "rand"], [29, 1, 1, "", "squeeze"], [29, 1, 1, "", "to_categorical"], [29, 1, 1, "", "to_categorical_spec"], [29, 1, 1, "", "to_numpy"], [29, 1, 1, "", "type_check"], [29, 1, 1, "", "zero"]], "torchrl.data.PrioritizedReplayBuffer": [[30, 1, 1, "", "add"], [30, 1, 1, "", "append_transform"], [30, 1, 1, "", "extend"], [30, 1, 1, "", "insert_transform"], [30, 1, 1, "", "sample"]], "torchrl.data.ReplayBuffer": [[31, 1, 1, "", "add"], [31, 1, 1, "", "append_transform"], [31, 1, 1, "", "extend"], [31, 1, 1, "", "insert_transform"], [31, 1, 1, "", "sample"]], "torchrl.data.TensorDictPrioritizedReplayBuffer": [[32, 1, 1, "", "add"], [32, 1, 1, "", "append_transform"], [32, 1, 1, "", "extend"], [32, 1, 1, "", "insert_transform"], [32, 1, 1, "", "sample"]], "torchrl.data.TensorDictReplayBuffer": [[33, 1, 1, "", "add"], [33, 1, 1, "", "append_transform"], [33, 1, 1, "", "extend"], [33, 1, 1, "", "insert_transform"], [33, 1, 1, "", "sample"]], "torchrl.data.TensorSpec": [[34, 1, 1, "", "assert_is_in"], [34, 1, 1, "", "encode"], [34, 1, 1, "", "expand"], [34, 1, 1, "", "implements_for_spec"], [34, 1, 1, "", "index"], [34, 1, 1, "", "is_in"], [34, 1, 1, "", "project"], [34, 1, 1, "", "rand"], [34, 1, 1, "", "squeeze"], [34, 1, 1, "", "to_numpy"], [34, 1, 1, "", "type_check"], [34, 1, 1, "", "zero"]], "torchrl.data.UnboundedContinuousTensorSpec": [[35, 1, 1, "", "assert_is_in"], [35, 1, 1, "", "encode"], [35, 1, 1, "", "expand"], [35, 1, 1, "", "implements_for_spec"], [35, 1, 1, "", "index"], [35, 1, 1, "", "is_in"], [35, 1, 1, "", "project"], [35, 1, 1, "", "rand"], [35, 1, 1, "", "squeeze"], [35, 1, 1, "", "to_numpy"], [35, 1, 1, "", "type_check"], [35, 1, 1, "", "zero"]], "torchrl.data.UnboundedDiscreteTensorSpec": [[36, 1, 1, "", "assert_is_in"], [36, 1, 1, "", "encode"], [36, 1, 1, "", "expand"], [36, 1, 1, "", "implements_for_spec"], [36, 1, 1, "", "index"], [36, 1, 1, "", "is_in"], [36, 1, 1, "", "project"], [36, 1, 1, "", "rand"], [36, 1, 1, "", "squeeze"], [36, 1, 1, "", "to_numpy"], [36, 1, 1, "", "type_check"], [36, 1, 1, "", "zero"]], "torchrl.data.datasets": [[37, 0, 1, "", "D4RLExperienceReplay"]], "torchrl.data.datasets.D4RLExperienceReplay": [[37, 1, 1, "", "add"], [37, 1, 1, "", "append_transform"], [37, 1, 1, "", "extend"], [37, 1, 1, "", "insert_transform"], [37, 1, 1, "", "sample"]], "torchrl.data.replay_buffers": [[38, 0, 1, "", "LazyMemmapStorage"], [39, 0, 1, "", "LazyTensorStorage"], [40, 0, 1, "", "ListStorage"], [41, 0, 1, "", "PrioritizedSampler"], [42, 0, 1, "", "RandomSampler"], [43, 0, 1, "", "RoundRobinWriter"], [44, 0, 1, "", "Sampler"], [45, 0, 1, "", "SamplerWithoutReplacement"], [46, 0, 1, "", "Storage"], [47, 0, 1, "", "Writer"]], "torchrl.data.replay_buffers.LazyMemmapStorage": [[38, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.LazyTensorStorage": [[39, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.ListStorage": [[40, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.PrioritizedSampler": [[41, 1, 1, "", "update_priority"]], "torchrl.data.replay_buffers.RoundRobinWriter": [[43, 1, 1, "", "add"], [43, 1, 1, "", "extend"]], "torchrl.data.replay_buffers.Storage": [[46, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.Writer": [[47, 1, 1, "", "add"], [47, 1, 1, "", "extend"]], "torchrl.envs": [[48, 0, 1, "", "EnvBase"], [49, 0, 1, "", "EnvCreator"], [50, 0, 1, "", "EnvMetaData"], [51, 0, 1, "", "GymLikeEnv"], [52, 2, 1, "", "ModelBasedEnvBase"], [53, 0, 1, "", "MultiThreadedEnv"], [54, 0, 1, "", "ParallelEnv"], [55, 0, 1, "", "SerialEnv"], [52, 1, 1, "", "rand_step"], [52, 1, 1, "", "reset"], [52, 1, 1, "", "rollout"], [52, 1, 1, "", "set_seed"], [52, 1, 1, "", "step"]], "torchrl.envs.EnvBase": [[48, 1, 1, "", "add_module"], [48, 1, 1, "", "apply"], [48, 3, 1, "", "batch_locked"], [48, 1, 1, "", "bfloat16"], [48, 1, 1, "", "buffers"], [48, 1, 1, "", "children"], [48, 1, 1, "", "cpu"], [48, 1, 1, "", "cuda"], [48, 1, 1, "", "double"], [48, 1, 1, "", "eval"], [48, 1, 1, "", "extra_repr"], [48, 1, 1, "", "fake_tensordict"], [48, 1, 1, "", "float"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "get_buffer"], [48, 1, 1, "", "get_extra_state"], [48, 1, 1, "", "get_parameter"], [48, 1, 1, "", "get_submodule"], [48, 1, 1, "", "half"], [48, 1, 1, "", "ipu"], [48, 1, 1, "", "load_state_dict"], [48, 1, 1, "", "modules"], [48, 1, 1, "", "named_buffers"], [48, 1, 1, "", "named_children"], [48, 1, 1, "", "named_modules"], [48, 1, 1, "", "named_parameters"], [48, 1, 1, "", "parameters"], [48, 1, 1, "", "rand_action"], [48, 1, 1, "id0", "rand_step"], [48, 1, 1, "", "register_backward_hook"], [48, 1, 1, "", "register_buffer"], [48, 1, 1, "", "register_forward_hook"], [48, 1, 1, "", "register_forward_pre_hook"], [48, 1, 1, "", "register_full_backward_hook"], [48, 1, 1, "", "register_full_backward_pre_hook"], [48, 1, 1, "", "register_load_state_dict_post_hook"], [48, 1, 1, "", "register_module"], [48, 1, 1, "", "register_parameter"], [48, 1, 1, "", "register_state_dict_pre_hook"], [48, 1, 1, "", "requires_grad_"], [48, 1, 1, "id1", "reset"], [48, 1, 1, "id2", "rollout"], [48, 1, 1, "", "set_extra_state"], [48, 1, 1, "id3", "set_seed"], [48, 1, 1, "", "share_memory"], [48, 3, 1, "", "specs"], [48, 1, 1, "", "state_dict"], [48, 1, 1, "id4", "step"], [48, 1, 1, "", "to"], [48, 1, 1, "", "to_empty"], [48, 1, 1, "", "train"], [48, 1, 1, "", "type"], [48, 1, 1, "", "xpu"], [48, 1, 1, "", "zero_grad"]], "torchrl.envs.GymLikeEnv": [[51, 1, 1, "", "add_module"], [51, 1, 1, "", "apply"], [51, 3, 1, "", "batch_locked"], [51, 1, 1, "", "bfloat16"], [51, 1, 1, "", "buffers"], [51, 1, 1, "", "children"], [51, 1, 1, "", "close"], [51, 1, 1, "", "cpu"], [51, 1, 1, "", "cuda"], [51, 1, 1, "", "double"], [51, 1, 1, "", "eval"], [51, 1, 1, "", "extra_repr"], [51, 1, 1, "", "fake_tensordict"], [51, 1, 1, "", "float"], [51, 1, 1, "", "forward"], [51, 1, 1, "", "get_buffer"], [51, 1, 1, "", "get_extra_state"], [51, 1, 1, "", "get_parameter"], [51, 1, 1, "", "get_submodule"], [51, 1, 1, "", "half"], [51, 1, 1, "", "ipu"], [51, 1, 1, "", "load_state_dict"], [51, 1, 1, "", "modules"], [51, 1, 1, "", "named_buffers"], [51, 1, 1, "", "named_children"], [51, 1, 1, "", "named_modules"], [51, 1, 1, "", "named_parameters"], [51, 1, 1, "", "parameters"], [51, 1, 1, "", "rand_action"], [51, 1, 1, "", "rand_step"], [51, 1, 1, "", "read_action"], [51, 1, 1, "", "read_done"], [51, 1, 1, "", "read_obs"], [51, 1, 1, "", "read_reward"], [51, 1, 1, "", "register_backward_hook"], [51, 1, 1, "", "register_buffer"], [51, 1, 1, "", "register_forward_hook"], [51, 1, 1, "", "register_forward_pre_hook"], [51, 1, 1, "", "register_full_backward_hook"], [51, 1, 1, "", "register_full_backward_pre_hook"], [51, 1, 1, "", "register_load_state_dict_post_hook"], [51, 1, 1, "", "register_module"], [51, 1, 1, "", "register_parameter"], [51, 1, 1, "", "register_state_dict_pre_hook"], [51, 1, 1, "", "requires_grad_"], [51, 1, 1, "", "reset"], [51, 1, 1, "", "rollout"], [51, 1, 1, "", "set_extra_state"], [51, 1, 1, "", "set_info_dict_reader"], [51, 1, 1, "", "set_seed"], [51, 1, 1, "", "share_memory"], [51, 3, 1, "", "specs"], [51, 1, 1, "", "state_dict"], [51, 1, 1, "", "step"], [51, 1, 1, "", "to"], [51, 1, 1, "", "to_empty"], [51, 1, 1, "", "train"], [51, 1, 1, "", "type"], [51, 1, 1, "", "xpu"], [51, 1, 1, "", "zero_grad"]], "torchrl.envs.MultiThreadedEnv": [[53, 1, 1, "", "add_module"], [53, 1, 1, "", "apply"], [53, 3, 1, "", "batch_locked"], [53, 1, 1, "", "bfloat16"], [53, 1, 1, "", "buffers"], [53, 1, 1, "", "children"], [53, 1, 1, "", "close"], [53, 1, 1, "", "cpu"], [53, 1, 1, "", "cuda"], [53, 1, 1, "", "double"], [53, 1, 1, "", "eval"], [53, 1, 1, "", "extra_repr"], [53, 1, 1, "", "fake_tensordict"], [53, 1, 1, "", "float"], [53, 1, 1, "", "forward"], [53, 1, 1, "", "get_buffer"], [53, 1, 1, "", "get_extra_state"], [53, 1, 1, "", "get_parameter"], [53, 1, 1, "", "get_submodule"], [53, 1, 1, "", "half"], [53, 1, 1, "", "ipu"], [53, 1, 1, "", "load_state_dict"], [53, 1, 1, "", "modules"], [53, 1, 1, "", "named_buffers"], [53, 1, 1, "", "named_children"], [53, 1, 1, "", "named_modules"], [53, 1, 1, "", "named_parameters"], [53, 1, 1, "", "parameters"], [53, 1, 1, "", "rand_action"], [53, 1, 1, "", "rand_step"], [53, 1, 1, "", "register_backward_hook"], [53, 1, 1, "", "register_buffer"], [53, 1, 1, "", "register_forward_hook"], [53, 1, 1, "", "register_forward_pre_hook"], [53, 1, 1, "", "register_full_backward_hook"], [53, 1, 1, "", "register_full_backward_pre_hook"], [53, 1, 1, "", "register_load_state_dict_post_hook"], [53, 1, 1, "", "register_module"], [53, 1, 1, "", "register_parameter"], [53, 1, 1, "", "register_state_dict_pre_hook"], [53, 1, 1, "", "requires_grad_"], [53, 1, 1, "", "reset"], [53, 1, 1, "", "rollout"], [53, 1, 1, "", "set_extra_state"], [53, 1, 1, "", "set_seed"], [53, 1, 1, "", "share_memory"], [53, 3, 1, "", "specs"], [53, 1, 1, "", "state_dict"], [53, 1, 1, "", "step"], [53, 1, 1, "", "to"], [53, 1, 1, "", "to_empty"], [53, 1, 1, "", "train"], [53, 1, 1, "", "type"], [53, 1, 1, "", "xpu"], [53, 1, 1, "", "zero_grad"]], "torchrl.envs.ParallelEnv": [[54, 1, 1, "", "add_module"], [54, 1, 1, "", "apply"], [54, 3, 1, "", "batch_locked"], [54, 1, 1, "", "bfloat16"], [54, 1, 1, "", "buffers"], [54, 1, 1, "", "children"], [54, 1, 1, "", "cpu"], [54, 1, 1, "", "cuda"], [54, 1, 1, "", "double"], [54, 1, 1, "", "eval"], [54, 1, 1, "", "extra_repr"], [54, 1, 1, "", "fake_tensordict"], [54, 1, 1, "", "float"], [54, 1, 1, "", "forward"], [54, 1, 1, "", "get_buffer"], [54, 1, 1, "", "get_extra_state"], [54, 1, 1, "", "get_parameter"], [54, 1, 1, "", "get_submodule"], [54, 1, 1, "", "half"], [54, 1, 1, "", "ipu"], [54, 1, 1, "", "load_state_dict"], [54, 1, 1, "", "modules"], [54, 1, 1, "", "named_buffers"], [54, 1, 1, "", "named_children"], [54, 1, 1, "", "named_modules"], [54, 1, 1, "", "named_parameters"], [54, 1, 1, "", "parameters"], [54, 1, 1, "", "rand_action"], [54, 1, 1, "", "rand_step"], [54, 1, 1, "", "register_backward_hook"], [54, 1, 1, "", "register_buffer"], [54, 1, 1, "", "register_forward_hook"], [54, 1, 1, "", "register_forward_pre_hook"], [54, 1, 1, "", "register_full_backward_hook"], [54, 1, 1, "", "register_full_backward_pre_hook"], [54, 1, 1, "", "register_load_state_dict_post_hook"], [54, 1, 1, "", "register_module"], [54, 1, 1, "", "register_parameter"], [54, 1, 1, "", "register_state_dict_pre_hook"], [54, 1, 1, "", "requires_grad_"], [54, 1, 1, "", "reset"], [54, 1, 1, "", "rollout"], [54, 1, 1, "", "set_extra_state"], [54, 1, 1, "", "set_seed"], [54, 1, 1, "", "share_memory"], [54, 3, 1, "", "specs"], [54, 1, 1, "", "state_dict"], [54, 1, 1, "", "step"], [54, 1, 1, "", "to"], [54, 1, 1, "", "to_empty"], [54, 1, 1, "", "train"], [54, 1, 1, "", "type"], [54, 1, 1, "", "update_kwargs"], [54, 1, 1, "", "xpu"], [54, 1, 1, "", "zero_grad"]], "torchrl.envs.SerialEnv": [[55, 1, 1, "", "add_module"], [55, 1, 1, "", "apply"], [55, 3, 1, "", "batch_locked"], [55, 1, 1, "", "bfloat16"], [55, 1, 1, "", "buffers"], [55, 1, 1, "", "children"], [55, 1, 1, "", "cpu"], [55, 1, 1, "", "cuda"], [55, 1, 1, "", "double"], [55, 1, 1, "", "eval"], [55, 1, 1, "", "extra_repr"], [55, 1, 1, "", "fake_tensordict"], [55, 1, 1, "", "float"], [55, 1, 1, "", "forward"], [55, 1, 1, "", "get_buffer"], [55, 1, 1, "", "get_extra_state"], [55, 1, 1, "", "get_parameter"], [55, 1, 1, "", "get_submodule"], [55, 1, 1, "", "half"], [55, 1, 1, "", "ipu"], [55, 1, 1, "", "load_state_dict"], [55, 1, 1, "", "modules"], [55, 1, 1, "", "named_buffers"], [55, 1, 1, "", "named_children"], [55, 1, 1, "", "named_modules"], [55, 1, 1, "", "named_parameters"], [55, 1, 1, "", "parameters"], [55, 1, 1, "", "rand_action"], [55, 1, 1, "", "rand_step"], [55, 1, 1, "", "register_backward_hook"], [55, 1, 1, "", "register_buffer"], [55, 1, 1, "", "register_forward_hook"], [55, 1, 1, "", "register_forward_pre_hook"], [55, 1, 1, "", "register_full_backward_hook"], [55, 1, 1, "", "register_full_backward_pre_hook"], [55, 1, 1, "", "register_load_state_dict_post_hook"], [55, 1, 1, "", "register_module"], [55, 1, 1, "", "register_parameter"], [55, 1, 1, "", "register_state_dict_pre_hook"], [55, 1, 1, "", "requires_grad_"], [55, 1, 1, "", "reset"], [55, 1, 1, "", "rollout"], [55, 1, 1, "", "set_extra_state"], [55, 1, 1, "", "set_seed"], [55, 1, 1, "", "share_memory"], [55, 3, 1, "", "specs"], [55, 1, 1, "", "state_dict"], [55, 1, 1, "", "step"], [55, 1, 1, "", "to"], [55, 1, 1, "", "to_empty"], [55, 1, 1, "", "train"], [55, 1, 1, "", "type"], [55, 1, 1, "", "update_kwargs"], [55, 1, 1, "", "xpu"], [55, 1, 1, "", "zero_grad"]], "torchrl.envs.libs.brax": [[56, 2, 1, "", "BraxEnv"], [57, 2, 1, "", "BraxWrapper"]], "torchrl.envs.libs.dm_control": [[58, 2, 1, "", "DMControlEnv"], [59, 2, 1, "", "DMControlWrapper"]], "torchrl.envs.libs.gym": [[60, 2, 1, "", "GymEnv"], [61, 2, 1, "", "GymWrapper"]], "torchrl.envs.libs.habitat": [[62, 2, 1, "", "HabitatEnv"]], "torchrl.envs.libs.jumanji": [[63, 2, 1, "", "JumanjiEnv"], [64, 2, 1, "", "JumanjiWrapper"]], "torchrl.envs.libs.vmas": [[65, 2, 1, "", "VmasEnv"], [66, 2, 1, "", "VmasWrapper"]], "torchrl.envs.model_based.dreamer": [[67, 2, 1, "", "DreamerEnv"]], "torchrl.envs.transforms": [[68, 0, 1, "", "BinarizeReward"], [69, 0, 1, "", "CatFrames"], [70, 0, 1, "", "CatTensors"], [71, 0, 1, "", "CenterCrop"], [72, 0, 1, "", "Compose"], [73, 0, 1, "", "DiscreteActionProjection"], [74, 0, 1, "", "DoubleToFloat"], [75, 0, 1, "", "ExcludeTransform"], [76, 0, 1, "", "FiniteTensorDictCheck"], [77, 0, 1, "", "FlattenObservation"], [78, 0, 1, "", "FrameSkipTransform"], [79, 0, 1, "", "GrayScale"], [80, 0, 1, "", "InitTracker"], [81, 0, 1, "", "NoopResetEnv"], [82, 0, 1, "", "ObservationNorm"], [83, 0, 1, "", "ObservationTransform"], [84, 0, 1, "", "PinMemoryTransform"], [85, 0, 1, "", "R3MTransform"], [86, 0, 1, "", "RandomCropTensorDict"], [87, 0, 1, "", "RenameTransform"], [88, 0, 1, "", "Resize"], [89, 0, 1, "", "RewardClipping"], [90, 0, 1, "", "RewardScaling"], [91, 0, 1, "", "RewardSum"], [92, 0, 1, "", "SelectTransform"], [93, 0, 1, "", "SqueezeTransform"], [94, 0, 1, "", "StepCounter"], [95, 0, 1, "", "TensorDictPrimer"], [96, 0, 1, "", "TimeMaxPool"], [97, 0, 1, "", "ToTensorImage"], [98, 0, 1, "", "Transform"], [99, 0, 1, "", "TransformedEnv"], [100, 0, 1, "", "UnsqueezeTransform"], [101, 0, 1, "", "VIPRewardTransform"], [102, 0, 1, "", "VIPTransform"], [103, 0, 1, "", "VecNorm"], [104, 0, 1, "", "gSDENoise"]], "torchrl.envs.transforms.BinarizeReward": [[68, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.CatFrames": [[69, 1, 1, "", "forward"], [69, 1, 1, "", "reset"], [69, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CatTensors": [[70, 1, 1, "", "forward"], [70, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CenterCrop": [[71, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Compose": [[72, 1, 1, "", "forward"], [72, 1, 1, "", "reset"], [72, 1, 1, "", "to"], [72, 1, 1, "", "transform_input_spec"], [72, 1, 1, "", "transform_observation_spec"], [72, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.DiscreteActionProjection": [[73, 1, 1, "", "transform_input_spec"]], "torchrl.envs.transforms.DoubleToFloat": [[74, 1, 1, "", "transform_input_spec"], [74, 1, 1, "", "transform_observation_spec"], [74, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.ExcludeTransform": [[75, 1, 1, "", "forward"], [75, 1, 1, "", "reset"], [75, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FiniteTensorDictCheck": [[76, 1, 1, "", "forward"]], "torchrl.envs.transforms.FlattenObservation": [[77, 1, 1, "", "forward"], [77, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FrameSkipTransform": [[78, 1, 1, "", "forward"]], "torchrl.envs.transforms.GrayScale": [[79, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.InitTracker": [[80, 1, 1, "", "forward"], [80, 1, 1, "", "reset"], [80, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.NoopResetEnv": [[81, 1, 1, "", "reset"]], "torchrl.envs.transforms.ObservationNorm": [[82, 1, 1, "", "init_stats"], [82, 1, 1, "", "transform_input_spec"], [82, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.PinMemoryTransform": [[84, 1, 1, "", "forward"]], "torchrl.envs.transforms.R3MTransform": [[85, 1, 1, "", "to"]], "torchrl.envs.transforms.RandomCropTensorDict": [[86, 1, 1, "", "forward"]], "torchrl.envs.transforms.RenameTransform": [[87, 1, 1, "", "forward"], [87, 1, 1, "", "transform_input_spec"], [87, 1, 1, "", "transform_output_spec"]], "torchrl.envs.transforms.Resize": [[88, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.RewardClipping": [[89, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardScaling": [[90, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardSum": [[91, 1, 1, "", "forward"], [91, 1, 1, "", "reset"], [91, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.SelectTransform": [[92, 1, 1, "", "forward"], [92, 1, 1, "", "reset"], [92, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.StepCounter": [[94, 1, 1, "", "forward"], [94, 1, 1, "", "reset"], [94, 1, 1, "", "transform_input_spec"], [94, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TensorDictPrimer": [[95, 1, 1, "", "forward"], [95, 1, 1, "", "reset"], [95, 1, 1, "", "to"], [95, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TimeMaxPool": [[96, 1, 1, "", "forward"], [96, 1, 1, "", "reset"], [96, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.ToTensorImage": [[97, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Transform": [[98, 1, 1, "", "forward"], [98, 1, 1, "", "reset"], [98, 1, 1, "", "transform_done_spec"], [98, 1, 1, "", "transform_input_spec"], [98, 1, 1, "", "transform_observation_spec"], [98, 1, 1, "", "transform_output_spec"], [98, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.TransformedEnv": [[99, 3, 1, "", "action_spec"], [99, 3, 1, "", "batch_locked"], [99, 3, 1, "", "done_spec"], [99, 1, 1, "", "eval"], [99, 3, 1, "", "input_spec"], [99, 1, 1, "", "load_state_dict"], [99, 3, 1, "", "observation_spec"], [99, 3, 1, "", "output_spec"], [99, 3, 1, "", "reward_spec"], [99, 1, 1, "", "set_seed"], [99, 1, 1, "", "state_dict"], [99, 1, 1, "", "to"], [99, 1, 1, "", "train"]], "torchrl.envs.transforms.UnsqueezeTransform": [[100, 1, 1, "", "transform_input_spec"], [100, 1, 1, "", "transform_observation_spec"], [100, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.VIPRewardTransform": [[101, 1, 1, "", "forward"], [101, 1, 1, "", "reset"]], "torchrl.envs.transforms.VIPTransform": [[102, 1, 1, "", "to"]], "torchrl.envs.transforms.VecNorm": [[103, 1, 1, "", "build_td_for_shared_vecnorm"], [103, 1, 1, "", "forward"], [103, 1, 1, "", "get_extra_state"], [103, 1, 1, "", "set_extra_state"], [103, 1, 1, "", "to_observation_norm"]], "torchrl.envs.utils": [[105, 2, 1, "", "check_env_specs"], [106, 2, 1, "", "exploration_mode"], [107, 2, 1, "", "get_available_libraries"], [108, 2, 1, "", "set_exploration_mode"], [109, 2, 1, "", "step_mdp"]], "torchrl.modules": [[110, 0, 1, "", "CEMPlanner"], [111, 0, 1, "", "ConvNet"], [112, 0, 1, "", "DdpgCnnActor"], [113, 0, 1, "", "DdpgCnnQNet"], [114, 0, 1, "", "DdpgMlpActor"], [115, 0, 1, "", "DdpgMlpQNet"], [116, 0, 1, "", "Delta"], [117, 0, 1, "", "DistributionalDQNnet"], [118, 0, 1, "", "DreamerActor"], [119, 0, 1, "", "DuelingCnnDQNet"], [120, 0, 1, "", "IndependentNormal"], [121, 0, 1, "", "LSTMNet"], [122, 0, 1, "", "MLP"], [123, 0, 1, "", "MPCPlannerBase"], [124, 0, 1, "", "MPPIPlanner"], [125, 0, 1, "", "NoisyLazyLinear"], [126, 0, 1, "", "NoisyLinear"], [127, 0, 1, "", "NormalParamWrapper"], [128, 0, 1, "", "ObsDecoder"], [129, 0, 1, "", "ObsEncoder"], [130, 0, 1, "", "OneHotCategorical"], [131, 0, 1, "", "RSSMPosterior"], [132, 0, 1, "", "RSSMPrior"], [133, 0, 1, "", "TanhDelta"], [134, 0, 1, "", "TanhNormal"], [135, 0, 1, "", "TruncatedNormal"], [136, 0, 1, "", "reset_noise"]], "torchrl.modules.CEMPlanner": [[110, 1, 1, "", "planning"]], "torchrl.modules.ConvNet": [[111, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnActor": [[112, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnQNet": [[113, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpActor": [[114, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpQNet": [[115, 1, 1, "", "forward"]], "torchrl.modules.Delta": [[116, 1, 1, "", "log_prob"], [116, 3, 1, "", "mean"], [116, 3, 1, "", "mode"], [116, 1, 1, "", "rsample"], [116, 1, 1, "", "sample"]], "torchrl.modules.DistributionalDQNnet": [[117, 1, 1, "", "forward"]], "torchrl.modules.DreamerActor": [[118, 1, 1, "", "forward"]], "torchrl.modules.DuelingCnnDQNet": [[119, 1, 1, "", "forward"]], "torchrl.modules.IndependentNormal": [[120, 3, 1, "", "mode"]], "torchrl.modules.LSTMNet": [[121, 1, 1, "", "forward"]], "torchrl.modules.MLP": [[122, 1, 1, "", "forward"]], "torchrl.modules.MPCPlannerBase": [[123, 1, 1, "", "forward"], [123, 1, 1, "", "planning"]], "torchrl.modules.MPPIPlanner": [[124, 1, 1, "", "planning"]], "torchrl.modules.NoisyLazyLinear": [[125, 1, 1, "", "initialize_parameters"]], "torchrl.modules.NormalParamWrapper": [[127, 1, 1, "", "forward"]], "torchrl.modules.ObsDecoder": [[128, 1, 1, "", "forward"]], "torchrl.modules.ObsEncoder": [[129, 1, 1, "", "forward"]], "torchrl.modules.OneHotCategorical": [[130, 1, 1, "", "log_prob"], [130, 3, 1, "", "mode"], [130, 1, 1, "", "rsample"], [130, 1, 1, "", "sample"]], "torchrl.modules.RSSMPosterior": [[131, 1, 1, "", "forward"]], "torchrl.modules.RSSMPrior": [[132, 1, 1, "", "forward"]], "torchrl.modules.TanhDelta": [[133, 3, 1, "", "mean"], [133, 3, 1, "", "mode"]], "torchrl.modules.TanhNormal": [[134, 3, 1, "", "mode"]], "torchrl.modules.TruncatedNormal": [[135, 1, 1, "", "log_prob"], [135, 3, 1, "", "mode"]], "torchrl.modules.tensordict_module": [[137, 0, 1, "", "Actor"], [138, 0, 1, "", "ActorCriticOperator"], [139, 0, 1, "", "ActorCriticWrapper"], [140, 0, 1, "", "ActorValueOperator"], [141, 0, 1, "", "AdditiveGaussianWrapper"], [142, 0, 1, "", "DistributionalQValueActor"], [143, 0, 1, "", "EGreedyWrapper"], [144, 0, 1, "", "OrnsteinUhlenbeckProcessWrapper"], [145, 0, 1, "", "ProbabilisticActor"], [146, 0, 1, "", "QValueActor"], [147, 0, 1, "", "SafeModule"], [148, 0, 1, "", "SafeProbabilisticModule"], [149, 0, 1, "", "SafeProbabilisticSequential"], [150, 0, 1, "", "SafeSequential"], [151, 0, 1, "", "ValueOperator"], [152, 0, 1, "", "WorldModelWrapper"]], "torchrl.modules.tensordict_module.ActorCriticOperator": [[138, 1, 1, "", "get_critic_operator"], [138, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorCriticWrapper": [[139, 1, 1, "", "get_policy_operator"], [139, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorValueOperator": [[140, 1, 1, "", "get_policy_operator"], [140, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.AdditiveGaussianWrapper": [[141, 1, 1, "", "forward"], [141, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.EGreedyWrapper": [[143, 1, 1, "", "forward"], [143, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper": [[144, 1, 1, "", "forward"], [144, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.SafeModule": [[147, 1, 1, "", "random"], [147, 1, 1, "", "random_sample"], [147, 1, 1, "", "to"]], "torchrl.modules.tensordict_module.SafeProbabilisticModule": [[148, 1, 1, "", "random"], [148, 1, 1, "", "random_sample"]], "torchrl.modules.tensordict_module.WorldModelWrapper": [[152, 1, 1, "", "get_reward_operator"], [152, 1, 1, "", "get_transition_model_operator"]], "torchrl.modules.tensordict_module.actors": [[153, 0, 1, "", "DistributionalQValueHook"], [154, 0, 1, "", "QValueHook"]], "torchrl.modules.tensordict_module.common": [[155, 0, 1, "", "ensure_tensordict_compatible"], [156, 0, 1, "", "is_tensordict_compatible"]], "torchrl.modules.utils": [[157, 0, 1, "", "biased_softplus"], [158, 0, 1, "", "inv_softplus"], [159, 0, 1, "", "mappings"]], "torchrl.modules.utils.biased_softplus": [[157, 1, 1, "", "forward"]], "torchrl.objectives": [[160, 0, 1, "", "A2CLoss"], [161, 0, 1, "", "ClipPPOLoss"], [162, 0, 1, "", "DDPGLoss"], [163, 0, 1, "", "DQNLoss"], [164, 0, 1, "", "DiscreteSACLoss"], [165, 0, 1, "", "DistributionalDQNLoss"], [166, 0, 1, "", "DreamerActorLoss"], [167, 0, 1, "", "DreamerModelLoss"], [168, 0, 1, "", "DreamerValueLoss"], [169, 0, 1, "", "HardUpdate"], [170, 0, 1, "", "IQLLoss"], [171, 0, 1, "", "KLPENPPOLoss"], [172, 0, 1, "", "PPOLoss"], [173, 0, 1, "", "REDQLoss"], [174, 0, 1, "", "ReinforceLoss"], [175, 0, 1, "", "SACLoss"], [176, 0, 1, "", "SoftUpdate"], [177, 0, 1, "", "TD3Loss"], [178, 0, 1, "", "distance_loss"], [179, 0, 1, "", "hold_out_net"], [180, 0, 1, "", "hold_out_params"], [181, 0, 1, "", "next_state_value"]], "torchrl.objectives.A2CLoss": [[160, 1, 1, "", "forward"]], "torchrl.objectives.ClipPPOLoss": [[161, 1, 1, "", "forward"]], "torchrl.objectives.DDPGLoss": [[162, 1, 1, "", "forward"]], "torchrl.objectives.DQNLoss": [[163, 1, 1, "", "forward"]], "torchrl.objectives.DiscreteSACLoss": [[164, 1, 1, "", "forward"]], "torchrl.objectives.DistributionalDQNLoss": [[165, 1, 1, "", "forward"]], "torchrl.objectives.DreamerActorLoss": [[166, 1, 1, "", "forward"]], "torchrl.objectives.DreamerModelLoss": [[167, 1, 1, "", "forward"]], "torchrl.objectives.DreamerValueLoss": [[168, 1, 1, "", "forward"]], "torchrl.objectives.IQLLoss": [[170, 1, 1, "", "forward"], [170, 1, 1, "", "loss_value_diff"]], "torchrl.objectives.KLPENPPOLoss": [[171, 1, 1, "", "forward"]], "torchrl.objectives.PPOLoss": [[172, 1, 1, "", "forward"]], "torchrl.objectives.REDQLoss": [[173, 1, 1, "", "forward"]], "torchrl.objectives.ReinforceLoss": [[174, 1, 1, "", "forward"]], "torchrl.objectives.SACLoss": [[175, 1, 1, "", "forward"]], "torchrl.objectives.TD3Loss": [[177, 1, 1, "", "forward"]], "torchrl.objectives.value": [[182, 0, 1, "", "GAE"], [183, 0, 1, "", "TDEstimate"], [184, 0, 1, "", "TDLambdaEstimate"]], "torchrl.objectives.value.GAE": [[182, 1, 1, "", "forward"]], "torchrl.objectives.value.TDEstimate": [[183, 1, 1, "", "forward"]], "torchrl.objectives.value.TDLambdaEstimate": [[184, 1, 1, "", "forward"]], "torchrl.objectives.value.functional": [[185, 0, 1, "", "generalized_advantage_estimate"], [186, 0, 1, "", "td_advantage_estimate"], [187, 0, 1, "", "td_lambda_advantage_estimate"], [188, 0, 1, "", "td_lambda_return_estimate"], [189, 0, 1, "", "vec_generalized_advantage_estimate"], [190, 0, 1, "", "vec_td_lambda_advantage_estimate"], [191, 0, 1, "", "vec_td_lambda_return_estimate"]], "torchrl.record": [[192, 2, 1, "", "TensorDictRecorder"], [193, 2, 1, "", "VideoRecorder"]], "torchrl.record.loggers": [[194, 2, 1, "", "Logger"], [196, 2, 1, "", "generate_exp_name"], [197, 2, 1, "", "get_logger"]], "torchrl.record.loggers.csv": [[195, 2, 1, "", "CSVLogger"]], "torchrl.record.loggers.mlflow": [[198, 2, 1, "", "MLFlowLogger"]], "torchrl.record.loggers.tensorboard": [[199, 2, 1, "", "TensorboardLogger"]], "torchrl.record.loggers.wandb": [[200, 2, 1, "", "WandbLogger"]], "torchrl.trainers": [[201, 0, 1, "", "BatchSubSampler"], [202, 0, 1, "", "ClearCudaCache"], [203, 0, 1, "", "CountFramesLog"], [204, 0, 1, "", "LogReward"], [205, 0, 1, "", "OptimizerHook"], [206, 0, 1, "", "Recorder"], [207, 0, 1, "", "ReplayBufferTrainer"], [208, 0, 1, "", "RewardNormalizer"], [209, 0, 1, "", "SelectKeys"], [210, 0, 1, "", "Trainer"], [211, 0, 1, "", "TrainerHookBase"], [212, 0, 1, "", "UpdateWeights"]], "torchrl.trainers.helpers": [[213, 2, 1, "", "correct_for_frame_skip"], [214, 2, 1, "", "get_stats_random_rollout"], [215, 2, 1, "", "make_a2c_loss"], [216, 2, 1, "", "make_a2c_model"], [217, 2, 1, "", "make_collector_offpolicy"], [218, 2, 1, "", "make_collector_onpolicy"], [219, 2, 1, "", "make_ddpg_actor"], [220, 2, 1, "", "make_ddpg_loss"], [221, 2, 1, "", "make_dqn_actor"], [222, 2, 1, "", "make_dqn_loss"], [223, 2, 1, "", "make_ppo_loss"], [224, 2, 1, "", "make_ppo_model"], [225, 2, 1, "", "make_redq_loss"], [226, 2, 1, "", "make_redq_model"], [227, 2, 1, "", "make_replay_buffer"], [228, 2, 1, "", "make_sac_loss"], [229, 2, 1, "", "make_sac_model"], [230, 2, 1, "", "make_target_updater"], [231, 2, 1, "", "make_trainer"], [232, 2, 1, "", "parallel_env_constructor"], [233, 2, 1, "", "sync_async_collector"], [234, 2, 1, "", "sync_sync_collector"], [235, 2, 1, "", "transformed_env_constructor"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "torchrl": [0, 1, 2, 3, 6, 239, 240, 241, 242, 243, 244, 245, 248, 251, 252], "document": [0, 9], "tutori": [0, 245], "basic": 0, "intermedi": [0, 8], "advanc": 0, "refer": [0, 237], "knowledg": [0, 238], "base": [0, 7, 238, 244], "indic": 0, "tabl": 0, "collector": [1, 243, 244, 245, 251], "packag": [1, 2, 3, 239, 240, 241, 242], "singl": [1, 4], "node": 1, "data": [1, 2, 4, 243, 244, 245, 251], "distribut": [1, 239], "helper": [1, 3], "function": [1, 4, 244, 245, 251], "replai": [2, 243, 244, 245, 251], "buffer": [2, 243, 244, 245, 251], "compos": [2, 72], "store": [2, 244], "trajectori": [2, 243], "dataset": 2, "tensorspec": [2, 34], "util": [2, 239, 240, 241], "env": [3, 248, 251, 252], "vector": [3, 251], "transform": [3, 98, 243, 245, 248, 251, 252], "clone": [3, 7], "record": [3, 206, 241, 243], "domain": 3, "specif": [3, 247], "librari": [3, 251], "thing": [4, 248], "consid": 4, "when": [4, 7], "debug": 4, "rl": [4, 9, 251], "gener": 4, "have": 4, "you": 4, "valid": 4, "your": [4, 6, 243, 248], "algorithm": 4, "implement": 4, "few": 4, "small": 4, "toi": 4, "problem": 4, "known": 4, "optim": [4, 243, 244], "return": [4, 240], "e": 4, "g": 4, "gridworld": 4, "mountaincar": 4, "visual": 4, "agent": 4, "Be": 4, "veri": 4, "care": 4, "ani": 4, "augment": 4, "polici": [4, 243, 245, 247, 248], "doe": 4, "entropi": 4, "converg": 4, "too": [4, 8], "quickli": 4, "slowli": 4, "chang": [4, 251], "drastic": 4, "reward": 4, "beyond": 4, "go": 4, "up": [4, 6], "i": [4, 5, 8], "favor": 4, "compon": 4, "veloc": 4, "v": 4, "l2": 4, "action": [4, 248], "magnitud": 4, "task": [4, 247], "horizon": 4, "extrem": 4, "long": 4, "ar": 4, "normal": [4, 243, 244, 245], "standard": 4, "explor": [4, 239, 244], "valu": [4, 243, 245], "loss": [4, 245], "earli": 4, "train": [4, 8, 243, 244, 245, 248], "roughli": 4, "uniformli": 4, "random": 4, "intrins": 4, "decai": 4, "learn": [4, 245], "progress": 4, "singleton": 4, "episod": 4, "remain": 4, "constant": [4, 244], "increas": 4, "an": [4, 245, 248], "environ": [4, 6, 7, 243, 244, 245, 247, 248, 251, 252], "dynam": 4, "can": 4, "low": 4, "forward": 4, "model": [4, 239, 243, 244, 249, 251], "also": 4, "us": [4, 6, 9, 243, 244, 249, 251], "offlin": 4, "observ": [4, 243], "space": 4, "effect": [4, 248], "dramat": 4, "dure": 4, "high": 4, "dimension": 4, "work": [5, 6, 7], "gym": [5, 252], "what": 5, "openai": 5, "version": [5, 7, 10], "habitat": 6, "lab": 6, "set": 6, "instal": [6, 7, 251], "from": [6, 7], "pip": [6, 7], "common": [6, 7, 8], "issu": [6, 7, 10], "mujoco": 7, "prerequisit": 7, "render": [7, 252], "all": 7, "new": 7, "bindindg": 7, "2": 7, "1": 7, "old": 7, "bind": 7, "py": 7, "option": 7, "repo": [7, 9], "pytorch": [8, 9, 10], "error": 8, "solut": 8, "gradient": 8, "relat": 8, "newcom": 8, "my": 8, "slow": 8, "bug": 8, "resourc": 9, "functorch": 9, "blog": 9, "websit": 9, "educ": 9, "forum": 9, "how": 10, "reproduc": [10, 248], "workaround": 10, "implement_for": 11, "datacollectorbas": 12, "multisyncdatacollector": 13, "multiasyncdatacollector": 14, "randompolici": 15, "syncdatacollector": 16, "asyncdatacollector": 17, "distributeddatacollector": 18, "distributedsyncdatacollector": 19, "rpcdatacollector": 20, "submitit_delayed_launch": 21, "split_trajectori": 22, "binarydiscretetensorspec": 23, "boundedtensorspec": 24, "compositespec": 25, "discretetensorspec": 26, "multidiscretetensorspec": 27, "multionehotdiscretetensorspec": 28, "onehotdiscretetensorspec": 29, "prioritizedreplaybuff": 30, "replaybuff": 31, "tensordictprioritizedreplaybuff": 32, "tensordictreplaybuff": 33, "unboundedcontinuoustensorspec": 35, "unboundeddiscretetensorspec": 36, "d4rlexperiencereplai": 37, "lazymemmapstorag": 38, "lazytensorstorag": 39, "liststorag": 40, "prioritizedsampl": 41, "randomsampl": 42, "roundrobinwrit": 43, "sampler": 44, "samplerwithoutreplac": 45, "storag": 46, "writer": 47, "envbas": [48, 248], "envcreat": 49, "envmetadata": 50, "gymlikeenv": 51, "modelbasedenvbas": 52, "multithreadedenv": 53, "parallelenv": 54, "serialenv": 55, "braxenv": 56, "braxwrapp": 57, "dmcontrolenv": 58, "dmcontrolwrapp": 59, "gymenv": 60, "gymwrapp": 61, "habitatenv": 62, "jumanjienv": 63, "jumanjiwrapp": 64, "vmasenv": 65, "vmaswrapp": 66, "dreamerenv": 67, "binarizereward": 68, "catfram": 69, "cattensor": 70, "centercrop": 71, "discreteactionproject": 73, "doubletofloat": 74, "excludetransform": 75, "finitetensordictcheck": 76, "flattenobserv": 77, "frameskiptransform": 78, "grayscal": 79, "inittrack": 80, "noopresetenv": 81, "observationnorm": 82, "observationtransform": 83, "pinmemorytransform": 84, "r3mtransform": 85, "randomcroptensordict": 86, "renametransform": 87, "resiz": 88, "rewardclip": 89, "rewardsc": 90, "rewardsum": 91, "selecttransform": 92, "squeezetransform": 93, "stepcount": 94, "tensordictprim": 95, "timemaxpool": 96, "totensorimag": 97, "transformedenv": 99, "unsqueezetransform": 100, "viprewardtransform": 101, "viptransform": 102, "vecnorm": [103, 252], "gsdenois": 104, "check_env_spec": 105, "exploration_mod": 106, "get_available_librari": 107, "set_exploration_mod": 108, "step_mdp": 109, "cemplann": 110, "convnet": 111, "ddpgcnnactor": 112, "ddpgcnnqnet": 113, "ddpgmlpactor": 114, "ddpgmlpqnet": 115, "delta": 116, "distributionaldqnnet": 117, "dreameractor": 118, "duelingcnndqnet": 119, "independentnorm": 120, "lstmnet": 121, "mlp": 122, "mpcplannerbas": 123, "mppiplann": 124, "noisylazylinear": 125, "noisylinear": 126, "normalparamwrapp": 127, "obsdecod": 128, "obsencod": 129, "onehotcategor": 130, "rssmposterior": 131, "rssmprior": 132, "tanhdelta": 133, "tanhnorm": 134, "truncatednorm": 135, "reset_nois": 136, "actor": 137, "actorcriticoper": 138, "actorcriticwrapp": 139, "actorvalueoper": 140, "additivegaussianwrapp": 141, "distributionalqvalueactor": 142, "egreedywrapp": 143, "ornsteinuhlenbeckprocesswrapp": 144, "probabilisticactor": 145, "qvalueactor": 146, "safemodul": 147, "safeprobabilisticmodul": 148, "safeprobabilisticsequenti": 149, "safesequenti": 150, "valueoper": 151, "worldmodelwrapp": 152, "distributionalqvaluehook": 153, "qvaluehook": 154, "ensure_tensordict_compat": 155, "is_tensordict_compat": 156, "biased_softplu": 157, "inv_softplu": 158, "map": 159, "a2closs": 160, "clipppoloss": 161, "ddpgloss": 162, "dqnloss": 163, "discretesacloss": 164, "distributionaldqnloss": 165, "dreameractorloss": 166, "dreamermodelloss": 167, "dreamervalueloss": 168, "hardupd": 169, "iqlloss": 170, "klpenppoloss": 171, "ppoloss": 172, "redqloss": 173, "reinforceloss": 174, "sacloss": 175, "softupd": 176, "td3loss": 177, "distance_loss": 178, "hold_out_net": 179, "hold_out_param": 180, "next_state_valu": 181, "gae": 182, "tdestim": 183, "tdlambdaestim": 184, "generalized_advantage_estim": 185, "td_advantage_estim": 186, "td_lambda_advantage_estim": 187, "td_lambda_return_estim": 188, "vec_generalized_advantage_estim": 189, "vec_td_lambda_advantage_estim": 190, "vec_td_lambda_return_estim": 191, "tensordictrecord": 192, "videorecord": 193, "logger": [194, 241], "csvlogger": 195, "generate_exp_nam": 196, "get_logg": 197, "mlflowlogg": 198, "tensorboardlogg": 199, "wandblogg": 200, "batchsubsampl": 201, "clearcudacach": 202, "countframeslog": 203, "logreward": 204, "optimizerhook": 205, "replaybuffertrain": 207, "rewardnorm": 208, "selectkei": 209, "trainer": [210, 241], "trainerhookbas": 211, "updateweight": 212, "correct_for_frame_skip": 213, "get_stats_random_rollout": 214, "make_a2c_loss": 215, "make_a2c_model": 216, "make_collector_offpolici": 217, "make_collector_onpolici": 218, "make_ddpg_actor": 219, "make_ddpg_loss": 220, "make_dqn_actor": 221, "make_dqn_loss": 222, "make_ppo_loss": 223, "make_ppo_model": 224, "make_redq_loss": 225, "make_redq_model": 226, "make_replay_buff": 227, "make_sac_loss": 228, "make_sac_model": 229, "make_target_updat": 230, "make_train": 231, "parallel_env_constructor": 232, "sync_async_collector": 233, "sync_sync_collector": 234, "transformed_env_constructor": 235, "readm": [236, 246], "tuto": [236, 246], "api": 237, "contribut": [238, 251], "content": 238, "modul": [239, 244, 251], "tensordict": [239, 251], "hook": [239, 241], "planner": 239, "object": [240, 243, 251], "dqn": [240, 244], "ddpg": [240, 243], "sac": 240, "redq": 240, "iql": 240, "td3": 240, "ppo": [240, 245], "a2c": 240, "reinforc": [240, 245], "dreamer": 240, "checkpoint": 241, "builder": 241, "_util": 242, "code": [243, 244, 248], "import": 243, "parallel": [243, 247, 252], "execut": [243, 247, 248], "build": [243, 244], "evalu": 243, "hyperparamet": [243, 244, 245], "collect": [243, 244, 245], "initi": 243, "stat": 243, "q": [243, 244], "network": [243, 244, 245], "creation": 243, "time": [243, 250], "experi": [243, 248], "result": [243, 245], "sampl": 243, "td": [243, 244], "lambda": [243, 244], "pixel": 244, "paramet": [244, 245], "comput": [244, 248, 250], "deep": 244, "target": 244, "loop": [244, 245, 248], "regular": 244, "conclus": [244, 245, 248], "possibl": 244, "improv": 244, "defin": 245, "next": 245, "step": [245, 252], "multi": 247, "divers": 247, "rollout": [247, 248, 252], "pendulum": 248, "write": 248, "_step": 248, "reset": [248, 252], "simul": 248, "_reset": 248, "metadata": 248, "_spec": 248, "spec": [248, 252], "shape": 248, "seed": [248, 252], "wrap": 248, "togeth": 248, "class": [248, 251], "test": 248, "our": 248, "custom": 248, "batch": 248, "simpl": 248, "pretrain": 249, "introduct": 251, "config": 251, "tensordictmodul": 251, "sequenc": 251, "program": 251, "ensembl": 251, "meta": 251, "special": 251, "state": 251, "frame_skip": 252, "deepmind": 252, "control": 252, "devic": 252, "run": 252, "close": 252, "access": 252, "attribut": 252, "kwarg": 252}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Welcome to the TorchRL Documentation!": [[0, "welcome-to-the-torchrl-documentation"]], "Tutorials": [[0, "tutorials"]], "Basics": [[0, "basics"]], "Intermediate": [[0, "intermediate"]], "Advanced": [[0, "advanced"]], "References": [[0, "references"]], "Knowledge Base": [[0, "knowledge-base"], [238, "knowledge-base"]], "Indices and tables": [[0, "indices-and-tables"]], "torchrl.collectors package": [[1, "torchrl-collectors-package"]], "Single node data collectors": [[1, "single-node-data-collectors"]], "Distributed data collectors": [[1, "distributed-data-collectors"]], "Helper functions": [[1, "helper-functions"]], "torchrl.data package": [[2, "torchrl-data-package"]], "Replay Buffers": [[2, "replay-buffers"]], "Composable Replay Buffers": [[2, "composable-replay-buffers"]], "Storing trajectories": [[2, "storing-trajectories"]], "Datasets": [[2, "datasets"]], "TensorSpec": [[2, "tensorspec"], [34, "tensorspec"]], "Utils": [[2, "utils"], [239, "utils"], [240, "utils"], [241, "utils"]], "torchrl.envs package": [[3, "torchrl-envs-package"]], "Vectorized envs": [[3, "vectorized-envs"]], "Transforms": [[3, "transforms"], [243, "transforms"], [245, "transforms"], [251, "transforms"]], "Cloning transforms": [[3, "cloning-transforms"]], "Recorders": [[3, "recorders"]], "Helpers": [[3, "helpers"]], "Domain-specific": [[3, "domain-specific"]], "Libraries": [[3, "libraries"]], "Things to consider when debugging RL": [[4, "things-to-consider-when-debugging-rl"]], "General": [[4, "general"]], "Have you validated your algorithm implementation on a few small, toy problems with known optimal returns e.g. gridworlds, mountaincar?": [[4, "have-you-validated-your-algorithm-implementation-on-a-few-small-toy-problems-with-known-optimal-returns-e-g-gridworlds-mountaincar"]], "Have you visualized your agents?": [[4, "have-you-visualized-your-agents"]], "Be very careful with any data augmentation.": [[4, "be-very-careful-with-any-data-augmentation"]], "Policy": [[4, "policy"], [245, "policy"], [247, "policy"]], "Does the entropy of your policy converge too quickly, too slowly or change drastically?": [[4, "does-the-entropy-of-your-policy-converge-too-quickly-too-slowly-or-change-drastically"]], "Rewards (beyond \u201cgoing up\u201d)": [[4, "rewards-beyond-going-up"]], "Is the agent favoring a single component of the reward function (i.e. velocity vs L2 action magnitude)?": [[4, "is-the-agent-favoring-a-single-component-of-the-reward-function-i-e-velocity-vs-l2-action-magnitude"]], "Is the task horizon extremely long?": [[4, "is-the-task-horizon-extremely-long"]], "Are your rewards normalized/standardized?": [[4, "are-your-rewards-normalized-standardized"]], "Exploration": [[4, "exploration"], [239, "exploration"]], "Is value loss going up early in training?": [[4, "is-value-loss-going-up-early-in-training"]], "Are actions (roughly) uniformly/normally random early in training?": [[4, "are-actions-roughly-uniformly-normally-random-early-in-training"]], "Are intrinsic rewards decaying as learning progresses in a singleton task?": [[4, "are-intrinsic-rewards-decaying-as-learning-progresses-in-a-singleton-task"]], "Are episodic intrinsic rewards remaining constant or increasing as learning progresses in an episodic task?": [[4, "are-episodic-intrinsic-rewards-remaining-constant-or-increasing-as-learning-progresses-in-an-episodic-task"]], "Environment Dynamics": [[4, "environment-dynamics"]], "Can you train a low entropy forward dynamics and/or reward model (also useful for offline RL)?": [[4, "can-you-train-a-low-entropy-forward-dynamics-and-or-reward-model-also-useful-for-offline-rl"]], "Observation Space": [[4, "observation-space"]], "Are your observations normalized/standardized?": [[4, "are-your-observations-normalized-standardized"]], "Action Space": [[4, "action-space"]], "Is the effect of an action changing dramatically during an episode?": [[4, "is-the-effect-of-an-action-changing-dramatically-during-an-episode"]], "Is the action space too high dimensional?": [[4, "is-the-action-space-too-high-dimensional"]], "Are your actions normalized/standardized?": [[4, "are-your-actions-normalized-standardized"]], "Working with gym": [[5, "working-with-gym"]], "What is OpenAI Gym?": [[5, "what-is-openai-gym"]], "Versioning": [[5, "versioning"]], "Working with habitat-lab": [[6, "working-with-habitat-lab"]], "Setting up your environment for habitat and torchrl": [[6, "setting-up-your-environment-for-habitat-and-torchrl"]], "Installing habitat-lab from pip": [[6, "installing-habitat-lab-from-pip"]], "Installing TorchRL": [[6, "installing-torchrl"]], "Using Habitat": [[6, "using-habitat"]], "Common issues": [[6, "common-issues"]], "Working with MuJoCo-based environments": [[7, "working-with-mujoco-based-environments"]], "Installing MuJoCo": [[7, "installing-mujoco"]], "Prerequisite for rendering (all mujoco versions)": [[7, "prerequisite-for-rendering-all-mujoco-versions"]], "New bindindgs (\u2265 2.1.2)": [[7, "new-bindindgs-2-1-2"]], "Old bindings (\u2264 2.1.1): mujoco-py": [[7, "old-bindings-2-1-1-mujoco-py"]], "Option 1: installing mujoco-py with pip": [[7, "option-1-installing-mujoco-py-with-pip"]], "Option 2: installing mujoco-py from a cloned repo": [[7, "option-2-installing-mujoco-py-from-a-cloned-repo"]], "Common Issues when rendering Mujoco Environments": [[7, "common-issues-when-rendering-mujoco-environments"]], "Common PyTorch errors and solutions": [[8, "common-pytorch-errors-and-solutions"]], "Gradient-related errors [Newcomers]": [[8, "gradient-related-errors-newcomers"]], "My Training is too slow [Newcomers / intermediate]": [[8, "my-training-is-too-slow-newcomers-intermediate"]], "Common bugs": [[8, "common-bugs"]], "Useful resources": [[9, "useful-resources"]], "Pytorch documentation": [[9, "pytorch-documentation"]], "functorch documentation": [[9, "functorch-documentation"]], "Useful RL repos, blogs and websites": [[9, "useful-rl-repos-blogs-and-websites"]], "Educational resource": [[9, "educational-resource"]], "Forums": [[9, "forums"]], "Repos": [[9, "repos"]], "Versioning Issues": [[10, "versioning-issues"]], "Pytorch version": [[10, "pytorch-version"]], "How to reproduce": [[10, "how-to-reproduce"]], "Workarounds": [[10, "workarounds"]], "implement_for": [[11, "implement-for"]], "DataCollectorBase": [[12, "datacollectorbase"]], "MultiSyncDataCollector": [[13, "multisyncdatacollector"]], "MultiaSyncDataCollector": [[14, "multiasyncdatacollector"]], "RandomPolicy": [[15, "randompolicy"]], "SyncDataCollector": [[16, "syncdatacollector"]], "aSyncDataCollector": [[17, "asyncdatacollector"]], "DistributedDataCollector": [[18, "distributeddatacollector"]], "DistributedSyncDataCollector": [[19, "distributedsyncdatacollector"]], "RPCDataCollector": [[20, "rpcdatacollector"]], "submitit_delayed_launcher": [[21, "submitit-delayed-launcher"]], "split_trajectories": [[22, "split-trajectories"]], "BinaryDiscreteTensorSpec": [[23, "binarydiscretetensorspec"]], "BoundedTensorSpec": [[24, "boundedtensorspec"]], "CompositeSpec": [[25, "compositespec"]], "DiscreteTensorSpec": [[26, "discretetensorspec"]], "MultiDiscreteTensorSpec": [[27, "multidiscretetensorspec"]], "MultiOneHotDiscreteTensorSpec": [[28, "multionehotdiscretetensorspec"]], "OneHotDiscreteTensorSpec": [[29, "onehotdiscretetensorspec"]], "PrioritizedReplayBuffer": [[30, "prioritizedreplaybuffer"]], "ReplayBuffer": [[31, "replaybuffer"]], "TensorDictPrioritizedReplayBuffer": [[32, "tensordictprioritizedreplaybuffer"]], "TensorDictReplayBuffer": [[33, "tensordictreplaybuffer"]], "UnboundedContinuousTensorSpec": [[35, "unboundedcontinuoustensorspec"]], "UnboundedDiscreteTensorSpec": [[36, "unboundeddiscretetensorspec"]], "D4RLExperienceReplay": [[37, "d4rlexperiencereplay"]], "LazyMemmapStorage": [[38, "lazymemmapstorage"]], "LazyTensorStorage": [[39, "lazytensorstorage"]], "ListStorage": [[40, "liststorage"]], "PrioritizedSampler": [[41, "prioritizedsampler"]], "RandomSampler": [[42, "randomsampler"]], "RoundRobinWriter": [[43, "roundrobinwriter"]], "Sampler": [[44, "sampler"]], "SamplerWithoutReplacement": [[45, "samplerwithoutreplacement"]], "Storage": [[46, "storage"]], "Writer": [[47, "writer"]], "EnvBase": [[48, "envbase"]], "EnvCreator": [[49, "envcreator"]], "EnvMetaData": [[50, "envmetadata"]], "GymLikeEnv": [[51, "gymlikeenv"]], "ModelBasedEnvBase": [[52, "modelbasedenvbase"]], "MultiThreadedEnv": [[53, "multithreadedenv"]], "ParallelEnv": [[54, "parallelenv"]], "SerialEnv": [[55, "serialenv"]], "BraxEnv": [[56, "braxenv"]], "BraxWrapper": [[57, "braxwrapper"]], "DMControlEnv": [[58, "dmcontrolenv"]], "DMControlWrapper": [[59, "dmcontrolwrapper"]], "GymEnv": [[60, "gymenv"]], "GymWrapper": [[61, "gymwrapper"]], "HabitatEnv": [[62, "habitatenv"]], "JumanjiEnv": [[63, "jumanjienv"]], "JumanjiWrapper": [[64, "jumanjiwrapper"]], "VmasEnv": [[65, "vmasenv"]], "VmasWrapper": [[66, "vmaswrapper"]], "DreamerEnv": [[67, "dreamerenv"]], "BinarizeReward": [[68, "binarizereward"]], "CatFrames": [[69, "catframes"]], "CatTensors": [[70, "cattensors"]], "CenterCrop": [[71, "centercrop"]], "Compose": [[72, "compose"]], "DiscreteActionProjection": [[73, "discreteactionprojection"]], "DoubleToFloat": [[74, "doubletofloat"]], "ExcludeTransform": [[75, "excludetransform"]], "FiniteTensorDictCheck": [[76, "finitetensordictcheck"]], "FlattenObservation": [[77, "flattenobservation"]], "FrameSkipTransform": [[78, "frameskiptransform"]], "GrayScale": [[79, "grayscale"]], "InitTracker": [[80, "inittracker"]], "NoopResetEnv": [[81, "noopresetenv"]], "ObservationNorm": [[82, "observationnorm"]], "ObservationTransform": [[83, "observationtransform"]], "PinMemoryTransform": [[84, "pinmemorytransform"]], "R3MTransform": [[85, "r3mtransform"]], "RandomCropTensorDict": [[86, "randomcroptensordict"]], "RenameTransform": [[87, "renametransform"]], "Resize": [[88, "resize"]], "RewardClipping": [[89, "rewardclipping"]], "RewardScaling": [[90, "rewardscaling"]], "RewardSum": [[91, "rewardsum"]], "SelectTransform": [[92, "selecttransform"]], "SqueezeTransform": [[93, "squeezetransform"]], "StepCounter": [[94, "stepcounter"]], "TensorDictPrimer": [[95, "tensordictprimer"]], "TimeMaxPool": [[96, "timemaxpool"]], "ToTensorImage": [[97, "totensorimage"]], "Transform": [[98, "transform"]], "TransformedEnv": [[99, "transformedenv"]], "UnsqueezeTransform": [[100, "unsqueezetransform"]], "VIPRewardTransform": [[101, "viprewardtransform"]], "VIPTransform": [[102, "viptransform"]], "VecNorm": [[103, "vecnorm"], [252, "vecnorm"]], "gSDENoise": [[104, "gsdenoise"]], "check_env_specs": [[105, "check-env-specs"]], "exploration_mode": [[106, "exploration-mode"]], "get_available_libraries": [[107, "get-available-libraries"]], "set_exploration_mode": [[108, "set-exploration-mode"]], "step_mdp": [[109, "step-mdp"]], "CEMPlanner": [[110, "cemplanner"]], "ConvNet": [[111, "convnet"]], "DdpgCnnActor": [[112, "ddpgcnnactor"]], "DdpgCnnQNet": [[113, "ddpgcnnqnet"]], "DdpgMlpActor": [[114, "ddpgmlpactor"]], "DdpgMlpQNet": [[115, "ddpgmlpqnet"]], "Delta": [[116, "delta"]], "DistributionalDQNnet": [[117, "distributionaldqnnet"]], "DreamerActor": [[118, "dreameractor"]], "DuelingCnnDQNet": [[119, "duelingcnndqnet"]], "IndependentNormal": [[120, "independentnormal"]], "LSTMNet": [[121, "lstmnet"]], "MLP": [[122, "mlp"]], "MPCPlannerBase": [[123, "mpcplannerbase"]], "MPPIPlanner": [[124, "mppiplanner"]], "NoisyLazyLinear": [[125, "noisylazylinear"]], "NoisyLinear": [[126, "noisylinear"]], "NormalParamWrapper": [[127, "normalparamwrapper"]], "ObsDecoder": [[128, "obsdecoder"]], "ObsEncoder": [[129, "obsencoder"]], "OneHotCategorical": [[130, "onehotcategorical"]], "RSSMPosterior": [[131, "rssmposterior"]], "RSSMPrior": [[132, "rssmprior"]], "TanhDelta": [[133, "tanhdelta"]], "TanhNormal": [[134, "tanhnormal"]], "TruncatedNormal": [[135, "truncatednormal"]], "reset_noise": [[136, "reset-noise"]], "Actor": [[137, "actor"]], "ActorCriticOperator": [[138, "actorcriticoperator"]], "ActorCriticWrapper": [[139, "actorcriticwrapper"]], "ActorValueOperator": [[140, "actorvalueoperator"]], "AdditiveGaussianWrapper": [[141, "additivegaussianwrapper"]], "DistributionalQValueActor": [[142, "distributionalqvalueactor"]], "EGreedyWrapper": [[143, "egreedywrapper"]], "OrnsteinUhlenbeckProcessWrapper": [[144, "ornsteinuhlenbeckprocesswrapper"]], "ProbabilisticActor": [[145, "probabilisticactor"]], "QValueActor": [[146, "qvalueactor"]], "SafeModule": [[147, "safemodule"]], "SafeProbabilisticModule": [[148, "safeprobabilisticmodule"]], "SafeProbabilisticSequential": [[149, "safeprobabilisticsequential"]], "SafeSequential": [[150, "safesequential"]], "ValueOperator": [[151, "valueoperator"]], "WorldModelWrapper": [[152, "worldmodelwrapper"]], "DistributionalQValueHook": [[153, "distributionalqvaluehook"]], "QValueHook": [[154, "qvaluehook"]], "ensure_tensordict_compatible": [[155, "ensure-tensordict-compatible"]], "is_tensordict_compatible": [[156, "is-tensordict-compatible"]], "biased_softplus": [[157, "biased-softplus"]], "inv_softplus": [[158, "inv-softplus"]], "mappings": [[159, "mappings"]], "A2CLoss": [[160, "a2closs"]], "ClipPPOLoss": [[161, "clipppoloss"]], "DDPGLoss": [[162, "ddpgloss"]], "DQNLoss": [[163, "dqnloss"]], "DiscreteSACLoss": [[164, "discretesacloss"]], "DistributionalDQNLoss": [[165, "distributionaldqnloss"]], "DreamerActorLoss": [[166, "dreameractorloss"]], "DreamerModelLoss": [[167, "dreamermodelloss"]], "DreamerValueLoss": [[168, "dreamervalueloss"]], "HardUpdate": [[169, "hardupdate"]], "IQLLoss": [[170, "iqlloss"]], "KLPENPPOLoss": [[171, "klpenppoloss"]], "PPOLoss": [[172, "ppoloss"]], "REDQLoss": [[173, "redqloss"]], "ReinforceLoss": [[174, "reinforceloss"]], "SACLoss": [[175, "sacloss"]], "SoftUpdate": [[176, "softupdate"]], "TD3Loss": [[177, "td3loss"]], "distance_loss": [[178, "distance-loss"]], "hold_out_net": [[179, "hold-out-net"]], "hold_out_params": [[180, "hold-out-params"]], "next_state_value": [[181, "next-state-value"]], "GAE": [[182, "gae"]], "TDEstimate": [[183, "tdestimate"]], "TDLambdaEstimate": [[184, "tdlambdaestimate"]], "generalized_advantage_estimate": [[185, "generalized-advantage-estimate"]], "td_advantage_estimate": [[186, "td-advantage-estimate"]], "td_lambda_advantage_estimate": [[187, "td-lambda-advantage-estimate"]], "td_lambda_return_estimate": [[188, "td-lambda-return-estimate"]], "vec_generalized_advantage_estimate": [[189, "vec-generalized-advantage-estimate"]], "vec_td_lambda_advantage_estimate": [[190, "vec-td-lambda-advantage-estimate"]], "vec_td_lambda_return_estimate": [[191, "vec-td-lambda-return-estimate"]], "TensorDictRecorder": [[192, "tensordictrecorder"]], "VideoRecorder": [[193, "videorecorder"]], "Logger": [[194, "logger"]], "CSVLogger": [[195, "csvlogger"]], "generate_exp_name": [[196, "generate-exp-name"]], "get_logger": [[197, "get-logger"]], "MLFlowLogger": [[198, "mlflowlogger"]], "TensorboardLogger": [[199, "tensorboardlogger"]], "WandbLogger": [[200, "wandblogger"]], "BatchSubSampler": [[201, "batchsubsampler"]], "ClearCudaCache": [[202, "clearcudacache"]], "CountFramesLog": [[203, "countframeslog"]], "LogReward": [[204, "logreward"]], "OptimizerHook": [[205, "optimizerhook"]], "Recorder": [[206, "recorder"], [243, "recorder"]], "ReplayBufferTrainer": [[207, "replaybuffertrainer"]], "RewardNormalizer": [[208, "rewardnormalizer"]], "SelectKeys": [[209, "selectkeys"]], "Trainer": [[210, "trainer"]], "TrainerHookBase": [[211, "trainerhookbase"]], "UpdateWeights": [[212, "updateweights"]], "correct_for_frame_skip": [[213, "correct-for-frame-skip"]], "get_stats_random_rollout": [[214, "get-stats-random-rollout"]], "make_a2c_loss": [[215, "make-a2c-loss"]], "make_a2c_model": [[216, "make-a2c-model"]], "make_collector_offpolicy": [[217, "make-collector-offpolicy"]], "make_collector_onpolicy": [[218, "make-collector-onpolicy"]], "make_ddpg_actor": [[219, "make-ddpg-actor"]], "make_ddpg_loss": [[220, "make-ddpg-loss"]], "make_dqn_actor": [[221, "make-dqn-actor"]], "make_dqn_loss": [[222, "make-dqn-loss"]], "make_ppo_loss": [[223, "make-ppo-loss"]], "make_ppo_model": [[224, "make-ppo-model"]], "make_redq_loss": [[225, "make-redq-loss"]], "make_redq_model": [[226, "make-redq-model"]], "make_replay_buffer": [[227, "make-replay-buffer"]], "make_sac_loss": [[228, "make-sac-loss"]], "make_sac_model": [[229, "make-sac-model"]], "make_target_updater": [[230, "make-target-updater"]], "make_trainer": [[231, "make-trainer"]], "parallel_env_constructor": [[232, "parallel-env-constructor"]], "sync_async_collector": [[233, "sync-async-collector"]], "sync_sync_collector": [[234, "sync-sync-collector"]], "transformed_env_constructor": [[235, "transformed-env-constructor"]], "README Tutos": [[236, "readme-tutos"], [246, "readme-tutos"]], "API Reference": [[237, "api-reference"]], "Contributing": [[238, "contributing"], [251, "contributing"]], "Contents:": [[238, null]], "torchrl.modules package": [[239, "torchrl-modules-package"]], "TensorDict modules": [[239, "tensordict-modules"]], "Hooks": [[239, "hooks"]], "Models": [[239, "models"], [251, "models"]], "Planners": [[239, "planners"]], "Distributions": [[239, "distributions"]], "torchrl.objectives package": [[240, "torchrl-objectives-package"]], "DQN": [[240, "dqn"]], "DDPG": [[240, "ddpg"]], "SAC": [[240, "sac"]], "REDQ": [[240, "redq"]], "IQL": [[240, "iql"]], "TD3": [[240, "td3"]], "PPO": [[240, "ppo"]], "A2C": [[240, "a2c"]], "Reinforce": [[240, "reinforce"]], "Dreamer": [[240, "dreamer"]], "Returns": [[240, "returns"]], "torchrl.trainers package": [[241, "torchrl-trainers-package"]], "Checkpointing": [[241, "checkpointing"]], "Trainer and hooks": [[241, "trainer-and-hooks"]], "Builders": [[241, "builders"]], "Loggers": [[241, "loggers"]], "Recording utils": [[241, "recording-utils"]], "torchrl._utils package": [[242, "torchrl-utils-package"]], "Coding DDPG using TorchRL": [[243, "coding-ddpg-using-torchrl"]], "Imports": [[243, "imports"]], "Environment": [[243, "environment"], [243, "id1"]], "Normalization of the observations": [[243, "normalization-of-the-observations"]], "Parallel execution": [[243, "parallel-execution"]], "Building the model": [[243, "building-the-model"]], "Evaluator: building your recorder object": [[243, "evaluator-building-your-recorder-object"]], "Replay buffer": [[243, "replay-buffer"], [243, "id2"], [243, "id3"], [245, "replay-buffer"]], "Hyperparameters": [[243, "hyperparameters"], [244, "hyperparameters"]], "Collection": [[243, "collection"]], "Optimizer and optimization": [[243, "optimizer-and-optimization"]], "Model": [[243, "model"]], "Initialization": [[243, "initialization"]], "Normalization stats": [[243, "normalization-stats"]], "Models: policy and q-value network": [[243, "models-policy-and-q-value-network"]], "Parallel environment creation": [[243, "parallel-environment-creation"]], "Data collector": [[243, "data-collector"], [244, "data-collector"], [245, "data-collector"]], "Optimizer": [[243, "optimizer"], [244, "optimizer"]], "Time to train the policy": [[243, "time-to-train-the-policy"]], "Experiment results": [[243, "experiment-results"]], "Sampling trajectories and using TD(lambda)": [[243, "sampling-trajectories-and-using-td-lambda"]], "Coding a pixel-based DQN using TorchRL": [[244, "coding-a-pixel-based-dqn-using-torchrl"]], "DQN parameters": [[244, "dqn-parameters"]], "Data collection and replay buffer": [[244, "data-collection-and-replay-buffer"]], "Environment and exploration": [[244, "environment-and-exploration"]], "Building the environment": [[244, "building-the-environment"]], "Compute normalizing constants": [[244, "compute-normalizing-constants"]], "Building the model (Deep Q-network)": [[244, "building-the-model-deep-q-network"]], "Target parameters": [[244, "target-parameters"]], "Functionalizing modules": [[244, "functionalizing-modules"]], "Collecting and storing data": [[244, "collecting-and-storing-data"]], "Replay buffers": [[244, "replay-buffers"], [251, "replay-buffers"]], "Training loop of a regular DQN": [[244, "training-loop-of-a-regular-dqn"]], "DQN with TD(\\lambda)": [[244, "dqn-with-td-lambda"]], "Data: Replay buffer and collector": [[244, "data-replay-buffer-and-collector"]], "Training loop": [[244, "training-loop"], [245, "training-loop"], [248, "training-loop"]], "Conclusion and possible improvements": [[244, "conclusion-and-possible-improvements"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[245, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[245, "define-hyperparameters"]], "Data collection parameters": [[245, "data-collection-parameters"]], "PPO parameters": [[245, "ppo-parameters"]], "Define an environment": [[245, "define-an-environment"]], "Normalization": [[245, "normalization"]], "Value network": [[245, "value-network"]], "Loss function": [[245, "loss-function"]], "Results": [[245, "results"]], "Conclusion and next steps": [[245, "conclusion-and-next-steps"]], "Task-specific policy in multi-task environments": [[247, "task-specific-policy-in-multi-task-environments"]], "Executing diverse tasks in parallel": [[247, "executing-diverse-tasks-in-parallel"]], "Rollout": [[247, "rollout"]], "Pendulum: Writing your environment and transforms with TorchRL": [[248, "pendulum-writing-your-environment-and-transforms-with-torchrl"]], "Coding the effect of an action: torchrl.envs.EnvBase._step()": [[248, "coding-the-effect-of-an-action-torchrl-envs-envbase-step"]], "Resetting the simulator: torchrl.envs.EnvBase._reset()": [[248, "resetting-the-simulator-torchrl-envs-envbase-reset"]], "Environment metadata: env.*_spec": [[248, "environment-metadata-env-spec"]], "Specs shape": [[248, "specs-shape"]], "Reproducible experiments: seeding": [[248, "reproducible-experiments-seeding"]], "Wrapping things together: the torchrl.envs.EnvBase class": [[248, "wrapping-things-together-the-torchrl-envs-envbase-class"]], "Testing our environment": [[248, "testing-our-environment"]], "Transforming an environment": [[248, "transforming-an-environment"]], "Writing custom transforms": [[248, "writing-custom-transforms"]], "Executing a rollout": [[248, "executing-a-rollout"]], "Batching computations": [[248, "batching-computations"]], "Training a simple policy": [[248, "training-a-simple-policy"]], "Conclusion": [[248, "conclusion"]], "Using pretrained models": [[249, "using-pretrained-models"]], "Computation times": [[250, "computation-times"]], "Introduction to TorchRL": [[251, "introduction-to-torchrl"]], "Data": [[251, "data"]], "TensorDict": [[251, "tensordict"]], "Envs": [[251, "envs"]], "Changing environments config": [[251, "changing-environments-config"]], "Vectorized Environments": [[251, "vectorized-environments"]], "Modules": [[251, "modules"]], "TensorDictModules": [[251, "tensordictmodules"]], "Sequences of Modules": [[251, "sequences-of-modules"]], "Functional Programming (Ensembling / Meta-RL)": [[251, "functional-programming-ensembling-meta-rl"]], "Specialized Classes": [[251, "specialized-classes"]], "Using Environments and Modules": [[251, "using-environments-and-modules"]], "Collectors": [[251, "collectors"]], "Objectives": [[251, "objectives"]], "State of the Library": [[251, "state-of-the-library"]], "Installing the Library": [[251, "installing-the-library"]], "TorchRL envs": [[252, "torchrl-envs"]], "Gym environments": [[252, "gym-environments"]], "Env Specs": [[252, "env-specs"]], "Seeding, resetting and steps": [[252, "seeding-resetting-and-steps"]], "Rollouts": [[252, "rollouts"]], "frame_skip": [[252, "frame-skip"]], "Rendering": [[252, "rendering"]], "DeepMind Control environments": [[252, "deepmind-control-environments"]], "Transforming envs": [[252, "transforming-envs"]], "Environment device": [[252, "environment-device"]], "Running environments in parallel": [[252, "running-environments-in-parallel"]], "Closing parallel environments": [[252, "closing-parallel-environments"]], "Seeding": [[252, "seeding"]], "Accessing environment attributes": [[252, "accessing-environment-attributes"]], "kwargs for parallel environments": [[252, "kwargs-for-parallel-environments"]], "Transforming parallel environments": [[252, "transforming-parallel-environments"]]}, "indexentries": {"implement_for (class in torchrl._utils)": [[11, "torchrl._utils.implement_for"]], "datacollectorbase (class in torchrl.collectors.collectors)": [[12, "torchrl.collectors.collectors.DataCollectorBase"]], "update_policy_weights_() (torchrl.collectors.collectors.datacollectorbase method)": [[12, "torchrl.collectors.collectors.DataCollectorBase.update_policy_weights_"]], "multisyncdatacollector (class in torchrl.collectors.collectors)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multisyncdatacollector method)": [[13, "torchrl.collectors.collectors.MultiSyncDataCollector.update_policy_weights_"]], "multiasyncdatacollector (class in torchrl.collectors.collectors)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[14, "torchrl.collectors.collectors.MultiaSyncDataCollector.update_policy_weights_"]], "randompolicy (class in torchrl.collectors.collectors)": [[15, "torchrl.collectors.collectors.RandomPolicy"]], "syncdatacollector (class in torchrl.collectors.collectors)": [[16, "torchrl.collectors.collectors.SyncDataCollector"]], "iterator() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.iterator"]], "load_state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.reset"]], "rollout() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.rollout"]], "set_seed() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.syncdatacollector method)": [[16, "torchrl.collectors.collectors.SyncDataCollector.update_policy_weights_"]], "asyncdatacollector (class in torchrl.collectors.collectors)": [[17, "torchrl.collectors.collectors.aSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.asyncdatacollector method)": [[17, "torchrl.collectors.collectors.aSyncDataCollector.update_policy_weights_"]], "distributeddatacollector (class in torchrl.collectors.distributed)": [[18, "torchrl.collectors.distributed.DistributedDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributeddatacollector method)": [[18, "torchrl.collectors.distributed.DistributedDataCollector.update_policy_weights_"]], "distributedsyncdatacollector (class in torchrl.collectors.distributed)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.distributedsyncdatacollector method)": [[19, "torchrl.collectors.distributed.DistributedSyncDataCollector.update_policy_weights_"]], "rpcdatacollector (class in torchrl.collectors.distributed)": [[20, "torchrl.collectors.distributed.RPCDataCollector"]], "update_policy_weights_() (torchrl.collectors.distributed.rpcdatacollector method)": [[20, "torchrl.collectors.distributed.RPCDataCollector.update_policy_weights_"]], "submitit_delayed_launcher (class in torchrl.collectors.distributed)": [[21, "torchrl.collectors.distributed.submitit_delayed_launcher"]], "split_trajectories() (in module torchrl.collectors.utils)": [[22, "torchrl.collectors.utils.split_trajectories"]], "binarydiscretetensorspec (class in torchrl.data)": [[23, "torchrl.data.BinaryDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.encode"]], "expand() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.binarydiscretetensorspec class method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.index"]], "is_in() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.is_in"]], "project() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.project"]], "rand() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.binarydiscretetensorspec method)": [[23, "torchrl.data.BinaryDiscreteTensorSpec.zero"]], "boundedtensorspec (class in torchrl.data)": [[24, "torchrl.data.BoundedTensorSpec"]], "assert_is_in() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.assert_is_in"]], "encode() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.encode"]], "expand() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.expand"]], "implements_for_spec() (torchrl.data.boundedtensorspec class method)": [[24, "torchrl.data.BoundedTensorSpec.implements_for_spec"]], "index() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.index"]], "is_in() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.is_in"]], "project() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.project"]], "rand() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.rand"]], "squeeze() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.squeeze"]], "to_numpy() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.to_numpy"]], "type_check() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.type_check"]], "zero() (torchrl.data.boundedtensorspec method)": [[24, "torchrl.data.BoundedTensorSpec.zero"]], "compositespec (class in torchrl.data)": [[25, "torchrl.data.CompositeSpec"]], "assert_is_in() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.assert_is_in"]], "encode() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.encode"]], "expand() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.expand"]], "implements_for_spec() (torchrl.data.compositespec class method)": [[25, "torchrl.data.CompositeSpec.implements_for_spec"]], "index() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.index"]], "is_in() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.is_in"]], "items() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.items"]], "keys() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.keys"]], "project() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.project"]], "rand() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.rand"]], "squeeze() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.squeeze"]], "to_numpy() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.to_numpy"]], "type_check() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.type_check"]], "values() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.values"]], "zero() (torchrl.data.compositespec method)": [[25, "torchrl.data.CompositeSpec.zero"]], "discretetensorspec (class in torchrl.data)": [[26, "torchrl.data.DiscreteTensorSpec"]], "assert_is_in() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.encode"]], "expand() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.discretetensorspec class method)": [[26, "torchrl.data.DiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.index"]], "is_in() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.is_in"]], "project() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.project"]], "rand() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.type_check"]], "zero() (torchrl.data.discretetensorspec method)": [[26, "torchrl.data.DiscreteTensorSpec.zero"]], "multidiscretetensorspec (class in torchrl.data)": [[27, "torchrl.data.MultiDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multidiscretetensorspec class method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.project"]], "rand() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.to_numpy"]], "to_one_hot() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot"]], "to_one_hot_spec() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.to_one_hot_spec"]], "type_check() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multidiscretetensorspec method)": [[27, "torchrl.data.MultiDiscreteTensorSpec.zero"]], "multionehotdiscretetensorspec (class in torchrl.data)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.multionehotdiscretetensorspec class method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multionehotdiscretetensorspec method)": [[28, "torchrl.data.MultiOneHotDiscreteTensorSpec.zero"]], "onehotdiscretetensorspec (class in torchrl.data)": [[29, "torchrl.data.OneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.onehotdiscretetensorspec class method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.squeeze"]], "to_categorical() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical"]], "to_categorical_spec() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.to_categorical_spec"]], "to_numpy() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.onehotdiscretetensorspec method)": [[29, "torchrl.data.OneHotDiscreteTensorSpec.zero"]], "prioritizedreplaybuffer (class in torchrl.data)": [[30, "torchrl.data.PrioritizedReplayBuffer"]], "add() (torchrl.data.prioritizedreplaybuffer method)": [[30, "torchrl.data.PrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.prioritizedreplaybuffer method)": [[30, "torchrl.data.PrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.prioritizedreplaybuffer method)": [[30, "torchrl.data.PrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.prioritizedreplaybuffer method)": [[30, "torchrl.data.PrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.prioritizedreplaybuffer method)": [[30, "torchrl.data.PrioritizedReplayBuffer.sample"]], "replaybuffer (class in torchrl.data)": [[31, "torchrl.data.ReplayBuffer"]], "add() (torchrl.data.replaybuffer method)": [[31, "torchrl.data.ReplayBuffer.add"]], "append_transform() (torchrl.data.replaybuffer method)": [[31, "torchrl.data.ReplayBuffer.append_transform"]], "extend() (torchrl.data.replaybuffer method)": [[31, "torchrl.data.ReplayBuffer.extend"]], "insert_transform() (torchrl.data.replaybuffer method)": [[31, "torchrl.data.ReplayBuffer.insert_transform"]], "sample() (torchrl.data.replaybuffer method)": [[31, "torchrl.data.ReplayBuffer.sample"]], "tensordictprioritizedreplaybuffer (class in torchrl.data)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer"]], "add() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[32, "torchrl.data.TensorDictPrioritizedReplayBuffer.sample"]], "tensordictreplaybuffer (class in torchrl.data)": [[33, "torchrl.data.TensorDictReplayBuffer"]], "add() (torchrl.data.tensordictreplaybuffer method)": [[33, "torchrl.data.TensorDictReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictreplaybuffer method)": [[33, "torchrl.data.TensorDictReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictreplaybuffer method)": [[33, "torchrl.data.TensorDictReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictreplaybuffer method)": [[33, "torchrl.data.TensorDictReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictreplaybuffer method)": [[33, "torchrl.data.TensorDictReplayBuffer.sample"]], "tensorspec (class in torchrl.data)": [[34, "torchrl.data.TensorSpec"]], "assert_is_in() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.assert_is_in"]], "encode() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.encode"]], "expand() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.expand"]], "implements_for_spec() (torchrl.data.tensorspec class method)": [[34, "torchrl.data.TensorSpec.implements_for_spec"]], "index() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.index"]], "is_in() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.is_in"]], "project() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.project"]], "rand() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.rand"]], "squeeze() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.squeeze"]], "to_numpy() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.to_numpy"]], "type_check() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.type_check"]], "zero() (torchrl.data.tensorspec method)": [[34, "torchrl.data.TensorSpec.zero"]], "unboundedcontinuoustensorspec (class in torchrl.data)": [[35, "torchrl.data.UnboundedContinuousTensorSpec"]], "assert_is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.encode"]], "expand() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundedcontinuoustensorspec class method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.index"]], "is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.is_in"]], "project() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.project"]], "rand() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.rand"]], "squeeze() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.type_check"]], "zero() (torchrl.data.unboundedcontinuoustensorspec method)": [[35, "torchrl.data.UnboundedContinuousTensorSpec.zero"]], "unboundeddiscretetensorspec (class in torchrl.data)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.encode"]], "expand() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.expand"]], "implements_for_spec() (torchrl.data.unboundeddiscretetensorspec class method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.implements_for_spec"]], "index() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.index"]], "is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.is_in"]], "project() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.project"]], "rand() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.rand"]], "squeeze() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.squeeze"]], "to_numpy() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.unboundeddiscretetensorspec method)": [[36, "torchrl.data.UnboundedDiscreteTensorSpec.zero"]], "d4rlexperiencereplay (class in torchrl.data.datasets)": [[37, "torchrl.data.datasets.D4RLExperienceReplay"]], "add() (torchrl.data.datasets.d4rlexperiencereplay method)": [[37, "torchrl.data.datasets.D4RLExperienceReplay.add"]], "append_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[37, "torchrl.data.datasets.D4RLExperienceReplay.append_transform"]], "extend() (torchrl.data.datasets.d4rlexperiencereplay method)": [[37, "torchrl.data.datasets.D4RLExperienceReplay.extend"]], "insert_transform() (torchrl.data.datasets.d4rlexperiencereplay method)": [[37, "torchrl.data.datasets.D4RLExperienceReplay.insert_transform"]], "sample() (torchrl.data.datasets.d4rlexperiencereplay method)": [[37, "torchrl.data.datasets.D4RLExperienceReplay.sample"]], "lazymemmapstorage (class in torchrl.data.replay_buffers)": [[38, "torchrl.data.replay_buffers.LazyMemmapStorage"]], "attach() (torchrl.data.replay_buffers.lazymemmapstorage method)": [[38, "torchrl.data.replay_buffers.LazyMemmapStorage.attach"]], "lazytensorstorage (class in torchrl.data.replay_buffers)": [[39, "torchrl.data.replay_buffers.LazyTensorStorage"]], "attach() (torchrl.data.replay_buffers.lazytensorstorage method)": [[39, "torchrl.data.replay_buffers.LazyTensorStorage.attach"]], "liststorage (class in torchrl.data.replay_buffers)": [[40, "torchrl.data.replay_buffers.ListStorage"]], "attach() (torchrl.data.replay_buffers.liststorage method)": [[40, "torchrl.data.replay_buffers.ListStorage.attach"]], "prioritizedsampler (class in torchrl.data.replay_buffers)": [[41, "torchrl.data.replay_buffers.PrioritizedSampler"]], "update_priority() (torchrl.data.replay_buffers.prioritizedsampler method)": [[41, "torchrl.data.replay_buffers.PrioritizedSampler.update_priority"]], "randomsampler (class in torchrl.data.replay_buffers)": [[42, "torchrl.data.replay_buffers.RandomSampler"]], "roundrobinwriter (class in torchrl.data.replay_buffers)": [[43, "torchrl.data.replay_buffers.RoundRobinWriter"]], "add() (torchrl.data.replay_buffers.roundrobinwriter method)": [[43, "torchrl.data.replay_buffers.RoundRobinWriter.add"]], "extend() (torchrl.data.replay_buffers.roundrobinwriter method)": [[43, "torchrl.data.replay_buffers.RoundRobinWriter.extend"]], "sampler (class in torchrl.data.replay_buffers)": [[44, "torchrl.data.replay_buffers.Sampler"]], "samplerwithoutreplacement (class in torchrl.data.replay_buffers)": [[45, "torchrl.data.replay_buffers.SamplerWithoutReplacement"]], "storage (class in torchrl.data.replay_buffers)": [[46, "torchrl.data.replay_buffers.Storage"]], "attach() (torchrl.data.replay_buffers.storage method)": [[46, "torchrl.data.replay_buffers.Storage.attach"]], "writer (class in torchrl.data.replay_buffers)": [[47, "torchrl.data.replay_buffers.Writer"]], "add() (torchrl.data.replay_buffers.writer method)": [[47, "torchrl.data.replay_buffers.Writer.add"]], "extend() (torchrl.data.replay_buffers.writer method)": [[47, "torchrl.data.replay_buffers.Writer.extend"]], "envbase (class in torchrl.envs)": [[48, "torchrl.envs.EnvBase"]], "add_module() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.add_module"]], "apply() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.apply"]], "batch_locked (torchrl.envs.envbase property)": [[48, "torchrl.envs.EnvBase.batch_locked"]], "bfloat16() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.bfloat16"]], "buffers() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.buffers"]], "children() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.children"]], "cpu() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.cpu"]], "cuda() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.cuda"]], "double() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.double"]], "eval() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.eval"]], "extra_repr() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.extra_repr"]], "fake_tensordict() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.fake_tensordict"]], "float() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.float"]], "forward() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.forward"]], "get_buffer() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.get_buffer"]], "get_extra_state() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.get_extra_state"]], "get_parameter() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.get_parameter"]], "get_submodule() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.get_submodule"]], "half() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.half"]], "ipu() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.ipu"]], "load_state_dict() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.load_state_dict"]], "modules() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.modules"]], "named_buffers() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.named_buffers"]], "named_children() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.named_children"]], "named_modules() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.named_modules"]], "named_parameters() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.named_parameters"]], "parameters() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.parameters"]], "rand_action() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.rand_action"]], "rand_step() (torchrl.envs.envbase method)": [[48, "id0"], [48, "torchrl.envs.EnvBase.rand_step"]], "register_backward_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_backward_hook"]], "register_buffer() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_buffer"]], "register_forward_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_module"]], "register_parameter() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.requires_grad_"]], "reset() (torchrl.envs.envbase method)": [[48, "id1"], [48, "torchrl.envs.EnvBase.reset"]], "rollout() (torchrl.envs.envbase method)": [[48, "id2"], [48, "torchrl.envs.EnvBase.rollout"]], "set_extra_state() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.set_extra_state"]], "set_seed() (torchrl.envs.envbase method)": [[48, "id3"], [48, "torchrl.envs.EnvBase.set_seed"]], "share_memory() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.share_memory"]], "specs (torchrl.envs.envbase property)": [[48, "torchrl.envs.EnvBase.specs"]], "state_dict() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.state_dict"]], "step() (torchrl.envs.envbase method)": [[48, "id4"], [48, "torchrl.envs.EnvBase.step"]], "to() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.to"]], "to_empty() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.to_empty"]], "train() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.train"]], "type() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.type"]], "xpu() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.xpu"]], "zero_grad() (torchrl.envs.envbase method)": [[48, "torchrl.envs.EnvBase.zero_grad"]], "envcreator (class in torchrl.envs)": [[49, "torchrl.envs.EnvCreator"]], "envmetadata (class in torchrl.envs)": [[50, "torchrl.envs.EnvMetaData"]], "gymlikeenv (class in torchrl.envs)": [[51, "torchrl.envs.GymLikeEnv"]], "add_module() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.add_module"]], "apply() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.apply"]], "batch_locked (torchrl.envs.gymlikeenv property)": [[51, "torchrl.envs.GymLikeEnv.batch_locked"]], "bfloat16() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.bfloat16"]], "buffers() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.buffers"]], "children() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.children"]], "close() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.close"]], "cpu() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.cpu"]], "cuda() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.cuda"]], "double() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.double"]], "eval() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.eval"]], "extra_repr() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.fake_tensordict"]], "float() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.float"]], "forward() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.forward"]], "get_buffer() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.get_buffer"]], "get_extra_state() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.get_extra_state"]], "get_parameter() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.get_parameter"]], "get_submodule() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.get_submodule"]], "half() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.half"]], "ipu() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.ipu"]], "load_state_dict() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.load_state_dict"]], "modules() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.modules"]], "named_buffers() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.named_buffers"]], "named_children() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.named_children"]], "named_modules() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.named_modules"]], "named_parameters() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.named_parameters"]], "parameters() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.parameters"]], "rand_action() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.rand_action"]], "rand_step() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.rand_step"]], "read_action() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.read_action"]], "read_done() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.read_done"]], "read_obs() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.read_obs"]], "read_reward() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.read_reward"]], "register_backward_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_module"]], "register_parameter() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.requires_grad_"]], "reset() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.reset"]], "rollout() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.rollout"]], "set_extra_state() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.set_extra_state"]], "set_info_dict_reader() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.set_info_dict_reader"]], "set_seed() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.set_seed"]], "share_memory() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.share_memory"]], "specs (torchrl.envs.gymlikeenv property)": [[51, "torchrl.envs.GymLikeEnv.specs"]], "state_dict() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.state_dict"]], "step() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.step"]], "to() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.to"]], "to_empty() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.to_empty"]], "train() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.train"]], "type() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.type"]], "xpu() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.xpu"]], "zero_grad() (torchrl.envs.gymlikeenv method)": [[51, "torchrl.envs.GymLikeEnv.zero_grad"]], "modelbasedenvbase() (in module torchrl.envs)": [[52, "torchrl.envs.ModelBasedEnvBase"]], "rand_step() (in module torchrl.envs)": [[52, "torchrl.envs.rand_step"]], "reset() (in module torchrl.envs)": [[52, "torchrl.envs.reset"]], "rollout() (in module torchrl.envs)": [[52, "torchrl.envs.rollout"]], "set_seed() (in module torchrl.envs)": [[52, "torchrl.envs.set_seed"]], "step() (in module torchrl.envs)": [[52, "torchrl.envs.step"]], "multithreadedenv (class in torchrl.envs)": [[53, "torchrl.envs.MultiThreadedEnv"]], "add_module() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.add_module"]], "apply() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.apply"]], "batch_locked (torchrl.envs.multithreadedenv property)": [[53, "torchrl.envs.MultiThreadedEnv.batch_locked"]], "bfloat16() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.bfloat16"]], "buffers() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.buffers"]], "children() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.children"]], "close() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.close"]], "cpu() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.cpu"]], "cuda() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.cuda"]], "double() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.double"]], "eval() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.eval"]], "extra_repr() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.fake_tensordict"]], "float() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.float"]], "forward() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.forward"]], "get_buffer() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.get_buffer"]], "get_extra_state() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.get_extra_state"]], "get_parameter() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.get_parameter"]], "get_submodule() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.get_submodule"]], "half() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.half"]], "ipu() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.ipu"]], "load_state_dict() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.load_state_dict"]], "modules() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.modules"]], "named_buffers() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.named_buffers"]], "named_children() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.named_children"]], "named_modules() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.named_modules"]], "named_parameters() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.named_parameters"]], "parameters() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.parameters"]], "rand_action() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.rand_action"]], "rand_step() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.rand_step"]], "register_backward_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_module"]], "register_parameter() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.requires_grad_"]], "reset() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.reset"]], "rollout() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.rollout"]], "set_extra_state() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.set_extra_state"]], "set_seed() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.set_seed"]], "share_memory() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.share_memory"]], "specs (torchrl.envs.multithreadedenv property)": [[53, "torchrl.envs.MultiThreadedEnv.specs"]], "state_dict() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.state_dict"]], "step() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.step"]], "to() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.to"]], "to_empty() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.to_empty"]], "train() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.train"]], "type() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.type"]], "xpu() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.xpu"]], "zero_grad() (torchrl.envs.multithreadedenv method)": [[53, "torchrl.envs.MultiThreadedEnv.zero_grad"]], "parallelenv (class in torchrl.envs)": [[54, "torchrl.envs.ParallelEnv"]], "add_module() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.add_module"]], "apply() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.apply"]], "batch_locked (torchrl.envs.parallelenv property)": [[54, "torchrl.envs.ParallelEnv.batch_locked"]], "bfloat16() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.bfloat16"]], "buffers() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.buffers"]], "children() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.children"]], "cpu() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.cpu"]], "cuda() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.cuda"]], "double() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.double"]], "eval() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.eval"]], "extra_repr() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.fake_tensordict"]], "float() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.float"]], "forward() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.forward"]], "get_buffer() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.get_buffer"]], "get_extra_state() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.get_extra_state"]], "get_parameter() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.get_parameter"]], "get_submodule() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.get_submodule"]], "half() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.half"]], "ipu() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.ipu"]], "load_state_dict() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.load_state_dict"]], "modules() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.modules"]], "named_buffers() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.named_buffers"]], "named_children() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.named_children"]], "named_modules() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.named_modules"]], "named_parameters() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.named_parameters"]], "parameters() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.parameters"]], "rand_action() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.rand_action"]], "rand_step() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.rand_step"]], "register_backward_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_module"]], "register_parameter() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.requires_grad_"]], "reset() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.reset"]], "rollout() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.rollout"]], "set_extra_state() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.set_extra_state"]], "set_seed() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.set_seed"]], "share_memory() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.share_memory"]], "specs (torchrl.envs.parallelenv property)": [[54, "torchrl.envs.ParallelEnv.specs"]], "state_dict() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.state_dict"]], "step() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.step"]], "to() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.to"]], "to_empty() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.to_empty"]], "train() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.train"]], "type() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.type"]], "update_kwargs() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.update_kwargs"]], "xpu() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.xpu"]], "zero_grad() (torchrl.envs.parallelenv method)": [[54, "torchrl.envs.ParallelEnv.zero_grad"]], "serialenv (class in torchrl.envs)": [[55, "torchrl.envs.SerialEnv"]], "add_module() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.add_module"]], "apply() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.apply"]], "batch_locked (torchrl.envs.serialenv property)": [[55, "torchrl.envs.SerialEnv.batch_locked"]], "bfloat16() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.bfloat16"]], "buffers() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.buffers"]], "children() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.children"]], "cpu() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.cpu"]], "cuda() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.cuda"]], "double() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.double"]], "eval() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.eval"]], "extra_repr() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.fake_tensordict"]], "float() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.float"]], "forward() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.forward"]], "get_buffer() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.get_buffer"]], "get_extra_state() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.get_extra_state"]], "get_parameter() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.get_parameter"]], "get_submodule() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.get_submodule"]], "half() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.half"]], "ipu() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.ipu"]], "load_state_dict() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.load_state_dict"]], "modules() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.modules"]], "named_buffers() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.named_buffers"]], "named_children() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.named_children"]], "named_modules() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.named_modules"]], "named_parameters() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.named_parameters"]], "parameters() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.parameters"]], "rand_action() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.rand_action"]], "rand_step() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.rand_step"]], "register_backward_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_module"]], "register_parameter() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.requires_grad_"]], "reset() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.reset"]], "rollout() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.rollout"]], "set_extra_state() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.set_extra_state"]], "set_seed() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.set_seed"]], "share_memory() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.share_memory"]], "specs (torchrl.envs.serialenv property)": [[55, "torchrl.envs.SerialEnv.specs"]], "state_dict() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.state_dict"]], "step() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.step"]], "to() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.to"]], "to_empty() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.to_empty"]], "train() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.train"]], "type() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.type"]], "update_kwargs() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.update_kwargs"]], "xpu() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.xpu"]], "zero_grad() (torchrl.envs.serialenv method)": [[55, "torchrl.envs.SerialEnv.zero_grad"]], "braxenv() (in module torchrl.envs.libs.brax)": [[56, "torchrl.envs.libs.brax.BraxEnv"]], "braxwrapper() (in module torchrl.envs.libs.brax)": [[57, "torchrl.envs.libs.brax.BraxWrapper"]], "dmcontrolenv() (in module torchrl.envs.libs.dm_control)": [[58, "torchrl.envs.libs.dm_control.DMControlEnv"]], "dmcontrolwrapper() (in module torchrl.envs.libs.dm_control)": [[59, "torchrl.envs.libs.dm_control.DMControlWrapper"]], "gymenv() (in module torchrl.envs.libs.gym)": [[60, "torchrl.envs.libs.gym.GymEnv"]], "gymwrapper() (in module torchrl.envs.libs.gym)": [[61, "torchrl.envs.libs.gym.GymWrapper"]], "habitatenv() (in module torchrl.envs.libs.habitat)": [[62, "torchrl.envs.libs.habitat.HabitatEnv"]], "jumanjienv() (in module torchrl.envs.libs.jumanji)": [[63, "torchrl.envs.libs.jumanji.JumanjiEnv"]], "jumanjiwrapper() (in module torchrl.envs.libs.jumanji)": [[64, "torchrl.envs.libs.jumanji.JumanjiWrapper"]], "vmasenv() (in module torchrl.envs.libs.vmas)": [[65, "torchrl.envs.libs.vmas.VmasEnv"]], "vmaswrapper() (in module torchrl.envs.libs.vmas)": [[66, "torchrl.envs.libs.vmas.VmasWrapper"]], "dreamerenv() (in module torchrl.envs.model_based.dreamer)": [[67, "torchrl.envs.model_based.dreamer.DreamerEnv"]], "binarizereward (class in torchrl.envs.transforms)": [[68, "torchrl.envs.transforms.BinarizeReward"]], "transform_reward_spec() (torchrl.envs.transforms.binarizereward method)": [[68, "torchrl.envs.transforms.BinarizeReward.transform_reward_spec"]], "catframes (class in torchrl.envs.transforms)": [[69, "torchrl.envs.transforms.CatFrames"]], "forward() (torchrl.envs.transforms.catframes method)": [[69, "torchrl.envs.transforms.CatFrames.forward"]], "reset() (torchrl.envs.transforms.catframes method)": [[69, "torchrl.envs.transforms.CatFrames.reset"]], "transform_observation_spec() (torchrl.envs.transforms.catframes method)": [[69, "torchrl.envs.transforms.CatFrames.transform_observation_spec"]], "cattensors (class in torchrl.envs.transforms)": [[70, "torchrl.envs.transforms.CatTensors"]], "forward() (torchrl.envs.transforms.cattensors method)": [[70, "torchrl.envs.transforms.CatTensors.forward"]], "transform_observation_spec() (torchrl.envs.transforms.cattensors method)": [[70, "torchrl.envs.transforms.CatTensors.transform_observation_spec"]], "centercrop (class in torchrl.envs.transforms)": [[71, "torchrl.envs.transforms.CenterCrop"]], "transform_observation_spec() (torchrl.envs.transforms.centercrop method)": [[71, "torchrl.envs.transforms.CenterCrop.transform_observation_spec"]], "compose (class in torchrl.envs.transforms)": [[72, "torchrl.envs.transforms.Compose"]], "forward() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.forward"]], "reset() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.reset"]], "to() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.to"]], "transform_input_spec() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.compose method)": [[72, "torchrl.envs.transforms.Compose.transform_reward_spec"]], "discreteactionprojection (class in torchrl.envs.transforms)": [[73, "torchrl.envs.transforms.DiscreteActionProjection"]], "transform_input_spec() (torchrl.envs.transforms.discreteactionprojection method)": [[73, "torchrl.envs.transforms.DiscreteActionProjection.transform_input_spec"]], "doubletofloat (class in torchrl.envs.transforms)": [[74, "torchrl.envs.transforms.DoubleToFloat"]], "transform_input_spec() (torchrl.envs.transforms.doubletofloat method)": [[74, "torchrl.envs.transforms.DoubleToFloat.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.doubletofloat method)": [[74, "torchrl.envs.transforms.DoubleToFloat.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.doubletofloat method)": [[74, "torchrl.envs.transforms.DoubleToFloat.transform_reward_spec"]], "excludetransform (class in torchrl.envs.transforms)": [[75, "torchrl.envs.transforms.ExcludeTransform"]], "forward() (torchrl.envs.transforms.excludetransform method)": [[75, "torchrl.envs.transforms.ExcludeTransform.forward"]], "reset() (torchrl.envs.transforms.excludetransform method)": [[75, "torchrl.envs.transforms.ExcludeTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.excludetransform method)": [[75, "torchrl.envs.transforms.ExcludeTransform.transform_observation_spec"]], "finitetensordictcheck (class in torchrl.envs.transforms)": [[76, "torchrl.envs.transforms.FiniteTensorDictCheck"]], "forward() (torchrl.envs.transforms.finitetensordictcheck method)": [[76, "torchrl.envs.transforms.FiniteTensorDictCheck.forward"]], "flattenobservation (class in torchrl.envs.transforms)": [[77, "torchrl.envs.transforms.FlattenObservation"]], "forward() (torchrl.envs.transforms.flattenobservation method)": [[77, "torchrl.envs.transforms.FlattenObservation.forward"]], "transform_observation_spec() (torchrl.envs.transforms.flattenobservation method)": [[77, "torchrl.envs.transforms.FlattenObservation.transform_observation_spec"]], "frameskiptransform (class in torchrl.envs.transforms)": [[78, "torchrl.envs.transforms.FrameSkipTransform"]], "forward() (torchrl.envs.transforms.frameskiptransform method)": [[78, "torchrl.envs.transforms.FrameSkipTransform.forward"]], "grayscale (class in torchrl.envs.transforms)": [[79, "torchrl.envs.transforms.GrayScale"]], "transform_observation_spec() (torchrl.envs.transforms.grayscale method)": [[79, "torchrl.envs.transforms.GrayScale.transform_observation_spec"]], "inittracker (class in torchrl.envs.transforms)": [[80, "torchrl.envs.transforms.InitTracker"]], "forward() (torchrl.envs.transforms.inittracker method)": [[80, "torchrl.envs.transforms.InitTracker.forward"]], "reset() (torchrl.envs.transforms.inittracker method)": [[80, "torchrl.envs.transforms.InitTracker.reset"]], "transform_observation_spec() (torchrl.envs.transforms.inittracker method)": [[80, "torchrl.envs.transforms.InitTracker.transform_observation_spec"]], "noopresetenv (class in torchrl.envs.transforms)": [[81, "torchrl.envs.transforms.NoopResetEnv"]], "reset() (torchrl.envs.transforms.noopresetenv method)": [[81, "torchrl.envs.transforms.NoopResetEnv.reset"]], "observationnorm (class in torchrl.envs.transforms)": [[82, "torchrl.envs.transforms.ObservationNorm"]], "init_stats() (torchrl.envs.transforms.observationnorm method)": [[82, "torchrl.envs.transforms.ObservationNorm.init_stats"]], "transform_input_spec() (torchrl.envs.transforms.observationnorm method)": [[82, "torchrl.envs.transforms.ObservationNorm.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.observationnorm method)": [[82, "torchrl.envs.transforms.ObservationNorm.transform_observation_spec"]], "observationtransform (class in torchrl.envs.transforms)": [[83, "torchrl.envs.transforms.ObservationTransform"]], "pinmemorytransform (class in torchrl.envs.transforms)": [[84, "torchrl.envs.transforms.PinMemoryTransform"]], "forward() (torchrl.envs.transforms.pinmemorytransform method)": [[84, "torchrl.envs.transforms.PinMemoryTransform.forward"]], "r3mtransform (class in torchrl.envs.transforms)": [[85, "torchrl.envs.transforms.R3MTransform"]], "to() (torchrl.envs.transforms.r3mtransform method)": [[85, "torchrl.envs.transforms.R3MTransform.to"]], "randomcroptensordict (class in torchrl.envs.transforms)": [[86, "torchrl.envs.transforms.RandomCropTensorDict"]], "forward() (torchrl.envs.transforms.randomcroptensordict method)": [[86, "torchrl.envs.transforms.RandomCropTensorDict.forward"]], "renametransform (class in torchrl.envs.transforms)": [[87, "torchrl.envs.transforms.RenameTransform"]], "forward() (torchrl.envs.transforms.renametransform method)": [[87, "torchrl.envs.transforms.RenameTransform.forward"]], "transform_input_spec() (torchrl.envs.transforms.renametransform method)": [[87, "torchrl.envs.transforms.RenameTransform.transform_input_spec"]], "transform_output_spec() (torchrl.envs.transforms.renametransform method)": [[87, "torchrl.envs.transforms.RenameTransform.transform_output_spec"]], "resize (class in torchrl.envs.transforms)": [[88, "torchrl.envs.transforms.Resize"]], "transform_observation_spec() (torchrl.envs.transforms.resize method)": [[88, "torchrl.envs.transforms.Resize.transform_observation_spec"]], "rewardclipping (class in torchrl.envs.transforms)": [[89, "torchrl.envs.transforms.RewardClipping"]], "transform_reward_spec() (torchrl.envs.transforms.rewardclipping method)": [[89, "torchrl.envs.transforms.RewardClipping.transform_reward_spec"]], "rewardscaling (class in torchrl.envs.transforms)": [[90, "torchrl.envs.transforms.RewardScaling"]], "transform_reward_spec() (torchrl.envs.transforms.rewardscaling method)": [[90, "torchrl.envs.transforms.RewardScaling.transform_reward_spec"]], "rewardsum (class in torchrl.envs.transforms)": [[91, "torchrl.envs.transforms.RewardSum"]], "forward() (torchrl.envs.transforms.rewardsum method)": [[91, "torchrl.envs.transforms.RewardSum.forward"]], "reset() (torchrl.envs.transforms.rewardsum method)": [[91, "torchrl.envs.transforms.RewardSum.reset"]], "transform_observation_spec() (torchrl.envs.transforms.rewardsum method)": [[91, "torchrl.envs.transforms.RewardSum.transform_observation_spec"]], "selecttransform (class in torchrl.envs.transforms)": [[92, "torchrl.envs.transforms.SelectTransform"]], "forward() (torchrl.envs.transforms.selecttransform method)": [[92, "torchrl.envs.transforms.SelectTransform.forward"]], "reset() (torchrl.envs.transforms.selecttransform method)": [[92, "torchrl.envs.transforms.SelectTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.selecttransform method)": [[92, "torchrl.envs.transforms.SelectTransform.transform_observation_spec"]], "squeezetransform (class in torchrl.envs.transforms)": [[93, "torchrl.envs.transforms.SqueezeTransform"]], "stepcounter (class in torchrl.envs.transforms)": [[94, "torchrl.envs.transforms.StepCounter"]], "forward() (torchrl.envs.transforms.stepcounter method)": [[94, "torchrl.envs.transforms.StepCounter.forward"]], "reset() (torchrl.envs.transforms.stepcounter method)": [[94, "torchrl.envs.transforms.StepCounter.reset"]], "transform_input_spec() (torchrl.envs.transforms.stepcounter method)": [[94, "torchrl.envs.transforms.StepCounter.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.stepcounter method)": [[94, "torchrl.envs.transforms.StepCounter.transform_observation_spec"]], "tensordictprimer (class in torchrl.envs.transforms)": [[95, "torchrl.envs.transforms.TensorDictPrimer"]], "forward() (torchrl.envs.transforms.tensordictprimer method)": [[95, "torchrl.envs.transforms.TensorDictPrimer.forward"]], "reset() (torchrl.envs.transforms.tensordictprimer method)": [[95, "torchrl.envs.transforms.TensorDictPrimer.reset"]], "to() (torchrl.envs.transforms.tensordictprimer method)": [[95, "torchrl.envs.transforms.TensorDictPrimer.to"]], "transform_observation_spec() (torchrl.envs.transforms.tensordictprimer method)": [[95, "torchrl.envs.transforms.TensorDictPrimer.transform_observation_spec"]], "timemaxpool (class in torchrl.envs.transforms)": [[96, "torchrl.envs.transforms.TimeMaxPool"]], "forward() (torchrl.envs.transforms.timemaxpool method)": [[96, "torchrl.envs.transforms.TimeMaxPool.forward"]], "reset() (torchrl.envs.transforms.timemaxpool method)": [[96, "torchrl.envs.transforms.TimeMaxPool.reset"]], "transform_observation_spec() (torchrl.envs.transforms.timemaxpool method)": [[96, "torchrl.envs.transforms.TimeMaxPool.transform_observation_spec"]], "totensorimage (class in torchrl.envs.transforms)": [[97, "torchrl.envs.transforms.ToTensorImage"]], "transform_observation_spec() (torchrl.envs.transforms.totensorimage method)": [[97, "torchrl.envs.transforms.ToTensorImage.transform_observation_spec"]], "transform (class in torchrl.envs.transforms)": [[98, "torchrl.envs.transforms.Transform"]], "forward() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.forward"]], "reset() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.reset"]], "transform_done_spec() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.transform_done_spec"]], "transform_input_spec() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.transform_observation_spec"]], "transform_output_spec() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.transform_output_spec"]], "transform_reward_spec() (torchrl.envs.transforms.transform method)": [[98, "torchrl.envs.transforms.Transform.transform_reward_spec"]], "transformedenv (class in torchrl.envs.transforms)": [[99, "torchrl.envs.transforms.TransformedEnv"]], "action_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.action_spec"]], "batch_locked (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.batch_locked"]], "done_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.done_spec"]], "eval() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.eval"]], "input_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.input_spec"]], "load_state_dict() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.load_state_dict"]], "observation_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.observation_spec"]], "output_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.output_spec"]], "reward_spec (torchrl.envs.transforms.transformedenv property)": [[99, "torchrl.envs.transforms.TransformedEnv.reward_spec"]], "set_seed() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.set_seed"]], "state_dict() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.state_dict"]], "to() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.to"]], "train() (torchrl.envs.transforms.transformedenv method)": [[99, "torchrl.envs.transforms.TransformedEnv.train"]], "unsqueezetransform (class in torchrl.envs.transforms)": [[100, "torchrl.envs.transforms.UnsqueezeTransform"]], "transform_input_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[100, "torchrl.envs.transforms.UnsqueezeTransform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[100, "torchrl.envs.transforms.UnsqueezeTransform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[100, "torchrl.envs.transforms.UnsqueezeTransform.transform_reward_spec"]], "viprewardtransform (class in torchrl.envs.transforms)": [[101, "torchrl.envs.transforms.VIPRewardTransform"]], "forward() (torchrl.envs.transforms.viprewardtransform method)": [[101, "torchrl.envs.transforms.VIPRewardTransform.forward"]], "reset() (torchrl.envs.transforms.viprewardtransform method)": [[101, "torchrl.envs.transforms.VIPRewardTransform.reset"]], "viptransform (class in torchrl.envs.transforms)": [[102, "torchrl.envs.transforms.VIPTransform"]], "to() (torchrl.envs.transforms.viptransform method)": [[102, "torchrl.envs.transforms.VIPTransform.to"]], "vecnorm (class in torchrl.envs.transforms)": [[103, "torchrl.envs.transforms.VecNorm"]], "build_td_for_shared_vecnorm() (torchrl.envs.transforms.vecnorm static method)": [[103, "torchrl.envs.transforms.VecNorm.build_td_for_shared_vecnorm"]], "forward() (torchrl.envs.transforms.vecnorm method)": [[103, "torchrl.envs.transforms.VecNorm.forward"]], "get_extra_state() (torchrl.envs.transforms.vecnorm method)": [[103, "torchrl.envs.transforms.VecNorm.get_extra_state"]], "set_extra_state() (torchrl.envs.transforms.vecnorm method)": [[103, "torchrl.envs.transforms.VecNorm.set_extra_state"]], "to_observation_norm() (torchrl.envs.transforms.vecnorm method)": [[103, "torchrl.envs.transforms.VecNorm.to_observation_norm"]], "gsdenoise (class in torchrl.envs.transforms)": [[104, "torchrl.envs.transforms.gSDENoise"]], "check_env_specs() (in module torchrl.envs.utils)": [[105, "torchrl.envs.utils.check_env_specs"]], "exploration_mode() (in module torchrl.envs.utils)": [[106, "torchrl.envs.utils.exploration_mode"]], "get_available_libraries() (in module torchrl.envs.utils)": [[107, "torchrl.envs.utils.get_available_libraries"]], "set_exploration_mode() (in module torchrl.envs.utils)": [[108, "torchrl.envs.utils.set_exploration_mode"]], "step_mdp() (in module torchrl.envs.utils)": [[109, "torchrl.envs.utils.step_mdp"]], "cemplanner (class in torchrl.modules)": [[110, "torchrl.modules.CEMPlanner"]], "planning() (torchrl.modules.cemplanner method)": [[110, "torchrl.modules.CEMPlanner.planning"]], "convnet (class in torchrl.modules)": [[111, "torchrl.modules.ConvNet"]], "forward() (torchrl.modules.convnet method)": [[111, "torchrl.modules.ConvNet.forward"]], "ddpgcnnactor (class in torchrl.modules)": [[112, "torchrl.modules.DdpgCnnActor"]], "forward() (torchrl.modules.ddpgcnnactor method)": [[112, "torchrl.modules.DdpgCnnActor.forward"]], "ddpgcnnqnet (class in torchrl.modules)": [[113, "torchrl.modules.DdpgCnnQNet"]], "forward() (torchrl.modules.ddpgcnnqnet method)": [[113, "torchrl.modules.DdpgCnnQNet.forward"]], "ddpgmlpactor (class in torchrl.modules)": [[114, "torchrl.modules.DdpgMlpActor"]], "forward() (torchrl.modules.ddpgmlpactor method)": [[114, "torchrl.modules.DdpgMlpActor.forward"]], "ddpgmlpqnet (class in torchrl.modules)": [[115, "torchrl.modules.DdpgMlpQNet"]], "forward() (torchrl.modules.ddpgmlpqnet method)": [[115, "torchrl.modules.DdpgMlpQNet.forward"]], "delta (class in torchrl.modules)": [[116, "torchrl.modules.Delta"]], "log_prob() (torchrl.modules.delta method)": [[116, "torchrl.modules.Delta.log_prob"]], "mean (torchrl.modules.delta property)": [[116, "torchrl.modules.Delta.mean"]], "mode (torchrl.modules.delta property)": [[116, "torchrl.modules.Delta.mode"]], "rsample() (torchrl.modules.delta method)": [[116, "torchrl.modules.Delta.rsample"]], "sample() (torchrl.modules.delta method)": [[116, "torchrl.modules.Delta.sample"]], "distributionaldqnnet (class in torchrl.modules)": [[117, "torchrl.modules.DistributionalDQNnet"]], "forward() (torchrl.modules.distributionaldqnnet method)": [[117, "torchrl.modules.DistributionalDQNnet.forward"]], "dreameractor (class in torchrl.modules)": [[118, "torchrl.modules.DreamerActor"]], "forward() (torchrl.modules.dreameractor method)": [[118, "torchrl.modules.DreamerActor.forward"]], "duelingcnndqnet (class in torchrl.modules)": [[119, "torchrl.modules.DuelingCnnDQNet"]], "forward() (torchrl.modules.duelingcnndqnet method)": [[119, "torchrl.modules.DuelingCnnDQNet.forward"]], "independentnormal (class in torchrl.modules)": [[120, "torchrl.modules.IndependentNormal"]], "mode (torchrl.modules.independentnormal property)": [[120, "torchrl.modules.IndependentNormal.mode"]], "lstmnet (class in torchrl.modules)": [[121, "torchrl.modules.LSTMNet"]], "forward() (torchrl.modules.lstmnet method)": [[121, "torchrl.modules.LSTMNet.forward"]], "mlp (class in torchrl.modules)": [[122, "torchrl.modules.MLP"]], "forward() (torchrl.modules.mlp method)": [[122, "torchrl.modules.MLP.forward"]], "mpcplannerbase (class in torchrl.modules)": [[123, "torchrl.modules.MPCPlannerBase"]], "forward() (torchrl.modules.mpcplannerbase method)": [[123, "torchrl.modules.MPCPlannerBase.forward"]], "planning() (torchrl.modules.mpcplannerbase method)": [[123, "torchrl.modules.MPCPlannerBase.planning"]], "mppiplanner (class in torchrl.modules)": [[124, "torchrl.modules.MPPIPlanner"]], "planning() (torchrl.modules.mppiplanner method)": [[124, "torchrl.modules.MPPIPlanner.planning"]], "noisylazylinear (class in torchrl.modules)": [[125, "torchrl.modules.NoisyLazyLinear"]], "initialize_parameters() (torchrl.modules.noisylazylinear method)": [[125, "torchrl.modules.NoisyLazyLinear.initialize_parameters"]], "noisylinear (class in torchrl.modules)": [[126, "torchrl.modules.NoisyLinear"]], "normalparamwrapper (class in torchrl.modules)": [[127, "torchrl.modules.NormalParamWrapper"]], "forward() (torchrl.modules.normalparamwrapper method)": [[127, "torchrl.modules.NormalParamWrapper.forward"]], "obsdecoder (class in torchrl.modules)": [[128, "torchrl.modules.ObsDecoder"]], "forward() (torchrl.modules.obsdecoder method)": [[128, "torchrl.modules.ObsDecoder.forward"]], "obsencoder (class in torchrl.modules)": [[129, "torchrl.modules.ObsEncoder"]], "forward() (torchrl.modules.obsencoder method)": [[129, "torchrl.modules.ObsEncoder.forward"]], "onehotcategorical (class in torchrl.modules)": [[130, "torchrl.modules.OneHotCategorical"]], "log_prob() (torchrl.modules.onehotcategorical method)": [[130, "torchrl.modules.OneHotCategorical.log_prob"]], "mode (torchrl.modules.onehotcategorical property)": [[130, "torchrl.modules.OneHotCategorical.mode"]], "rsample() (torchrl.modules.onehotcategorical method)": [[130, "torchrl.modules.OneHotCategorical.rsample"]], "sample() (torchrl.modules.onehotcategorical method)": [[130, "torchrl.modules.OneHotCategorical.sample"]], "rssmposterior (class in torchrl.modules)": [[131, "torchrl.modules.RSSMPosterior"]], "forward() (torchrl.modules.rssmposterior method)": [[131, "torchrl.modules.RSSMPosterior.forward"]], "rssmprior (class in torchrl.modules)": [[132, "torchrl.modules.RSSMPrior"]], "forward() (torchrl.modules.rssmprior method)": [[132, "torchrl.modules.RSSMPrior.forward"]], "tanhdelta (class in torchrl.modules)": [[133, "torchrl.modules.TanhDelta"]], "mean (torchrl.modules.tanhdelta property)": [[133, "torchrl.modules.TanhDelta.mean"]], "mode (torchrl.modules.tanhdelta property)": [[133, "torchrl.modules.TanhDelta.mode"]], "tanhnormal (class in torchrl.modules)": [[134, "torchrl.modules.TanhNormal"]], "mode (torchrl.modules.tanhnormal property)": [[134, "torchrl.modules.TanhNormal.mode"]], "truncatednormal (class in torchrl.modules)": [[135, "torchrl.modules.TruncatedNormal"]], "log_prob() (torchrl.modules.truncatednormal method)": [[135, "torchrl.modules.TruncatedNormal.log_prob"]], "mode (torchrl.modules.truncatednormal property)": [[135, "torchrl.modules.TruncatedNormal.mode"]], "reset_noise (class in torchrl.modules)": [[136, "torchrl.modules.reset_noise"]], "actor (class in torchrl.modules.tensordict_module)": [[137, "torchrl.modules.tensordict_module.Actor"]], "actorcriticoperator (class in torchrl.modules.tensordict_module)": [[138, "torchrl.modules.tensordict_module.ActorCriticOperator"]], "get_critic_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[138, "torchrl.modules.tensordict_module.ActorCriticOperator.get_critic_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[138, "torchrl.modules.tensordict_module.ActorCriticOperator.get_value_operator"]], "actorcriticwrapper (class in torchrl.modules.tensordict_module)": [[139, "torchrl.modules.tensordict_module.ActorCriticWrapper"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[139, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[139, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_value_operator"]], "actorvalueoperator (class in torchrl.modules.tensordict_module)": [[140, "torchrl.modules.tensordict_module.ActorValueOperator"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[140, "torchrl.modules.tensordict_module.ActorValueOperator.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[140, "torchrl.modules.tensordict_module.ActorValueOperator.get_value_operator"]], "additivegaussianwrapper (class in torchrl.modules.tensordict_module)": [[141, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper"]], "forward() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[141, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.forward"]], "step() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[141, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.step"]], "distributionalqvalueactor (class in torchrl.modules.tensordict_module)": [[142, "torchrl.modules.tensordict_module.DistributionalQValueActor"]], "egreedywrapper (class in torchrl.modules.tensordict_module)": [[143, "torchrl.modules.tensordict_module.EGreedyWrapper"]], "forward() (torchrl.modules.tensordict_module.egreedywrapper method)": [[143, "torchrl.modules.tensordict_module.EGreedyWrapper.forward"]], "step() (torchrl.modules.tensordict_module.egreedywrapper method)": [[143, "torchrl.modules.tensordict_module.EGreedyWrapper.step"]], "ornsteinuhlenbeckprocesswrapper (class in torchrl.modules.tensordict_module)": [[144, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper"]], "forward() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[144, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.forward"]], "step() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[144, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.step"]], "probabilisticactor (class in torchrl.modules.tensordict_module)": [[145, "torchrl.modules.tensordict_module.ProbabilisticActor"]], "qvalueactor (class in torchrl.modules.tensordict_module)": [[146, "torchrl.modules.tensordict_module.QValueActor"]], "safemodule (class in torchrl.modules.tensordict_module)": [[147, "torchrl.modules.tensordict_module.SafeModule"]], "random() (torchrl.modules.tensordict_module.safemodule method)": [[147, "torchrl.modules.tensordict_module.SafeModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safemodule method)": [[147, "torchrl.modules.tensordict_module.SafeModule.random_sample"]], "to() (torchrl.modules.tensordict_module.safemodule method)": [[147, "torchrl.modules.tensordict_module.SafeModule.to"]], "safeprobabilisticmodule (class in torchrl.modules.tensordict_module)": [[148, "torchrl.modules.tensordict_module.SafeProbabilisticModule"]], "random() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[148, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[148, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random_sample"]], "safeprobabilisticsequential (class in torchrl.modules.tensordict_module)": [[149, "torchrl.modules.tensordict_module.SafeProbabilisticSequential"]], "safesequential (class in torchrl.modules.tensordict_module)": [[150, "torchrl.modules.tensordict_module.SafeSequential"]], "valueoperator (class in torchrl.modules.tensordict_module)": [[151, "torchrl.modules.tensordict_module.ValueOperator"]], "worldmodelwrapper (class in torchrl.modules.tensordict_module)": [[152, "torchrl.modules.tensordict_module.WorldModelWrapper"]], "get_reward_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[152, "torchrl.modules.tensordict_module.WorldModelWrapper.get_reward_operator"]], "get_transition_model_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[152, "torchrl.modules.tensordict_module.WorldModelWrapper.get_transition_model_operator"]], "distributionalqvaluehook (class in torchrl.modules.tensordict_module.actors)": [[153, "torchrl.modules.tensordict_module.actors.DistributionalQValueHook"]], "qvaluehook (class in torchrl.modules.tensordict_module.actors)": [[154, "torchrl.modules.tensordict_module.actors.QValueHook"]], "ensure_tensordict_compatible (class in torchrl.modules.tensordict_module.common)": [[155, "torchrl.modules.tensordict_module.common.ensure_tensordict_compatible"]], "is_tensordict_compatible (class in torchrl.modules.tensordict_module.common)": [[156, "torchrl.modules.tensordict_module.common.is_tensordict_compatible"]], "biased_softplus (class in torchrl.modules.utils)": [[157, "torchrl.modules.utils.biased_softplus"]], "forward() (torchrl.modules.utils.biased_softplus method)": [[157, "torchrl.modules.utils.biased_softplus.forward"]], "inv_softplus (class in torchrl.modules.utils)": [[158, "torchrl.modules.utils.inv_softplus"]], "mappings (class in torchrl.modules.utils)": [[159, "torchrl.modules.utils.mappings"]], "a2closs (class in torchrl.objectives)": [[160, "torchrl.objectives.A2CLoss"]], "forward() (torchrl.objectives.a2closs method)": [[160, "torchrl.objectives.A2CLoss.forward"]], "clipppoloss (class in torchrl.objectives)": [[161, "torchrl.objectives.ClipPPOLoss"]], "forward() (torchrl.objectives.clipppoloss method)": [[161, "torchrl.objectives.ClipPPOLoss.forward"]], "ddpgloss (class in torchrl.objectives)": [[162, "torchrl.objectives.DDPGLoss"]], "forward() (torchrl.objectives.ddpgloss method)": [[162, "torchrl.objectives.DDPGLoss.forward"]], "dqnloss (class in torchrl.objectives)": [[163, "torchrl.objectives.DQNLoss"]], "forward() (torchrl.objectives.dqnloss method)": [[163, "torchrl.objectives.DQNLoss.forward"]], "discretesacloss (class in torchrl.objectives)": [[164, "torchrl.objectives.DiscreteSACLoss"]], "forward() (torchrl.objectives.discretesacloss method)": [[164, "torchrl.objectives.DiscreteSACLoss.forward"]], "distributionaldqnloss (class in torchrl.objectives)": [[165, "torchrl.objectives.DistributionalDQNLoss"]], "forward() (torchrl.objectives.distributionaldqnloss method)": [[165, "torchrl.objectives.DistributionalDQNLoss.forward"]], "dreameractorloss (class in torchrl.objectives)": [[166, "torchrl.objectives.DreamerActorLoss"]], "forward() (torchrl.objectives.dreameractorloss method)": [[166, "torchrl.objectives.DreamerActorLoss.forward"]], "dreamermodelloss (class in torchrl.objectives)": [[167, "torchrl.objectives.DreamerModelLoss"]], "forward() (torchrl.objectives.dreamermodelloss method)": [[167, "torchrl.objectives.DreamerModelLoss.forward"]], "dreamervalueloss (class in torchrl.objectives)": [[168, "torchrl.objectives.DreamerValueLoss"]], "forward() (torchrl.objectives.dreamervalueloss method)": [[168, "torchrl.objectives.DreamerValueLoss.forward"]], "hardupdate (class in torchrl.objectives)": [[169, "torchrl.objectives.HardUpdate"]], "iqlloss (class in torchrl.objectives)": [[170, "torchrl.objectives.IQLLoss"]], "forward() (torchrl.objectives.iqlloss method)": [[170, "torchrl.objectives.IQLLoss.forward"]], "loss_value_diff() (torchrl.objectives.iqlloss static method)": [[170, "torchrl.objectives.IQLLoss.loss_value_diff"]], "klpenppoloss (class in torchrl.objectives)": [[171, "torchrl.objectives.KLPENPPOLoss"]], "forward() (torchrl.objectives.klpenppoloss method)": [[171, "torchrl.objectives.KLPENPPOLoss.forward"]], "ppoloss (class in torchrl.objectives)": [[172, "torchrl.objectives.PPOLoss"]], "forward() (torchrl.objectives.ppoloss method)": [[172, "torchrl.objectives.PPOLoss.forward"]], "redqloss (class in torchrl.objectives)": [[173, "torchrl.objectives.REDQLoss"]], "forward() (torchrl.objectives.redqloss method)": [[173, "torchrl.objectives.REDQLoss.forward"]], "reinforceloss (class in torchrl.objectives)": [[174, "torchrl.objectives.ReinforceLoss"]], "forward() (torchrl.objectives.reinforceloss method)": [[174, "torchrl.objectives.ReinforceLoss.forward"]], "sacloss (class in torchrl.objectives)": [[175, "torchrl.objectives.SACLoss"]], "forward() (torchrl.objectives.sacloss method)": [[175, "torchrl.objectives.SACLoss.forward"]], "softupdate (class in torchrl.objectives)": [[176, "torchrl.objectives.SoftUpdate"]], "td3loss (class in torchrl.objectives)": [[177, "torchrl.objectives.TD3Loss"]], "forward() (torchrl.objectives.td3loss method)": [[177, "torchrl.objectives.TD3Loss.forward"]], "distance_loss (class in torchrl.objectives)": [[178, "torchrl.objectives.distance_loss"]], "hold_out_net (class in torchrl.objectives)": [[179, "torchrl.objectives.hold_out_net"]], "hold_out_params (class in torchrl.objectives)": [[180, "torchrl.objectives.hold_out_params"]], "next_state_value (class in torchrl.objectives)": [[181, "torchrl.objectives.next_state_value"]], "gae (class in torchrl.objectives.value)": [[182, "torchrl.objectives.value.GAE"]], "forward() (torchrl.objectives.value.gae method)": [[182, "torchrl.objectives.value.GAE.forward"]], "tdestimate (class in torchrl.objectives.value)": [[183, "torchrl.objectives.value.TDEstimate"]], "forward() (torchrl.objectives.value.tdestimate method)": [[183, "torchrl.objectives.value.TDEstimate.forward"]], "tdlambdaestimate (class in torchrl.objectives.value)": [[184, "torchrl.objectives.value.TDLambdaEstimate"]], "forward() (torchrl.objectives.value.tdlambdaestimate method)": [[184, "torchrl.objectives.value.TDLambdaEstimate.forward"]], "generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[185, "torchrl.objectives.value.functional.generalized_advantage_estimate"]], "td_advantage_estimate (class in torchrl.objectives.value.functional)": [[186, "torchrl.objectives.value.functional.td_advantage_estimate"]], "td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[187, "torchrl.objectives.value.functional.td_lambda_advantage_estimate"]], "td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[188, "torchrl.objectives.value.functional.td_lambda_return_estimate"]], "vec_generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[189, "torchrl.objectives.value.functional.vec_generalized_advantage_estimate"]], "vec_td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[190, "torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate"]], "vec_td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[191, "torchrl.objectives.value.functional.vec_td_lambda_return_estimate"]], "tensordictrecorder() (in module torchrl.record)": [[192, "torchrl.record.TensorDictRecorder"]], "videorecorder() (in module torchrl.record)": [[193, "torchrl.record.VideoRecorder"]], "logger() (in module torchrl.record.loggers)": [[194, "torchrl.record.loggers.Logger"]], "csvlogger() (in module torchrl.record.loggers.csv)": [[195, "torchrl.record.loggers.csv.CSVLogger"]], "generate_exp_name() (in module torchrl.record.loggers)": [[196, "torchrl.record.loggers.generate_exp_name"]], "get_logger() (in module torchrl.record.loggers)": [[197, "torchrl.record.loggers.get_logger"]], "mlflowlogger() (in module torchrl.record.loggers.mlflow)": [[198, "torchrl.record.loggers.mlflow.MLFlowLogger"]], "tensorboardlogger() (in module torchrl.record.loggers.tensorboard)": [[199, "torchrl.record.loggers.tensorboard.TensorboardLogger"]], "wandblogger() (in module torchrl.record.loggers.wandb)": [[200, "torchrl.record.loggers.wandb.WandbLogger"]], "batchsubsampler (class in torchrl.trainers)": [[201, "torchrl.trainers.BatchSubSampler"]], "clearcudacache (class in torchrl.trainers)": [[202, "torchrl.trainers.ClearCudaCache"]], "countframeslog (class in torchrl.trainers)": [[203, "torchrl.trainers.CountFramesLog"]], "logreward (class in torchrl.trainers)": [[204, "torchrl.trainers.LogReward"]], "optimizerhook (class in torchrl.trainers)": [[205, "torchrl.trainers.OptimizerHook"]], "recorder (class in torchrl.trainers)": [[206, "torchrl.trainers.Recorder"]], "replaybuffertrainer (class in torchrl.trainers)": [[207, "torchrl.trainers.ReplayBufferTrainer"]], "rewardnormalizer (class in torchrl.trainers)": [[208, "torchrl.trainers.RewardNormalizer"]], "selectkeys (class in torchrl.trainers)": [[209, "torchrl.trainers.SelectKeys"]], "trainer (class in torchrl.trainers)": [[210, "torchrl.trainers.Trainer"]], "trainerhookbase (class in torchrl.trainers)": [[211, "torchrl.trainers.TrainerHookBase"]], "updateweights (class in torchrl.trainers)": [[212, "torchrl.trainers.UpdateWeights"]], "correct_for_frame_skip() (in module torchrl.trainers.helpers)": [[213, "torchrl.trainers.helpers.correct_for_frame_skip"]], "get_stats_random_rollout() (in module torchrl.trainers.helpers)": [[214, "torchrl.trainers.helpers.get_stats_random_rollout"]], "make_a2c_loss() (in module torchrl.trainers.helpers)": [[215, "torchrl.trainers.helpers.make_a2c_loss"]], "make_a2c_model() (in module torchrl.trainers.helpers)": [[216, "torchrl.trainers.helpers.make_a2c_model"]], "make_collector_offpolicy() (in module torchrl.trainers.helpers)": [[217, "torchrl.trainers.helpers.make_collector_offpolicy"]], "make_collector_onpolicy() (in module torchrl.trainers.helpers)": [[218, "torchrl.trainers.helpers.make_collector_onpolicy"]], "make_ddpg_actor() (in module torchrl.trainers.helpers)": [[219, "torchrl.trainers.helpers.make_ddpg_actor"]], "make_ddpg_loss() (in module torchrl.trainers.helpers)": [[220, "torchrl.trainers.helpers.make_ddpg_loss"]], "make_dqn_actor() (in module torchrl.trainers.helpers)": [[221, "torchrl.trainers.helpers.make_dqn_actor"]], "make_dqn_loss() (in module torchrl.trainers.helpers)": [[222, "torchrl.trainers.helpers.make_dqn_loss"]], "make_ppo_loss() (in module torchrl.trainers.helpers)": [[223, "torchrl.trainers.helpers.make_ppo_loss"]], "make_ppo_model() (in module torchrl.trainers.helpers)": [[224, "torchrl.trainers.helpers.make_ppo_model"]], "make_redq_loss() (in module torchrl.trainers.helpers)": [[225, "torchrl.trainers.helpers.make_redq_loss"]], "make_redq_model() (in module torchrl.trainers.helpers)": [[226, "torchrl.trainers.helpers.make_redq_model"]], "make_replay_buffer() (in module torchrl.trainers.helpers)": [[227, "torchrl.trainers.helpers.make_replay_buffer"]], "make_sac_loss() (in module torchrl.trainers.helpers)": [[228, "torchrl.trainers.helpers.make_sac_loss"]], "make_sac_model() (in module torchrl.trainers.helpers)": [[229, "torchrl.trainers.helpers.make_sac_model"]], "make_target_updater() (in module torchrl.trainers.helpers)": [[230, "torchrl.trainers.helpers.make_target_updater"]], "make_trainer() (in module torchrl.trainers.helpers)": [[231, "torchrl.trainers.helpers.make_trainer"]], "parallel_env_constructor() (in module torchrl.trainers.helpers)": [[232, "torchrl.trainers.helpers.parallel_env_constructor"]], "sync_async_collector() (in module torchrl.trainers.helpers)": [[233, "torchrl.trainers.helpers.sync_async_collector"]], "sync_sync_collector() (in module torchrl.trainers.helpers)": [[234, "torchrl.trainers.helpers.sync_sync_collector"]], "transformed_env_constructor() (in module torchrl.trainers.helpers)": [[235, "torchrl.trainers.helpers.transformed_env_constructor"]]}})