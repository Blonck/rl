
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "tutorials/pretrained_models.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_tutorials_pretrained_models.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_tutorials_pretrained_models.py:


Using pretrained models
=======================
This tutorial explains how to use pretrained models in TorchRL.

.. GENERATED FROM PYTHON SOURCE LINES 8-16

At the end of this tutorial, you will be capable of using pretrained models
for efficient image representation, and fine-tune them.

TorchRL provides pretrained models that are to be used either as transforms or as
components of the policy. As the sematic is the same, they can be used interchangeably
in one or the other context. In this tutorial, we will be using R3M (https://arxiv.org/abs/2203.12601),
but other models (e.g. VIP) will work equally well.


.. GENERATED FROM PYTHON SOURCE LINES 16-25

.. code-block:: default

    import torch.cuda
    from tensordict.nn import TensorDictSequential
    from torch import nn
    from torchrl.envs import R3MTransform, TransformedEnv
    from torchrl.envs.libs.gym import GymEnv
    from torchrl.modules import Actor

    device = "cuda:0" if torch.cuda.device_count() else "cpu"








.. GENERATED FROM PYTHON SOURCE LINES 26-30

Let us first create an environment. For the sake of simplicity, we will be using
a common gym environment. In practice, this will work in more challenging, embodied
AI contexts (e.g. have a look at our Habitat wrappers).


.. GENERATED FROM PYTHON SOURCE LINES 30-32

.. code-block:: default

    base_env = GymEnv("Ant-v4", from_pixels=True, device=device)








.. GENERATED FROM PYTHON SOURCE LINES 33-40

Let us fetch our pretrained model. We ask for the pretrained version of the model through the
download=True flag. By default this is turned off.
Next, we will append our transform to the environment. In practice, what will happen is that
each batch of data collected will go through the transform and be mapped on a "r3m_vec" entry
in the output tensordict. Our policy, consisting of a single layer MLP, will then read this vector and compute
the corresponding action.


.. GENERATED FROM PYTHON SOURCE LINES 40-47

.. code-block:: default

    r3m = R3MTransform("resnet50", in_keys=["pixels"], download=True).to(device)
    env_transformed = TransformedEnv(base_env, r3m)
    net = nn.Sequential(
        nn.LazyLinear(128), nn.Tanh(), nn.Linear(128, base_env.action_spec.shape[-1])
    )
    policy = Actor(net, in_keys=["r3m_vec"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://pytorch.s3.amazonaws.com/models/rl/r3m/r3m_50.pt" to /github/home/.cache/torch/hub/checkpoints/r3m_50.pt
      0%|          | 0.00/374M [00:00<?, ?B/s]      0%|          | 56.0k/374M [00:00<14:44, 444kB/s]      0%|          | 208k/374M [00:00<06:36, 990kB/s]       0%|          | 888k/374M [00:00<02:08, 3.05MB/s]      1%|          | 3.08M/374M [00:00<00:39, 9.92MB/s]      2%|1         | 6.23M/374M [00:00<00:22, 17.2MB/s]      3%|2         | 10.6M/374M [00:00<00:14, 26.1MB/s]      4%|3         | 14.1M/374M [00:00<00:12, 29.2MB/s]      5%|5         | 19.0M/374M [00:00<00:10, 36.0MB/s]      6%|6         | 22.6M/374M [00:00<00:10, 36.0MB/s]      7%|7         | 27.5M/374M [00:01<00:09, 40.3MB/s]      8%|8         | 31.4M/374M [00:01<00:09, 39.6MB/s]     10%|9         | 36.4M/374M [00:01<00:08, 40.2MB/s]     11%|#1        | 41.2M/374M [00:01<00:08, 42.8MB/s]     12%|#2        | 45.4M/374M [00:01<00:08, 42.7MB/s]     13%|#3        | 49.7M/374M [00:01<00:07, 43.4MB/s]     14%|#4        | 53.8M/374M [00:01<00:07, 42.3MB/s]     16%|#5        | 58.8M/374M [00:01<00:07, 45.0MB/s]     17%|#6        | 63.1M/374M [00:01<00:07, 43.6MB/s]     18%|#8        | 67.8M/374M [00:02<00:07, 43.5MB/s]     19%|#9        | 72.3M/374M [00:02<00:07, 44.6MB/s]     20%|##        | 76.6M/374M [00:02<00:07, 43.7MB/s]     22%|##1       | 81.0M/374M [00:02<00:06, 44.3MB/s]     23%|##2       | 85.2M/374M [00:02<00:06, 43.7MB/s]     24%|##3       | 89.5M/374M [00:02<00:06, 44.1MB/s]     25%|##5       | 93.7M/374M [00:02<00:06, 43.9MB/s]     26%|##6       | 97.9M/374M [00:02<00:06, 43.7MB/s]     27%|##7       | 102M/374M [00:02<00:06, 44.7MB/s]      29%|##8       | 107M/374M [00:02<00:06, 44.2MB/s]     30%|##9       | 111M/374M [00:03<00:06, 44.1MB/s]     31%|###       | 116M/374M [00:03<00:06, 45.1MB/s]     32%|###2      | 120M/374M [00:03<00:06, 43.8MB/s]     33%|###3      | 125M/374M [00:03<00:05, 44.1MB/s]     34%|###4      | 129M/374M [00:03<00:05, 44.0MB/s]     36%|###5      | 133M/374M [00:03<00:05, 44.3MB/s]     37%|###6      | 137M/374M [00:03<00:05, 42.9MB/s]     38%|###8      | 143M/374M [00:03<00:05, 46.0MB/s]     39%|###9      | 147M/374M [00:03<00:05, 44.8MB/s]     40%|####      | 152M/374M [00:04<00:05, 42.0MB/s]     42%|####1     | 157M/374M [00:04<00:04, 45.9MB/s]     43%|####3     | 162M/374M [00:04<00:04, 44.9MB/s]     44%|####4     | 166M/374M [00:04<00:05, 41.9MB/s]     46%|####5     | 171M/374M [00:04<00:04, 46.2MB/s]     47%|####7     | 176M/374M [00:04<00:04, 45.0MB/s]     48%|####8     | 180M/374M [00:04<00:04, 41.7MB/s]     50%|####9     | 186M/374M [00:04<00:04, 41.8MB/s]     51%|#####1    | 191M/374M [00:05<00:04, 41.9MB/s]     53%|#####2    | 197M/374M [00:05<00:04, 43.1MB/s]     54%|#####4    | 202M/374M [00:05<00:04, 42.7MB/s]     56%|#####5    | 208M/374M [00:05<00:04, 43.2MB/s]     57%|#####7    | 214M/374M [00:05<00:03, 43.5MB/s]     59%|#####8    | 219M/374M [00:05<00:03, 43.4MB/s]     60%|######    | 225M/374M [00:05<00:03, 43.5MB/s]     62%|######1   | 231M/374M [00:05<00:03, 43.2MB/s]     63%|######3   | 236M/374M [00:06<00:03, 43.3MB/s]     65%|######4   | 242M/374M [00:06<00:03, 43.5MB/s]     66%|######6   | 248M/374M [00:06<00:03, 43.9MB/s]     68%|######7   | 253M/374M [00:06<00:02, 44.2MB/s]     69%|######9   | 259M/374M [00:06<00:02, 44.4MB/s]     71%|#######   | 265M/374M [00:06<00:02, 47.2MB/s]     72%|#######1  | 269M/374M [00:06<00:02, 44.1MB/s]     73%|#######3  | 273M/374M [00:06<00:02, 42.3MB/s]     74%|#######4  | 279M/374M [00:07<00:02, 43.0MB/s]     76%|#######5  | 284M/374M [00:07<00:02, 45.3MB/s]     77%|#######6  | 288M/374M [00:07<00:02, 44.1MB/s]     78%|#######8  | 293M/374M [00:07<00:02, 42.4MB/s]     80%|#######9  | 298M/374M [00:07<00:01, 45.3MB/s]     81%|########  | 302M/374M [00:07<00:01, 44.1MB/s]     82%|########1 | 307M/374M [00:07<00:01, 42.6MB/s]     83%|########3 | 312M/374M [00:07<00:01, 45.1MB/s]     84%|########4 | 316M/374M [00:07<00:01, 44.1MB/s]     86%|########5 | 321M/374M [00:08<00:01, 45.1MB/s]     87%|########6 | 325M/374M [00:08<00:01, 44.1MB/s]     88%|########8 | 330M/374M [00:08<00:01, 43.9MB/s]     89%|########9 | 334M/374M [00:08<00:00, 44.8MB/s]     91%|######### | 339M/374M [00:08<00:00, 44.3MB/s]     92%|#########1| 343M/374M [00:08<00:00, 45.3MB/s]     93%|#########2| 348M/374M [00:08<00:00, 43.4MB/s]     94%|#########4| 352M/374M [00:08<00:00, 45.2MB/s]     95%|#########5| 357M/374M [00:08<00:00, 44.7MB/s]     97%|#########6| 361M/374M [00:09<00:00, 44.2MB/s]     98%|#########7| 366M/374M [00:09<00:00, 44.9MB/s]     99%|#########8| 370M/374M [00:09<00:00, 44.1MB/s]    100%|##########| 374M/374M [00:09<00:00, 41.9MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 48-50

Let's check the number of parameters of the policy:


.. GENERATED FROM PYTHON SOURCE LINES 50-52

.. code-block:: default

    print("number of params:", len(list(policy.parameters())))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    number of params: 4




.. GENERATED FROM PYTHON SOURCE LINES 53-55

We collect a rollout of 32 steps and print its output:


.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    rollout = env_transformed.rollout(32, policy)
    print("rollout with transform:", rollout)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    rollout with transform: TensorDict(
        fields={
            action: Tensor(shape=torch.Size([32, 8]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.bool, is_shared=False),
            next: TensorDict(
                fields={
                    r3m_vec: Tensor(shape=torch.Size([32, 2048]), device=cpu, dtype=torch.float32, is_shared=False)},
                batch_size=torch.Size([32]),
                device=cpu,
                is_shared=False),
            r3m_vec: Tensor(shape=torch.Size([32, 2048]), device=cpu, dtype=torch.float32, is_shared=False),
            reward: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([32]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 59-63

For fine tuning, we integrate the transform in the policy after making the parameters
trainable. In practice, it may be wiser to restrict this to a subset of the parameters (say the last layer
of the MLP).


.. GENERATED FROM PYTHON SOURCE LINES 63-67

.. code-block:: default

    r3m.train()
    policy = TensorDictSequential(r3m, policy)
    print("number of params after r3m is integrated:", len(list(policy.parameters())))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    number of params after r3m is integrated: 163




.. GENERATED FROM PYTHON SOURCE LINES 68-72

Again, we collect a rollout with R3M. The structure of the output has changed slightly, as now
the environment returns pixels (and not an embedding). The embedding "r3m_vec" is an intermediate
result of our policy.


.. GENERATED FROM PYTHON SOURCE LINES 72-75

.. code-block:: default

    rollout = base_env.rollout(32, policy)
    print("rollout, fine tuning:", rollout)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    rollout, fine tuning: TensorDict(
        fields={
            action: Tensor(shape=torch.Size([32, 8]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.bool, is_shared=False),
            next: TensorDict(
                fields={
                    pixels: Tensor(shape=torch.Size([32, 480, 480, 3]), device=cpu, dtype=torch.uint8, is_shared=False)},
                batch_size=torch.Size([32]),
                device=cpu,
                is_shared=False),
            r3m_vec: Tensor(shape=torch.Size([32, 2048]), device=cpu, dtype=torch.float32, is_shared=False),
            reward: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([32]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 76-83

The easiness with which we have swapped the transform from the env to the policy
is due to the fact that both behave like TensorDictModule: they have a set of `"in_keys"` and
`"out_keys"` that make it easy to read and write output in different context.

To conclude this tutorial, let's have a look at how we could use R3M to read
images stored in a replay buffer (e.g. in an offline RL context). First, let's build our dataset:


.. GENERATED FROM PYTHON SOURCE LINES 83-88

.. code-block:: default

    from torchrl.data import LazyMemmapStorage, ReplayBuffer

    storage = LazyMemmapStorage(1000)
    rb = ReplayBuffer(storage=storage, transform=r3m)








.. GENERATED FROM PYTHON SOURCE LINES 89-92

We can now collect the data (random rollouts for our purpose) and fill the replay
buffer with it:


.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: default

    total = 0
    while total < 1000:
        tensordict = base_env.rollout(1000)
        rb.extend(tensordict)
        total += tensordict.numel()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Creating a MemmapStorage...
    The storage is being created: 
            action: /tmp/tmp3lwmiab3, 0.030517578125 Mb of storage (size: torch.Size([1000, 8])).
            done: /tmp/tmpfgm6k77r, 0.00095367431640625 Mb of storage (size: torch.Size([1000, 1])).
            pixels: /tmp/tmpw4l6uzpl, 659.1796875 Mb of storage (size: torch.Size([1000, 480, 480, 3])).
            reward: /tmp/tmppuwdg651, 0.003814697265625 Mb of storage (size: torch.Size([1000, 1])).
            ('next', 'pixels'): /tmp/tmpthk5jx34, 659.1796875 Mb of storage (size: torch.Size([1000, 480, 480, 3])).




.. GENERATED FROM PYTHON SOURCE LINES 99-101

Let's check what our replay buffer storage looks like. It should not contain the "r3m_vec" entry
since we haven't used it yet:

.. GENERATED FROM PYTHON SOURCE LINES 101-103

.. code-block:: default

    print("stored data:", storage._storage)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    stored data: TensorDict(
        fields={
            action: MemmapTensor(shape=torch.Size([1000, 8]), device=cpu, dtype=torch.float32, is_shared=False),
            done: MemmapTensor(shape=torch.Size([1000, 1]), device=cpu, dtype=torch.bool, is_shared=False),
            next: TensorDict(
                fields={
                    pixels: MemmapTensor(shape=torch.Size([1000, 480, 480, 3]), device=cpu, dtype=torch.uint8, is_shared=False)},
                batch_size=torch.Size([1000]),
                device=cpu,
                is_shared=False),
            pixels: MemmapTensor(shape=torch.Size([1000, 480, 480, 3]), device=cpu, dtype=torch.uint8, is_shared=False),
            reward: MemmapTensor(shape=torch.Size([1000, 1]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([1000]),
        device=cpu,
        is_shared=False)




.. GENERATED FROM PYTHON SOURCE LINES 104-107

When sampling, the data will go through the R3M transform, giving us the processed data that we wanted.
In this way, we can train an algorithm offline on a dataset made of images:


.. GENERATED FROM PYTHON SOURCE LINES 107-109

.. code-block:: default

    batch = rb.sample(32)
    print("data after sampling:", batch)




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    data after sampling: TensorDict(
        fields={
            action: Tensor(shape=torch.Size([32, 8]), device=cpu, dtype=torch.float32, is_shared=False),
            done: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.bool, is_shared=False),
            next: TensorDict(
                fields={
                    pixels: Tensor(shape=torch.Size([32, 480, 480, 3]), device=cpu, dtype=torch.uint8, is_shared=False)},
                batch_size=torch.Size([32]),
                device=cpu,
                is_shared=False),
            r3m_vec: Tensor(shape=torch.Size([32, 2048]), device=cpu, dtype=torch.float32, is_shared=False),
            reward: Tensor(shape=torch.Size([32, 1]), device=cpu, dtype=torch.float32, is_shared=False)},
        batch_size=torch.Size([32]),
        device=cpu,
        is_shared=False)





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 1 minutes  29.456 seconds)


.. _sphx_glr_download_tutorials_pretrained_models.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: pretrained_models.py <pretrained_models.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: pretrained_models.ipynb <pretrained_models.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
