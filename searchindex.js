Search.setIndex({"docnames": ["index", "reference/collectors", "reference/data", "reference/envs", "reference/generated/knowledge_base/GYM", "reference/generated/knowledge_base/HABITAT", "reference/generated/knowledge_base/MUJOCO_INSTALLATION", "reference/generated/knowledge_base/PRO-TIPS", "reference/generated/knowledge_base/RESOURCES", "reference/generated/knowledge_base/VERSIONING_ISSUES", "reference/generated/torchrl._utils.implement_for", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector", "reference/generated/torchrl.collectors.collectors.RandomPolicy", "reference/generated/torchrl.collectors.collectors.SyncDataCollector", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector", "reference/generated/torchrl.collectors.utils.split_trajectories", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec", "reference/generated/torchrl.data.BoundedTensorSpec", "reference/generated/torchrl.data.CompositeSpec", "reference/generated/torchrl.data.DiscreteTensorSpec", "reference/generated/torchrl.data.MultiDiscreteTensorSpec", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec", "reference/generated/torchrl.data.MultiStep", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec", "reference/generated/torchrl.data.PrioritizedReplayBuffer", "reference/generated/torchrl.data.ReplayBuffer", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer", "reference/generated/torchrl.data.TensorDictReplayBuffer", "reference/generated/torchrl.data.TensorSpec", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec", "reference/generated/torchrl.data.replay_buffers.samplers.PrioritizedSampler", "reference/generated/torchrl.data.replay_buffers.samplers.RandomSampler", "reference/generated/torchrl.data.replay_buffers.samplers.Sampler", "reference/generated/torchrl.data.replay_buffers.storages.LazyMemmapStorage", "reference/generated/torchrl.data.replay_buffers.storages.LazyTensorStorage", "reference/generated/torchrl.data.replay_buffers.storages.ListStorage", "reference/generated/torchrl.data.replay_buffers.storages.Storage", "reference/generated/torchrl.data.replay_buffers.writers.RoundRobinWriter", "reference/generated/torchrl.data.replay_buffers.writers.Writer", "reference/generated/torchrl.envs.EnvBase", "reference/generated/torchrl.envs.EnvCreator", "reference/generated/torchrl.envs.EnvMetaData", "reference/generated/torchrl.envs.GymLikeEnv", "reference/generated/torchrl.envs.ModelBasedEnvBase", "reference/generated/torchrl.envs.MultiThreadedEnv", "reference/generated/torchrl.envs.ParallelEnv", "reference/generated/torchrl.envs.SerialEnv", "reference/generated/torchrl.envs.Specs", "reference/generated/torchrl.envs.libs.brax.BraxEnv", "reference/generated/torchrl.envs.libs.brax.BraxWrapper", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper", "reference/generated/torchrl.envs.libs.gym.GymEnv", "reference/generated/torchrl.envs.libs.gym.GymWrapper", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper", "reference/generated/torchrl.envs.libs.vmas.VmasEnv", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv", "reference/generated/torchrl.envs.transforms.BinarizeReward", "reference/generated/torchrl.envs.transforms.CatFrames", "reference/generated/torchrl.envs.transforms.CatTensors", "reference/generated/torchrl.envs.transforms.CenterCrop", "reference/generated/torchrl.envs.transforms.Compose", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection", "reference/generated/torchrl.envs.transforms.DoubleToFloat", "reference/generated/torchrl.envs.transforms.ExcludeTransform", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck", "reference/generated/torchrl.envs.transforms.FlattenObservation", "reference/generated/torchrl.envs.transforms.FrameSkipTransform", "reference/generated/torchrl.envs.transforms.GrayScale", "reference/generated/torchrl.envs.transforms.NoopResetEnv", "reference/generated/torchrl.envs.transforms.ObservationNorm", "reference/generated/torchrl.envs.transforms.ObservationTransform", "reference/generated/torchrl.envs.transforms.PinMemoryTransform", "reference/generated/torchrl.envs.transforms.R3MTransform", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict", "reference/generated/torchrl.envs.transforms.Resize", "reference/generated/torchrl.envs.transforms.RewardClipping", "reference/generated/torchrl.envs.transforms.RewardScaling", "reference/generated/torchrl.envs.transforms.RewardSum", "reference/generated/torchrl.envs.transforms.SelectTransform", "reference/generated/torchrl.envs.transforms.SqueezeTransform", "reference/generated/torchrl.envs.transforms.StepCounter", "reference/generated/torchrl.envs.transforms.TensorDictPrimer", "reference/generated/torchrl.envs.transforms.TimeMaxPool", "reference/generated/torchrl.envs.transforms.ToTensorImage", "reference/generated/torchrl.envs.transforms.Transform", "reference/generated/torchrl.envs.transforms.TransformedEnv", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform", "reference/generated/torchrl.envs.transforms.VIPRewardTransform", "reference/generated/torchrl.envs.transforms.VIPTransform", "reference/generated/torchrl.envs.transforms.VecNorm", "reference/generated/torchrl.envs.transforms.gSDENoise", "reference/generated/torchrl.envs.utils.check_env_specs", "reference/generated/torchrl.envs.utils.exploration_mode", "reference/generated/torchrl.envs.utils.get_available_libraries", "reference/generated/torchrl.envs.utils.set_exploration_mode", "reference/generated/torchrl.envs.utils.step_mdp", "reference/generated/torchrl.modules.CEMPlanner", "reference/generated/torchrl.modules.ConvNet", "reference/generated/torchrl.modules.DdpgCnnActor", "reference/generated/torchrl.modules.DdpgCnnQNet", "reference/generated/torchrl.modules.DdpgMlpActor", "reference/generated/torchrl.modules.DdpgMlpQNet", "reference/generated/torchrl.modules.Delta", "reference/generated/torchrl.modules.DistributionalDQNnet", "reference/generated/torchrl.modules.DreamerActor", "reference/generated/torchrl.modules.DuelingCnnDQNet", "reference/generated/torchrl.modules.IndependentNormal", "reference/generated/torchrl.modules.LSTMNet", "reference/generated/torchrl.modules.MLP", "reference/generated/torchrl.modules.MPCPlannerBase", "reference/generated/torchrl.modules.MPPIPlanner", "reference/generated/torchrl.modules.NoisyLazyLinear", "reference/generated/torchrl.modules.NoisyLinear", "reference/generated/torchrl.modules.NormalParamWrapper", "reference/generated/torchrl.modules.ObsDecoder", "reference/generated/torchrl.modules.ObsEncoder", "reference/generated/torchrl.modules.OneHotCategorical", "reference/generated/torchrl.modules.RSSMPosterior", "reference/generated/torchrl.modules.RSSMPrior", "reference/generated/torchrl.modules.TanhDelta", "reference/generated/torchrl.modules.TanhNormal", "reference/generated/torchrl.modules.TruncatedNormal", "reference/generated/torchrl.modules.reset_noise", "reference/generated/torchrl.modules.tensordict_module.Actor", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor", "reference/generated/torchrl.modules.tensordict_module.QValueActor", "reference/generated/torchrl.modules.tensordict_module.SafeModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticSequential", "reference/generated/torchrl.modules.tensordict_module.SafeSequential", "reference/generated/torchrl.modules.tensordict_module.ValueOperator", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper", "reference/generated/torchrl.modules.tensordict_module.actors.DistributionalQValueHook", "reference/generated/torchrl.modules.tensordict_module.actors.QValueHook", "reference/generated/torchrl.modules.tensordict_module.common.ensure_tensordict_compatible", "reference/generated/torchrl.modules.tensordict_module.common.is_tensordict_compatible", "reference/generated/torchrl.modules.utils.biased_softplus", "reference/generated/torchrl.modules.utils.inv_softplus", "reference/generated/torchrl.modules.utils.mappings", "reference/generated/torchrl.objectives.A2CLoss", "reference/generated/torchrl.objectives.ClipPPOLoss", "reference/generated/torchrl.objectives.DDPGLoss", "reference/generated/torchrl.objectives.DQNLoss", "reference/generated/torchrl.objectives.DistributionalDQNLoss", "reference/generated/torchrl.objectives.DreamerActorLoss", "reference/generated/torchrl.objectives.DreamerModelLoss", "reference/generated/torchrl.objectives.DreamerValueLoss", "reference/generated/torchrl.objectives.HardUpdate", "reference/generated/torchrl.objectives.KLPENPPOLoss", "reference/generated/torchrl.objectives.PPOLoss", "reference/generated/torchrl.objectives.REDQLoss", "reference/generated/torchrl.objectives.ReinforceLoss", "reference/generated/torchrl.objectives.SACLoss", "reference/generated/torchrl.objectives.SoftUpdate", "reference/generated/torchrl.objectives.distance_loss", "reference/generated/torchrl.objectives.hold_out_net", "reference/generated/torchrl.objectives.hold_out_params", "reference/generated/torchrl.objectives.next_state_value", "reference/generated/torchrl.objectives.value.GAE", "reference/generated/torchrl.objectives.value.TDEstimate", "reference/generated/torchrl.objectives.value.TDLambdaEstimate", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate", "reference/generated/torchrl.record.TensorDictRecorder", "reference/generated/torchrl.record.VideoRecorder", "reference/generated/torchrl.record.loggers.CSVLogger", "reference/generated/torchrl.record.loggers.Logger", "reference/generated/torchrl.record.loggers.MLFlowLogger", "reference/generated/torchrl.record.loggers.TensorboardLogger", "reference/generated/torchrl.record.loggers.WandbLogger", "reference/generated/torchrl.record.loggers.generate_exp_name", "reference/generated/torchrl.record.loggers.get_logger", "reference/generated/torchrl.trainers.BatchSubSampler", "reference/generated/torchrl.trainers.ClearCudaCache", "reference/generated/torchrl.trainers.CountFramesLog", "reference/generated/torchrl.trainers.LogReward", "reference/generated/torchrl.trainers.OptimizerHook", "reference/generated/torchrl.trainers.Recorder", "reference/generated/torchrl.trainers.ReplayBufferTrainer", "reference/generated/torchrl.trainers.RewardNormalizer", "reference/generated/torchrl.trainers.SelectKeys", "reference/generated/torchrl.trainers.Trainer", "reference/generated/torchrl.trainers.TrainerHookBase", "reference/generated/torchrl.trainers.UpdateWeights", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout", "reference/generated/torchrl.trainers.helpers.make_a2c_loss", "reference/generated/torchrl.trainers.helpers.make_a2c_model", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss", "reference/generated/torchrl.trainers.helpers.make_dqn_actor", "reference/generated/torchrl.trainers.helpers.make_dqn_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_loss", "reference/generated/torchrl.trainers.helpers.make_ppo_model", "reference/generated/torchrl.trainers.helpers.make_redq_loss", "reference/generated/torchrl.trainers.helpers.make_redq_model", "reference/generated/torchrl.trainers.helpers.make_replay_buffer", "reference/generated/torchrl.trainers.helpers.make_sac_loss", "reference/generated/torchrl.trainers.helpers.make_sac_model", "reference/generated/torchrl.trainers.helpers.make_target_updater", "reference/generated/torchrl.trainers.helpers.make_trainer", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor", "reference/generated/torchrl.trainers.helpers.sync_async_collector", "reference/generated/torchrl.trainers.helpers.sync_sync_collector", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor", "reference/generated/tutorials/README", "reference/index", "reference/knowledge_base", "reference/modules", "reference/objectives", "reference/trainers", "reference/utils", "tutorials/coding_ddpg", "tutorials/coding_dqn", "tutorials/coding_ppo", "tutorials/index", "tutorials/multi_task", "tutorials/pendulum", "tutorials/pretrained_models", "tutorials/sg_execution_times", "tutorials/tensordict_module", "tutorials/tensordict_tutorial", "tutorials/torch_envs", "tutorials/torchrl_demo"], "filenames": ["index.rst", "reference/collectors.rst", "reference/data.rst", "reference/envs.rst", "reference/generated/knowledge_base/GYM.rst", "reference/generated/knowledge_base/HABITAT.rst", "reference/generated/knowledge_base/MUJOCO_INSTALLATION.rst", "reference/generated/knowledge_base/PRO-TIPS.rst", "reference/generated/knowledge_base/RESOURCES.rst", "reference/generated/knowledge_base/VERSIONING_ISSUES.rst", "reference/generated/torchrl._utils.implement_for.rst", "reference/generated/torchrl.collectors.collectors.MultiSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.MultiaSyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.RandomPolicy.rst", "reference/generated/torchrl.collectors.collectors.SyncDataCollector.rst", "reference/generated/torchrl.collectors.collectors.aSyncDataCollector.rst", "reference/generated/torchrl.collectors.utils.split_trajectories.rst", "reference/generated/torchrl.data.BinaryDiscreteTensorSpec.rst", "reference/generated/torchrl.data.BoundedTensorSpec.rst", "reference/generated/torchrl.data.CompositeSpec.rst", "reference/generated/torchrl.data.DiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiOneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.MultiStep.rst", "reference/generated/torchrl.data.OneHotDiscreteTensorSpec.rst", "reference/generated/torchrl.data.PrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.ReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictPrioritizedReplayBuffer.rst", "reference/generated/torchrl.data.TensorDictReplayBuffer.rst", "reference/generated/torchrl.data.TensorSpec.rst", "reference/generated/torchrl.data.UnboundedContinuousTensorSpec.rst", "reference/generated/torchrl.data.UnboundedDiscreteTensorSpec.rst", "reference/generated/torchrl.data.replay_buffers.samplers.PrioritizedSampler.rst", "reference/generated/torchrl.data.replay_buffers.samplers.RandomSampler.rst", "reference/generated/torchrl.data.replay_buffers.samplers.Sampler.rst", "reference/generated/torchrl.data.replay_buffers.storages.LazyMemmapStorage.rst", "reference/generated/torchrl.data.replay_buffers.storages.LazyTensorStorage.rst", "reference/generated/torchrl.data.replay_buffers.storages.ListStorage.rst", "reference/generated/torchrl.data.replay_buffers.storages.Storage.rst", "reference/generated/torchrl.data.replay_buffers.writers.RoundRobinWriter.rst", "reference/generated/torchrl.data.replay_buffers.writers.Writer.rst", "reference/generated/torchrl.envs.EnvBase.rst", "reference/generated/torchrl.envs.EnvCreator.rst", "reference/generated/torchrl.envs.EnvMetaData.rst", "reference/generated/torchrl.envs.GymLikeEnv.rst", "reference/generated/torchrl.envs.ModelBasedEnvBase.rst", "reference/generated/torchrl.envs.MultiThreadedEnv.rst", "reference/generated/torchrl.envs.ParallelEnv.rst", "reference/generated/torchrl.envs.SerialEnv.rst", "reference/generated/torchrl.envs.Specs.rst", "reference/generated/torchrl.envs.libs.brax.BraxEnv.rst", "reference/generated/torchrl.envs.libs.brax.BraxWrapper.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlEnv.rst", "reference/generated/torchrl.envs.libs.dm_control.DMControlWrapper.rst", "reference/generated/torchrl.envs.libs.gym.GymEnv.rst", "reference/generated/torchrl.envs.libs.gym.GymWrapper.rst", "reference/generated/torchrl.envs.libs.habitat.HabitatEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiEnv.rst", "reference/generated/torchrl.envs.libs.jumanji.JumanjiWrapper.rst", "reference/generated/torchrl.envs.libs.vmas.VmasEnv.rst", "reference/generated/torchrl.envs.libs.vmas.VmasWrapper.rst", "reference/generated/torchrl.envs.model_based.dreamer.DreamerEnv.rst", "reference/generated/torchrl.envs.transforms.BinarizeReward.rst", "reference/generated/torchrl.envs.transforms.CatFrames.rst", "reference/generated/torchrl.envs.transforms.CatTensors.rst", "reference/generated/torchrl.envs.transforms.CenterCrop.rst", "reference/generated/torchrl.envs.transforms.Compose.rst", "reference/generated/torchrl.envs.transforms.DiscreteActionProjection.rst", "reference/generated/torchrl.envs.transforms.DoubleToFloat.rst", "reference/generated/torchrl.envs.transforms.ExcludeTransform.rst", "reference/generated/torchrl.envs.transforms.FiniteTensorDictCheck.rst", "reference/generated/torchrl.envs.transforms.FlattenObservation.rst", "reference/generated/torchrl.envs.transforms.FrameSkipTransform.rst", "reference/generated/torchrl.envs.transforms.GrayScale.rst", "reference/generated/torchrl.envs.transforms.NoopResetEnv.rst", "reference/generated/torchrl.envs.transforms.ObservationNorm.rst", "reference/generated/torchrl.envs.transforms.ObservationTransform.rst", "reference/generated/torchrl.envs.transforms.PinMemoryTransform.rst", "reference/generated/torchrl.envs.transforms.R3MTransform.rst", "reference/generated/torchrl.envs.transforms.RandomCropTensorDict.rst", "reference/generated/torchrl.envs.transforms.Resize.rst", "reference/generated/torchrl.envs.transforms.RewardClipping.rst", "reference/generated/torchrl.envs.transforms.RewardScaling.rst", "reference/generated/torchrl.envs.transforms.RewardSum.rst", "reference/generated/torchrl.envs.transforms.SelectTransform.rst", "reference/generated/torchrl.envs.transforms.SqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.StepCounter.rst", "reference/generated/torchrl.envs.transforms.TensorDictPrimer.rst", "reference/generated/torchrl.envs.transforms.TimeMaxPool.rst", "reference/generated/torchrl.envs.transforms.ToTensorImage.rst", "reference/generated/torchrl.envs.transforms.Transform.rst", "reference/generated/torchrl.envs.transforms.TransformedEnv.rst", "reference/generated/torchrl.envs.transforms.UnsqueezeTransform.rst", "reference/generated/torchrl.envs.transforms.VIPRewardTransform.rst", "reference/generated/torchrl.envs.transforms.VIPTransform.rst", "reference/generated/torchrl.envs.transforms.VecNorm.rst", "reference/generated/torchrl.envs.transforms.gSDENoise.rst", "reference/generated/torchrl.envs.utils.check_env_specs.rst", "reference/generated/torchrl.envs.utils.exploration_mode.rst", "reference/generated/torchrl.envs.utils.get_available_libraries.rst", "reference/generated/torchrl.envs.utils.set_exploration_mode.rst", "reference/generated/torchrl.envs.utils.step_mdp.rst", "reference/generated/torchrl.modules.CEMPlanner.rst", "reference/generated/torchrl.modules.ConvNet.rst", "reference/generated/torchrl.modules.DdpgCnnActor.rst", "reference/generated/torchrl.modules.DdpgCnnQNet.rst", "reference/generated/torchrl.modules.DdpgMlpActor.rst", "reference/generated/torchrl.modules.DdpgMlpQNet.rst", "reference/generated/torchrl.modules.Delta.rst", "reference/generated/torchrl.modules.DistributionalDQNnet.rst", "reference/generated/torchrl.modules.DreamerActor.rst", "reference/generated/torchrl.modules.DuelingCnnDQNet.rst", "reference/generated/torchrl.modules.IndependentNormal.rst", "reference/generated/torchrl.modules.LSTMNet.rst", "reference/generated/torchrl.modules.MLP.rst", "reference/generated/torchrl.modules.MPCPlannerBase.rst", "reference/generated/torchrl.modules.MPPIPlanner.rst", "reference/generated/torchrl.modules.NoisyLazyLinear.rst", "reference/generated/torchrl.modules.NoisyLinear.rst", "reference/generated/torchrl.modules.NormalParamWrapper.rst", "reference/generated/torchrl.modules.ObsDecoder.rst", "reference/generated/torchrl.modules.ObsEncoder.rst", "reference/generated/torchrl.modules.OneHotCategorical.rst", "reference/generated/torchrl.modules.RSSMPosterior.rst", "reference/generated/torchrl.modules.RSSMPrior.rst", "reference/generated/torchrl.modules.TanhDelta.rst", "reference/generated/torchrl.modules.TanhNormal.rst", "reference/generated/torchrl.modules.TruncatedNormal.rst", "reference/generated/torchrl.modules.reset_noise.rst", "reference/generated/torchrl.modules.tensordict_module.Actor.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticOperator.rst", "reference/generated/torchrl.modules.tensordict_module.ActorCriticWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ActorValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.AdditiveGaussianWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.DistributionalQValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.EGreedyWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.ProbabilisticActor.rst", "reference/generated/torchrl.modules.tensordict_module.QValueActor.rst", "reference/generated/torchrl.modules.tensordict_module.SafeModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticModule.rst", "reference/generated/torchrl.modules.tensordict_module.SafeProbabilisticSequential.rst", "reference/generated/torchrl.modules.tensordict_module.SafeSequential.rst", "reference/generated/torchrl.modules.tensordict_module.ValueOperator.rst", "reference/generated/torchrl.modules.tensordict_module.WorldModelWrapper.rst", "reference/generated/torchrl.modules.tensordict_module.actors.DistributionalQValueHook.rst", "reference/generated/torchrl.modules.tensordict_module.actors.QValueHook.rst", "reference/generated/torchrl.modules.tensordict_module.common.ensure_tensordict_compatible.rst", "reference/generated/torchrl.modules.tensordict_module.common.is_tensordict_compatible.rst", "reference/generated/torchrl.modules.utils.biased_softplus.rst", "reference/generated/torchrl.modules.utils.inv_softplus.rst", "reference/generated/torchrl.modules.utils.mappings.rst", "reference/generated/torchrl.objectives.A2CLoss.rst", "reference/generated/torchrl.objectives.ClipPPOLoss.rst", "reference/generated/torchrl.objectives.DDPGLoss.rst", "reference/generated/torchrl.objectives.DQNLoss.rst", "reference/generated/torchrl.objectives.DistributionalDQNLoss.rst", "reference/generated/torchrl.objectives.DreamerActorLoss.rst", "reference/generated/torchrl.objectives.DreamerModelLoss.rst", "reference/generated/torchrl.objectives.DreamerValueLoss.rst", "reference/generated/torchrl.objectives.HardUpdate.rst", "reference/generated/torchrl.objectives.KLPENPPOLoss.rst", "reference/generated/torchrl.objectives.PPOLoss.rst", "reference/generated/torchrl.objectives.REDQLoss.rst", "reference/generated/torchrl.objectives.ReinforceLoss.rst", "reference/generated/torchrl.objectives.SACLoss.rst", "reference/generated/torchrl.objectives.SoftUpdate.rst", "reference/generated/torchrl.objectives.distance_loss.rst", "reference/generated/torchrl.objectives.hold_out_net.rst", "reference/generated/torchrl.objectives.hold_out_params.rst", "reference/generated/torchrl.objectives.next_state_value.rst", "reference/generated/torchrl.objectives.value.GAE.rst", "reference/generated/torchrl.objectives.value.TDEstimate.rst", "reference/generated/torchrl.objectives.value.TDLambdaEstimate.rst", "reference/generated/torchrl.objectives.value.functional.generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.td_lambda_return_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_generalized_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate.rst", "reference/generated/torchrl.objectives.value.functional.vec_td_lambda_return_estimate.rst", "reference/generated/torchrl.record.TensorDictRecorder.rst", "reference/generated/torchrl.record.VideoRecorder.rst", "reference/generated/torchrl.record.loggers.CSVLogger.rst", "reference/generated/torchrl.record.loggers.Logger.rst", "reference/generated/torchrl.record.loggers.MLFlowLogger.rst", "reference/generated/torchrl.record.loggers.TensorboardLogger.rst", "reference/generated/torchrl.record.loggers.WandbLogger.rst", "reference/generated/torchrl.record.loggers.generate_exp_name.rst", "reference/generated/torchrl.record.loggers.get_logger.rst", "reference/generated/torchrl.trainers.BatchSubSampler.rst", "reference/generated/torchrl.trainers.ClearCudaCache.rst", "reference/generated/torchrl.trainers.CountFramesLog.rst", "reference/generated/torchrl.trainers.LogReward.rst", "reference/generated/torchrl.trainers.OptimizerHook.rst", "reference/generated/torchrl.trainers.Recorder.rst", "reference/generated/torchrl.trainers.ReplayBufferTrainer.rst", "reference/generated/torchrl.trainers.RewardNormalizer.rst", "reference/generated/torchrl.trainers.SelectKeys.rst", "reference/generated/torchrl.trainers.Trainer.rst", "reference/generated/torchrl.trainers.TrainerHookBase.rst", "reference/generated/torchrl.trainers.UpdateWeights.rst", "reference/generated/torchrl.trainers.helpers.correct_for_frame_skip.rst", "reference/generated/torchrl.trainers.helpers.get_stats_random_rollout.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_loss.rst", "reference/generated/torchrl.trainers.helpers.make_a2c_model.rst", "reference/generated/torchrl.trainers.helpers.make_collector_offpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_collector_onpolicy.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_actor.rst", "reference/generated/torchrl.trainers.helpers.make_ddpg_loss.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_actor.rst", "reference/generated/torchrl.trainers.helpers.make_dqn_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_loss.rst", "reference/generated/torchrl.trainers.helpers.make_ppo_model.rst", "reference/generated/torchrl.trainers.helpers.make_redq_loss.rst", "reference/generated/torchrl.trainers.helpers.make_redq_model.rst", "reference/generated/torchrl.trainers.helpers.make_replay_buffer.rst", "reference/generated/torchrl.trainers.helpers.make_sac_loss.rst", "reference/generated/torchrl.trainers.helpers.make_sac_model.rst", "reference/generated/torchrl.trainers.helpers.make_target_updater.rst", "reference/generated/torchrl.trainers.helpers.make_trainer.rst", "reference/generated/torchrl.trainers.helpers.parallel_env_constructor.rst", "reference/generated/torchrl.trainers.helpers.sync_async_collector.rst", "reference/generated/torchrl.trainers.helpers.sync_sync_collector.rst", "reference/generated/torchrl.trainers.helpers.transformed_env_constructor.rst", "reference/generated/tutorials/README.rst", "reference/index.rst", "reference/knowledge_base.rst", "reference/modules.rst", "reference/objectives.rst", "reference/trainers.rst", "reference/utils.rst", "tutorials/coding_ddpg.rst", "tutorials/coding_dqn.rst", "tutorials/coding_ppo.rst", "tutorials/index.rst", "tutorials/multi_task.rst", "tutorials/pendulum.rst", "tutorials/pretrained_models.rst", "tutorials/sg_execution_times.rst", "tutorials/tensordict_module.rst", "tutorials/tensordict_tutorial.rst", "tutorials/torch_envs.rst", "tutorials/torchrl_demo.rst"], "titles": ["Welcome to the TorchRL Documentation!", "torchrl.collectors package", "torchrl.data package", "torchrl.envs package", "Working with gym", "Working with <code class=\"docutils literal notranslate\"><span class=\"pre\">habitat-lab</span></code>", "About MuJoCo", "Pro-tips and Debugging", "Useful resources", "Versioning Issues", "implement_for", "MultiSyncDataCollector", "MultiaSyncDataCollector", "RandomPolicy", "SyncDataCollector", "aSyncDataCollector", "split_trajectories", "BinaryDiscreteTensorSpec", "BoundedTensorSpec", "CompositeSpec", "DiscreteTensorSpec", "MultiDiscreteTensorSpec", "MultiOneHotDiscreteTensorSpec", "MultiStep", "OneHotDiscreteTensorSpec", "PrioritizedReplayBuffer", "ReplayBuffer", "TensorDictPrioritizedReplayBuffer", "TensorDictReplayBuffer", "TensorSpec", "UnboundedContinuousTensorSpec", "UnboundedDiscreteTensorSpec", "PrioritizedSampler", "RandomSampler", "Sampler", "LazyMemmapStorage", "LazyTensorStorage", "ListStorage", "Storage", "RoundRobinWriter", "Writer", "EnvBase", "EnvCreator", "EnvMetaData", "GymLikeEnv", "ModelBasedEnvBase", "MultiThreadedEnv", "ParallelEnv", "SerialEnv", "Specs", "BraxEnv", "BraxWrapper", "DMControlEnv", "DMControlWrapper", "GymEnv", "GymWrapper", "HabitatEnv", "JumanjiEnv", "JumanjiWrapper", "VmasEnv", "VmasWrapper", "DreamerEnv", "BinarizeReward", "CatFrames", "CatTensors", "CenterCrop", "Compose", "DiscreteActionProjection", "DoubleToFloat", "ExcludeTransform", "FiniteTensorDictCheck", "FlattenObservation", "FrameSkipTransform", "GrayScale", "NoopResetEnv", "ObservationNorm", "ObservationTransform", "PinMemoryTransform", "R3MTransform", "RandomCropTensorDict", "Resize", "RewardClipping", "RewardScaling", "RewardSum", "SelectTransform", "SqueezeTransform", "StepCounter", "TensorDictPrimer", "TimeMaxPool", "ToTensorImage", "Transform", "TransformedEnv", "UnsqueezeTransform", "VIPRewardTransform", "VIPTransform", "VecNorm", "gSDENoise", "check_env_specs", "exploration_mode", "get_available_libraries", "set_exploration_mode", "step_mdp", "CEMPlanner", "ConvNet", "DdpgCnnActor", "DdpgCnnQNet", "DdpgMlpActor", "DdpgMlpQNet", "Delta", "DistributionalDQNnet", "DreamerActor", "DuelingCnnDQNet", "IndependentNormal", "LSTMNet", "MLP", "MPCPlannerBase", "MPPIPlanner", "NoisyLazyLinear", "NoisyLinear", "NormalParamWrapper", "ObsDecoder", "ObsEncoder", "OneHotCategorical", "RSSMPosterior", "RSSMPrior", "TanhDelta", "TanhNormal", "TruncatedNormal", "reset_noise", "Actor", "ActorCriticOperator", "ActorCriticWrapper", "ActorValueOperator", "AdditiveGaussianWrapper", "DistributionalQValueActor", "EGreedyWrapper", "OrnsteinUhlenbeckProcessWrapper", "ProbabilisticActor", "QValueActor", "SafeModule", "SafeProbabilisticModule", "SafeProbabilisticSequential", "SafeSequential", "ValueOperator", "WorldModelWrapper", "DistributionalQValueHook", "QValueHook", "ensure_tensordict_compatible", "is_tensordict_compatible", "biased_softplus", "inv_softplus", "mappings", "A2CLoss", "ClipPPOLoss", "DDPGLoss", "DQNLoss", "DistributionalDQNLoss", "DreamerActorLoss", "DreamerModelLoss", "DreamerValueLoss", "HardUpdate", "KLPENPPOLoss", "PPOLoss", "REDQLoss", "ReinforceLoss", "SACLoss", "SoftUpdate", "distance_loss", "hold_out_net", "hold_out_params", "next_state_value", "GAE", "TDEstimate", "TDLambdaEstimate", "generalized_advantage_estimate", "td_advantage_estimate", "td_lambda_advantage_estimate", "td_lambda_return_estimate", "vec_generalized_advantage_estimate", "vec_td_lambda_advantage_estimate", "vec_td_lambda_return_estimate", "TensorDictRecorder", "VideoRecorder", "CSVLogger", "Logger", "MLFlowLogger", "TensorboardLogger", "WandbLogger", "generate_exp_name", "get_logger", "BatchSubSampler", "ClearCudaCache", "CountFramesLog", "LogReward", "OptimizerHook", "Recorder", "ReplayBufferTrainer", "RewardNormalizer", "SelectKeys", "Trainer", "TrainerHookBase", "UpdateWeights", "correct_for_frame_skip", "get_stats_random_rollout", "make_a2c_loss", "make_a2c_model", "make_collector_offpolicy", "make_collector_onpolicy", "make_ddpg_actor", "make_ddpg_loss", "make_dqn_actor", "make_dqn_loss", "make_ppo_loss", "make_ppo_model", "make_redq_loss", "make_redq_model", "make_replay_buffer", "make_sac_loss", "make_sac_model", "make_target_updater", "make_trainer", "parallel_env_constructor", "sync_async_collector", "sync_sync_collector", "transformed_env_constructor", "README Tutos", "API Reference", "Knowledge Base", "torchrl.modules package", "torchrl.objectives package", "torchrl.trainers package", "torchrl._utils package", "Coding DDPG using TorchRL", "Coding a pixel-based DQN using TorchRL", "Reinforcement Learning (PPO) with TorchRL Tutorial", "README Tutos", "Task-specific policy in multi-task environments", "Writing your environment with TorchRL", "Using pretrained models", "Computation times", "TensorDictModule", "TensorDict", "TorchRL envs", "Introduction to TorchRL"], "terms": {"The": [0, 1, 2, 3, 4, 6, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 41, 44, 46, 47, 48, 66, 69, 75, 78, 82, 84, 87, 91, 94, 102, 104, 105, 106, 107, 113, 115, 116, 118, 119, 123, 124, 129, 130, 136, 137, 139, 140, 142, 143, 144, 149, 153, 154, 155, 157, 158, 159, 161, 165, 170, 171, 172, 173, 183, 185, 186, 187, 190, 194, 220, 222, 223, 230, 232, 234, 237, 238, 240, 241, 242, 243], "tensordict": [0, 1, 3, 11, 12, 14, 15, 16, 19, 20, 21, 23, 27, 28, 32, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 63, 64, 66, 67, 68, 69, 70, 71, 72, 74, 75, 77, 78, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 101, 102, 113, 115, 116, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 181, 190, 194, 196, 198, 199, 205, 208, 210, 213, 215, 218, 226, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 242], "class": [0, 1, 2, 3, 4, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 222, 223, 224, 230, 232, 233, 234, 240, 241, 242], "ha": [0, 3, 4, 6, 7, 9, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 42, 44, 46, 47, 48, 63, 87, 91, 133, 135, 140, 161, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "been": [0, 4, 6, 7, 11, 12, 15, 41, 44, 46, 47, 48, 90, 233, 234, 236, 237, 242], "move": [0, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 95, 114, 139, 197, 232, 233, 237, 242, 243], "out": [0, 3, 4, 23, 41, 44, 46, 47, 48, 87, 97, 117, 118, 136, 139, 140, 168, 169, 230, 232, 234, 237, 240, 241, 242, 243], "dedic": [0, 130, 131, 132, 232, 236], "librari": [0, 4, 5, 6, 7, 8, 9, 46, 99, 226, 227, 231, 234, 237, 242], "take": [0, 1, 3, 7, 16, 41, 44, 46, 47, 48, 86, 88, 90, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 151, 174, 175, 176, 177, 178, 179, 180, 190, 201, 230, 232, 233, 234, 237, 240, 242], "look": [0, 4, 6, 7, 23, 41, 44, 46, 47, 48, 78, 79, 140, 141, 142, 233, 234, 237, 238, 240, 242, 243], "find": [0, 5, 133, 135, 240], "sourc": [0, 1, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "code": [0, 3, 4, 6, 7, 78, 142, 234, 235, 236, 237, 238, 239, 240, 242, 243], "github": [0, 2, 4, 5, 6, 9, 238, 243], "i": [0, 1, 2, 3, 5, 6, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 49, 52, 62, 63, 64, 65, 66, 67, 69, 71, 74, 75, 78, 79, 82, 83, 84, 86, 87, 89, 90, 91, 93, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 108, 110, 111, 112, 113, 114, 115, 117, 118, 119, 124, 125, 126, 127, 129, 130, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 190, 192, 193, 194, 195, 196, 197, 199, 202, 203, 205, 208, 213, 215, 218, 220, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "an": [0, 1, 2, 3, 4, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 65, 67, 70, 74, 75, 78, 79, 80, 87, 89, 90, 91, 95, 97, 103, 104, 105, 106, 107, 113, 114, 115, 117, 121, 130, 131, 132, 136, 139, 140, 141, 144, 147, 148, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 182, 188, 194, 195, 199, 200, 203, 208, 221, 222, 223, 224, 227, 232, 233, 236, 238, 240, 241, 242, 243], "open": [0, 4, 6, 10, 243], "reinforc": [0, 2, 3, 8, 63, 104, 105, 106, 107, 136, 145, 152, 156, 160, 164, 165, 166, 208, 226, 233, 235, 237, 239, 243], "learn": [0, 2, 3, 6, 7, 8, 23, 63, 104, 105, 106, 107, 116, 118, 136, 145, 152, 156, 160, 163, 164, 165, 166, 208, 232, 233, 235, 236, 237, 239, 242, 243], "rl": [0, 1, 2, 3, 4, 7, 9, 11, 12, 14, 15, 45, 118, 129, 137, 143, 152, 162, 190, 227, 230, 232, 234, 238, 240, 241, 242], "pytorch": [0, 1, 2, 7, 89, 199, 230, 232, 234, 237, 238, 241, 242, 243], "It": [0, 2, 3, 6, 23, 27, 41, 44, 45, 46, 47, 48, 56, 75, 79, 91, 97, 104, 106, 110, 123, 124, 136, 140, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 195, 215, 227, 232, 237, 238, 240, 241, 242, 243], "provid": [0, 2, 3, 4, 7, 8, 14, 17, 21, 22, 23, 24, 25, 26, 27, 41, 44, 45, 46, 47, 48, 64, 65, 71, 74, 75, 78, 79, 83, 87, 91, 94, 95, 103, 113, 114, 115, 129, 133, 135, 137, 145, 165, 170, 171, 172, 173, 182, 189, 190, 196, 203, 205, 213, 215, 218, 220, 227, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "python": [0, 3, 4, 5, 6, 9, 230, 232, 233, 234, 235, 236, 237, 238, 240, 242, 243], "first": [0, 1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 44, 64, 71, 75, 78, 79, 89, 91, 114, 117, 121, 139, 140, 158, 181, 198, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "low": [0, 67, 233, 237, 243], "high": [0, 8, 67, 171, 174, 175, 178, 232, 233, 243], "level": [0, 19, 161, 232, 233, 237, 243], "abstract": [0, 7, 18, 19, 20, 21, 29, 30, 31, 40, 41, 76, 115, 200, 230, 234, 237, 241, 243], "ar": [0, 1, 2, 3, 6, 7, 8, 9, 11, 12, 14, 15, 23, 24, 25, 26, 27, 28, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 66, 67, 68, 70, 71, 78, 83, 87, 90, 91, 92, 94, 95, 101, 102, 107, 108, 113, 115, 118, 122, 124, 136, 139, 140, 141, 142, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 196, 220, 224, 230, 231, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "intend": [0, 6, 11, 12, 14, 15, 67, 243], "effici": [0, 2, 7, 118, 232, 233, 234, 236, 238, 241, 243], "modular": [0, 142, 243], "properli": [0, 234, 237, 241, 243], "test": [0, 3, 4, 97, 113, 195, 220, 234, 240, 243], "aim": [0, 3, 6, 78, 94, 114, 202, 227, 232, 233, 243], "support": [0, 3, 19, 38, 46, 75, 90, 99, 134, 139, 142, 145, 156, 171, 172, 173, 185, 230, 234, 237, 240, 241, 243], "research": [0, 6, 8, 243], "most": [0, 3, 6, 7, 23, 67, 232, 234, 237, 243], "written": [0, 3, 35, 41, 44, 46, 47, 48, 63, 83, 88, 136, 139, 140, 152, 153, 161, 162, 170, 181, 182, 230, 232, 236, 240, 243], "highli": [0, 2, 242, 243], "wai": [0, 3, 78, 94, 162, 232, 233, 234, 236, 238, 242, 243], "can": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 41, 42, 44, 46, 47, 48, 63, 66, 67, 74, 75, 78, 79, 83, 87, 90, 91, 94, 95, 102, 112, 115, 116, 118, 119, 126, 127, 133, 139, 140, 141, 142, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 195, 205, 213, 215, 218, 222, 223, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "easili": [0, 3, 6, 47, 48, 205, 213, 215, 218, 233, 234, 241, 242, 243], "swap": [0, 3, 234, 238, 243], "compon": [0, 2, 3, 35, 36, 37, 38, 145, 146, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 194, 199, 232, 234, 236, 237, 238, 240, 243], "transform": [0, 2, 7, 23, 25, 26, 27, 28, 42, 44, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 104, 110, 145, 146, 149, 151, 182, 196, 205, 208, 210, 213, 215, 218, 224, 226, 233, 238], "them": [0, 6, 25, 26, 27, 28, 41, 42, 44, 46, 47, 48, 49, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 161, 182, 232, 233, 236, 237, 238, 240, 241, 242, 243], "write": [0, 7, 23, 44, 77, 139, 140, 142, 154, 155, 163, 165, 170, 182, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243], "new": [0, 3, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 31, 32, 41, 44, 46, 47, 48, 83, 90, 95, 101, 136, 139, 140, 144, 152, 153, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 232, 233, 234, 237, 240, 241, 242, 243], "ones": [0, 19, 23, 41, 44, 46, 47, 48, 64, 66, 68, 75, 78, 87, 91, 94, 139, 232, 234, 237, 241, 242, 243], "littl": [0, 3, 234, 242, 243], "effort": [0, 3, 243], "thi": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 19, 23, 24, 25, 26, 27, 28, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 49, 56, 63, 64, 66, 67, 70, 72, 75, 78, 79, 83, 84, 87, 88, 90, 91, 93, 94, 95, 97, 101, 102, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 142, 144, 145, 146, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 181, 190, 192, 195, 196, 199, 201, 202, 203, 205, 213, 215, 218, 220, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "repo": [0, 5, 227, 243], "attempt": [0, 133, 135, 243], "align": [0, 243], "exist": [0, 23, 41, 44, 46, 47, 48, 64, 91, 203, 224, 240, 242, 243], "ecosystem": [0, 243], "dataset": [0, 25, 26, 27, 95, 238, 241, 242, 243], "pillar": [0, 243], "environ": [0, 1, 2, 3, 4, 7, 10, 11, 12, 14, 15, 23, 24, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 63, 64, 67, 68, 72, 74, 75, 78, 79, 86, 90, 91, 95, 97, 102, 113, 115, 116, 157, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 192, 195, 202, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 221, 222, 223, 224, 227, 235, 238, 239], "model": [0, 1, 3, 7, 8, 11, 12, 14, 15, 23, 41, 44, 45, 46, 47, 48, 78, 87, 94, 96, 103, 114, 115, 116, 130, 131, 132, 139, 144, 152, 157, 158, 159, 162, 163, 165, 199, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 226, 227, 230, 234, 235, 237, 239, 240, 242], "data": [0, 3, 7, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 49, 75, 97, 102, 113, 116, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 154, 163, 165, 171, 172, 173, 190, 196, 199, 201, 206, 220, 222, 223, 224, 226, 230, 233, 237, 238, 240, 241, 242], "util": [0, 3, 11, 12, 14, 15, 16, 23, 41, 44, 46, 47, 48, 78, 94, 97, 98, 99, 100, 101, 103, 149, 150, 151, 220, 226, 231, 232, 233, 234, 237, 240, 242, 243], "e": [0, 1, 3, 7, 9, 10, 11, 12, 14, 15, 19, 23, 24, 35, 36, 41, 42, 44, 46, 47, 48, 64, 66, 71, 75, 78, 83, 87, 90, 91, 94, 97, 112, 116, 119, 126, 127, 139, 140, 146, 170, 171, 172, 173, 190, 202, 223, 232, 233, 234, 237, 238, 241, 242, 243], "g": [0, 1, 3, 7, 9, 10, 23, 24, 41, 42, 44, 46, 47, 48, 64, 66, 71, 75, 78, 83, 87, 90, 91, 94, 97, 112, 116, 126, 127, 139, 140, 170, 176, 177, 179, 180, 223, 232, 233, 234, 237, 238, 242, 243], "collector": [0, 3, 11, 12, 13, 14, 15, 16, 136, 196, 199, 201, 206, 207, 220, 222, 223, 226, 230, 233, 242], "contain": [0, 3, 6, 11, 12, 14, 15, 19, 23, 25, 26, 27, 28, 29, 32, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 66, 68, 78, 87, 91, 94, 95, 101, 102, 103, 114, 116, 139, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 189, 190, 202, 205, 208, 210, 213, 215, 218, 220, 221, 222, 223, 224, 230, 232, 233, 234, 237, 238, 240, 242, 243], "etc": [0, 3, 6, 7, 10, 23, 30, 31, 41, 44, 46, 47, 48, 91, 114, 232, 234, 241, 242, 243], "have": [0, 3, 4, 5, 6, 7, 11, 12, 15, 19, 21, 23, 38, 41, 44, 46, 47, 48, 49, 63, 74, 75, 87, 90, 91, 95, 97, 103, 113, 114, 141, 142, 153, 161, 162, 167, 190, 199, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "few": [0, 2, 7, 190, 233, 234, 242, 243], "depend": [0, 3, 6, 7, 143, 162, 234, 237, 242, 243], "possibl": [0, 3, 20, 23, 24, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 195, 199, 232, 234, 237, 240, 241, 242, 243], "standard": [0, 75, 82, 95, 102, 110, 116, 117, 118, 133, 171, 172, 173, 232, 233, 243], "numpi": [0, 10, 14, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 89, 199, 232, 233, 237, 242, 243], "common": [0, 3, 44, 47, 48, 130, 131, 132, 147, 148, 220, 227, 230, 232, 234, 236, 238, 240, 241, 242, 243], "openai": [0, 6, 54, 55, 234, 237, 242, 243], "gym": [0, 3, 7, 10, 11, 12, 14, 42, 44, 54, 55, 75, 87, 95, 205, 208, 210, 213, 215, 218, 220, 227, 232, 233, 234, 237, 238, 243], "onli": [0, 1, 3, 6, 11, 12, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 31, 41, 44, 46, 47, 48, 49, 64, 66, 67, 71, 75, 78, 79, 87, 91, 94, 95, 113, 139, 140, 141, 142, 203, 230, 232, 233, 234, 236, 237, 240, 242, 243], "option": [0, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 35, 36, 41, 42, 44, 45, 46, 47, 48, 49, 52, 62, 63, 64, 65, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 133, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 154, 155, 157, 158, 159, 163, 164, 165, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 185, 190, 192, 193, 194, 195, 196, 197, 199, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 217, 218, 219, 220, 222, 223, 224, 233, 237, 243], "On": [0, 3, 6, 233, 241], "end": [0, 23, 25, 26, 27, 28, 41, 44, 46, 47, 48, 91, 103, 115, 174, 175, 176, 177, 178, 179, 180, 232, 236, 237, 238, 242, 243], "come": [0, 1, 3, 7, 47, 48, 129, 130, 131, 132, 137, 143, 232, 234, 240, 242, 243], "set": [0, 1, 2, 3, 6, 8, 11, 12, 14, 15, 23, 24, 25, 26, 27, 28, 38, 41, 43, 44, 45, 46, 47, 48, 64, 66, 78, 86, 87, 91, 94, 97, 100, 115, 133, 139, 190, 195, 196, 207, 224, 227, 231, 232, 233, 234, 236, 237, 238, 242, 243], "re": [0, 3, 7, 23, 41, 44, 46, 47, 48, 140, 230, 233, 234, 236, 237, 240, 242, 243], "usabl": [0, 230, 243], "function": [0, 3, 7, 10, 16, 23, 35, 36, 37, 38, 41, 42, 44, 46, 47, 48, 68, 91, 95, 97, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 119, 120, 121, 122, 123, 124, 127, 130, 131, 132, 133, 135, 136, 139, 140, 142, 143, 149, 150, 151, 152, 153, 154, 155, 161, 162, 163, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 205, 208, 210, 213, 215, 218, 220, 226, 232, 233, 236, 237, 240, 241, 242], "cost": [0, 2, 20, 233, 237], "return": [0, 3, 6, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 98, 99, 101, 102, 104, 105, 106, 107, 108, 112, 113, 114, 115, 116, 119, 122, 123, 124, 125, 126, 127, 130, 131, 132, 134, 138, 139, 140, 143, 144, 145, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 176, 177, 179, 180, 199, 202, 205, 206, 208, 210, 213, 215, 218, 220, 221, 222, 223, 224, 226, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "process": [0, 1, 2, 3, 4, 7, 11, 12, 15, 23, 41, 42, 44, 46, 47, 48, 95, 136, 230, 232, 233, 238, 242, 243], "good": [0, 1, 8, 232, 234, 242, 243], "runtim": [0, 3, 23, 41, 44, 46, 47, 48, 237], "perform": [0, 3, 7, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 74, 91, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 116, 119, 120, 121, 123, 124, 133, 135, 136, 149, 158, 162, 195, 199, 232, 233, 234, 236, 237, 241, 242], "ppo": [0, 7, 140, 153, 161, 162, 205, 212, 213, 226, 232, 235, 239], "your": [0, 2, 3, 6, 7, 9, 23, 41, 44, 46, 47, 48, 95, 224, 227, 233, 234, 235, 239, 241, 243], "tensordictmodul": [0, 11, 12, 14, 15, 116, 139, 141, 232, 233, 234, 235, 236, 237, 238, 239], "introduct": [0, 235, 239, 242], "env": [0, 1, 2, 4, 5, 6, 7, 11, 12, 14, 23, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 115, 116, 139, 181, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 222, 223, 224, 226, 232, 233, 234, 235, 236, 238, 239], "us": [0, 1, 2, 3, 4, 6, 7, 9, 10, 11, 12, 14, 15, 19, 20, 23, 25, 26, 27, 28, 32, 41, 42, 44, 45, 46, 47, 48, 52, 64, 65, 67, 75, 78, 79, 87, 89, 90, 91, 94, 95, 97, 100, 101, 102, 103, 104, 105, 110, 112, 114, 115, 116, 118, 119, 126, 127, 136, 139, 140, 144, 145, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 178, 188, 189, 195, 196, 199, 201, 203, 206, 207, 208, 216, 220, 224, 227, 230, 231, 234, 235, 236, 237, 239, 241, 242], "pretrain": [0, 235, 239], "task": [0, 8, 47, 48, 52, 78, 94, 232, 233, 234, 235, 237, 239, 242, 243], "specif": [0, 4, 7, 27, 28, 44, 199, 226, 230, 232, 234, 235, 239], "polici": [0, 1, 2, 3, 7, 11, 12, 13, 14, 15, 41, 44, 45, 46, 47, 48, 67, 100, 101, 118, 130, 131, 132, 133, 135, 136, 139, 140, 145, 146, 152, 153, 154, 161, 162, 163, 165, 195, 201, 205, 206, 207, 208, 210, 213, 220, 222, 223, 230, 233, 235, 238, 239, 240, 242, 243], "multi": [0, 3, 6, 8, 23, 41, 44, 46, 47, 48, 113, 114, 232, 233, 235, 237, 239, 243], "ddpg": [0, 104, 105, 106, 107, 154, 160, 166, 208, 209, 226, 235, 239], "pixel": [0, 3, 6, 19, 63, 65, 71, 73, 75, 78, 80, 89, 94, 104, 120, 121, 182, 205, 210, 213, 215, 218, 232, 235, 238, 239, 242, 243], "dqn": [0, 134, 138, 145, 155, 156, 160, 166, 210, 211, 226, 235, 239], "api": [0, 3, 4, 78, 94, 230, 237, 242, 243], "packag": [0, 5, 6, 9, 226, 227, 242], "helper": [0, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 232], "replai": [0, 7, 14, 25, 26, 27, 28, 32, 33, 34, 38, 39, 47, 48, 67, 79, 87, 154, 155, 163, 165, 196, 199, 216, 220, 226, 230, 233, 238], "buffer": [0, 3, 7, 14, 23, 25, 26, 27, 28, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 47, 48, 66, 67, 78, 79, 87, 91, 94, 139, 142, 154, 155, 163, 165, 196, 199, 216, 220, 226, 230, 233, 238, 240, 242], "compos": [0, 3, 23, 25, 26, 27, 33, 34, 39, 41, 44, 46, 47, 48, 90, 91, 95, 158, 205, 208, 210, 213, 215, 218, 226, 232, 233, 234, 236, 237, 242, 243], "tensorspec": [0, 3, 13, 17, 18, 19, 20, 21, 22, 24, 30, 31, 41, 45, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 124, 129, 133, 135, 136, 137, 139, 140, 141, 226, 237], "envbas": [0, 3, 11, 12, 14, 15, 42, 44, 46, 47, 48, 49, 74, 90, 91, 95, 97, 102, 115, 116, 195, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 222, 223, 224, 226], "gymlikeenv": [0, 226], "envmetadata": [0, 226], "spec": [0, 2, 3, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 41, 43, 44, 45, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 97, 124, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 145, 146, 205, 208, 210, 213, 215, 218, 226, 232, 233, 234, 236, 243], "vector": [0, 7, 17, 24, 47, 48, 67, 104, 106, 114, 173, 179, 180, 226, 232, 233, 236, 237, 238, 240, 242], "record": [0, 23, 41, 44, 46, 47, 48, 162, 181, 182, 183, 184, 185, 186, 187, 188, 189, 220, 226, 233, 234], "domain": [0, 2, 7, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 67, 87, 139, 140, 141, 142, 226, 232, 234, 237, 242, 243], "modul": [0, 3, 7, 10, 23, 41, 44, 45, 46, 47, 48, 66, 67, 78, 79, 87, 91, 94, 95, 96, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 160, 163, 164, 166, 168, 171, 172, 173, 199, 204, 209, 211, 212, 214, 217, 220, 226, 230, 232, 233, 234, 236, 238, 240], "hook": [0, 23, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 134, 135, 136, 138, 145, 146, 149, 192, 193, 195, 196, 197, 199, 200, 201, 226, 232], "explor": [0, 1, 96, 118, 133, 135, 136, 139, 140, 152, 195, 206, 207, 220, 226, 232, 233, 234, 237], "planner": [0, 102, 116, 226], "distribut": [0, 2, 3, 8, 9, 75, 102, 108, 109, 110, 112, 116, 119, 122, 123, 124, 125, 126, 127, 133, 134, 140, 141, 145, 153, 156, 161, 162, 226, 230, 232, 233, 234, 237, 240, 242, 243], "object": [0, 3, 5, 11, 12, 14, 15, 19, 23, 35, 36, 37, 38, 41, 44, 46, 47, 48, 68, 75, 78, 90, 91, 95, 116, 129, 130, 137, 139, 140, 141, 147, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 203, 206, 207, 219, 220, 224, 226, 230, 233, 234, 237, 240, 242], "sac": [0, 163, 165, 217, 218, 226], "redq": [0, 163, 214, 215, 226], "a2c": [0, 152, 204, 226], "dreamer": [0, 61, 110, 157, 158, 159, 226], "trainer": [0, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 232], "checkpoint": [0, 226, 238], "builder": [0, 226, 233, 242], "logger": [0, 182, 183, 185, 186, 187, 188, 189, 193, 195, 199, 220, 224, 226], "_util": [0, 10, 226], "implement_for": [0, 226], "contribut": 0, "work": [0, 3, 6, 7, 10, 23, 41, 44, 46, 47, 48, 64, 78, 95, 103, 114, 199, 227, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "what": [0, 3, 7, 29, 41, 44, 46, 47, 48, 87, 227, 233, 234, 237, 238, 240, 242, 243], "version": [0, 1, 5, 10, 23, 41, 44, 46, 47, 48, 165, 173, 227, 232, 233, 234, 237, 238, 242], "habitat": [0, 56, 227, 238], "lab": [0, 3, 52, 53, 227], "up": [0, 1, 2, 3, 7, 8, 20, 227, 232, 233, 234, 237, 240, 242], "issu": [0, 4, 7, 79, 139, 140, 227, 243], "about": [0, 3, 4, 227, 232, 233, 234, 237, 242, 243], "mujoco": [0, 5, 7, 227, 234], "instal": [0, 4, 9, 199, 227, 234, 242], "prerequisit": 0, "render": [0, 7, 195, 227, 232, 233, 234], "all": [0, 3, 7, 11, 12, 14, 15, 23, 41, 42, 44, 45, 46, 47, 48, 49, 66, 70, 75, 78, 83, 87, 88, 91, 94, 95, 99, 100, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 139, 140, 142, 149, 158, 194, 199, 202, 222, 223, 224, 227, 230, 232, 233, 234, 235, 236, 237, 240, 241, 242, 243], "bindindg": 0, "2": [0, 1, 3, 7, 9, 10, 11, 12, 14, 21, 22, 23, 41, 42, 44, 46, 47, 48, 59, 60, 64, 66, 67, 75, 78, 87, 91, 94, 95, 103, 104, 105, 106, 111, 113, 114, 119, 134, 135, 136, 139, 143, 145, 153, 154, 161, 163, 165, 170, 171, 172, 173, 176, 177, 179, 180, 182, 190, 232, 233, 234, 236, 237, 238, 241, 242, 243], "1": [0, 1, 2, 3, 7, 9, 10, 11, 12, 14, 15, 20, 21, 22, 23, 24, 30, 31, 41, 42, 44, 45, 46, 47, 48, 51, 58, 59, 60, 62, 64, 66, 67, 68, 72, 74, 75, 78, 79, 87, 88, 89, 91, 94, 95, 101, 102, 103, 104, 105, 107, 111, 112, 114, 116, 117, 118, 119, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 145, 149, 152, 153, 158, 161, 162, 163, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 190, 195, 196, 197, 205, 208, 210, 213, 215, 218, 220, 224, 227, 230, 232, 233, 234, 236, 237, 238, 239, 241, 242, 243], "old": [0, 161, 242], "bind": [0, 5], "py": [0, 3, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243], "when": [0, 1, 2, 3, 4, 7, 11, 12, 14, 15, 23, 25, 26, 27, 28, 35, 36, 37, 38, 41, 42, 44, 46, 47, 48, 66, 67, 74, 75, 78, 79, 83, 87, 90, 91, 94, 95, 100, 102, 114, 115, 116, 117, 126, 139, 140, 142, 149, 153, 161, 162, 170, 181, 182, 196, 224, 227, 230, 232, 233, 234, 237, 238, 240, 241, 242], "pro": [0, 6, 227], "tip": [0, 6, 227], "debug": [0, 5, 227, 242], "gradient": [0, 23, 41, 44, 46, 47, 48, 91, 112, 118, 126, 127, 152, 164, 170, 171, 172, 173, 199, 232, 233, 234, 237], "relat": [0, 9, 71], "error": [0, 1, 3, 6, 9, 10, 23, 41, 44, 46, 47, 48, 79, 97, 148, 232, 233, 234, 241, 242], "newcom": 0, "my": 0, "train": [0, 1, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 72, 78, 91, 94, 97, 104, 106, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 199, 201, 220, 230, 238, 241, 242], "too": [0, 2, 6, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 112, 126, 127, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 232, 233, 234, 237, 242], "slow": [0, 3], "bug": [0, 243], "resourc": [0, 227, 232, 234], "functorch": [0, 7, 9, 139, 142, 233, 243], "blog": 0, "websit": 0, "index": [0, 3, 6, 7, 9, 14, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 39, 40, 67, 101, 232, 233, 236, 241, 243], "search": [0, 233], "page": [0, 6], "somewhat": [1, 242], "equival": [1, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 91, 196, 232, 242, 243], "dataload": [1, 234, 241], "except": [1, 3, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 41, 70, 122, 148, 232, 233, 241, 242, 243], "thei": [1, 3, 7, 8, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 68, 70, 78, 90, 91, 94, 113, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 196, 199, 230, 233, 234, 236, 237, 238, 240, 241, 242, 243], "collect": [1, 3, 7, 11, 12, 14, 15, 23, 25, 26, 27, 28, 75, 78, 94, 97, 136, 154, 163, 165, 190, 196, 199, 201, 202, 203, 220, 230, 233, 237, 238, 241, 242, 243], "over": [1, 2, 3, 7, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 67, 75, 88, 142, 156, 158, 202, 230, 232, 234, 237, 240, 241, 242], "non": [1, 7, 23, 41, 44, 46, 47, 48, 62, 66, 71, 78, 87, 91, 92, 94, 139, 140, 158, 171, 172, 173, 232, 237, 240, 242], "static": [1, 95, 237], "like": [1, 6, 23, 41, 44, 46, 47, 48, 56, 89, 97, 163, 232, 234, 237, 238, 241, 242], "being": [1, 3, 7, 15, 23, 41, 44, 46, 47, 48, 67, 68, 91, 100, 136, 153, 161, 162, 182, 196, 201, 222, 223, 224, 232, 233, 234, 237, 238], "": [1, 3, 5, 6, 7, 23, 25, 26, 27, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 95, 97, 103, 118, 133, 139, 140, 165, 171, 172, 173, 215, 218, 232, 233, 234, 236, 237, 238, 241, 242, 243], "accept": [1, 11, 12, 14, 15, 23, 41, 44, 45, 46, 47, 48, 66, 71, 78, 83, 87, 91, 92, 94, 139, 140, 141, 230, 232, 234, 240, 242], "two": [1, 7, 9, 23, 41, 44, 46, 47, 48, 75, 78, 94, 107, 140, 161, 165, 167, 195, 199, 205, 213, 215, 218, 232, 233, 234, 236, 240, 241, 242, 243], "main": [1, 2, 4, 42, 140, 199, 232, 233, 236, 242], "argument": [1, 3, 11, 12, 14, 15, 19, 23, 41, 44, 46, 47, 48, 66, 78, 87, 90, 91, 94, 103, 114, 117, 139, 140, 141, 143, 181, 192, 202, 205, 208, 210, 213, 215, 218, 220, 221, 224, 232, 233, 234, 237, 240, 242], "list": [1, 5, 6, 7, 8, 11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 37, 38, 41, 44, 45, 46, 47, 48, 63, 68, 75, 78, 83, 91, 94, 114, 142, 143, 169, 171, 173, 181, 195, 196, 222, 223, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "constructor": [1, 14, 90, 171, 172, 173, 205, 208, 210, 213, 215, 218, 221, 224, 232, 234, 240], "iter": [1, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 44, 46, 47, 48, 69, 75, 84, 95, 103, 114, 139, 140, 141, 142, 147, 169, 195, 198, 199, 205, 213, 215, 218, 230, 232, 234, 237], "execut": [1, 3, 5, 6, 7, 11, 12, 14, 23, 25, 26, 27, 28, 41, 42, 44, 45, 46, 47, 48, 87, 141, 142, 203, 224, 230, 233, 234, 239, 240, 242], "step": [1, 3, 7, 11, 12, 14, 15, 23, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 74, 75, 86, 88, 91, 101, 102, 110, 113, 115, 116, 133, 135, 136, 140, 152, 157, 162, 170, 181, 190, 195, 199, 230, 232, 233, 236, 237, 238, 241, 243], "queri": [1, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 78, 90, 95, 142, 240, 243], "defin": [1, 2, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 79, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 171, 172, 173, 181, 221, 233, 237, 240, 241, 242], "number": [1, 3, 7, 11, 12, 14, 15, 18, 20, 23, 24, 25, 26, 27, 32, 35, 36, 37, 41, 44, 45, 46, 47, 48, 63, 67, 72, 74, 75, 82, 86, 88, 95, 102, 103, 108, 109, 110, 111, 112, 114, 116, 119, 120, 121, 123, 124, 125, 126, 127, 133, 135, 136, 139, 140, 151, 157, 163, 165, 190, 192, 195, 199, 201, 202, 203, 222, 223, 224, 232, 233, 234, 237, 238, 242], "befor": [1, 3, 5, 6, 9, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 49, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 92, 114, 117, 118, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 172, 173, 196, 232, 233, 234, 237, 240, 241, 242], "deliv": [1, 233, 243], "stack": [1, 6, 7, 47, 48, 95, 101, 141, 142, 181, 190, 233, 236, 237, 240, 241, 243], "user": [1, 2, 4, 7, 23, 41, 44, 46, 47, 48, 86, 91, 113, 221, 230, 233, 237, 240, 242, 243], "reset": [1, 3, 7, 11, 12, 14, 15, 41, 42, 44, 45, 46, 47, 48, 51, 58, 63, 66, 69, 74, 78, 83, 84, 86, 87, 88, 90, 93, 95, 97, 101, 128, 136, 181, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 243], "whenev": [1, 3, 201], "reach": [1, 11, 12, 14, 15, 41, 44, 46, 47, 48, 133, 135, 136, 234, 242, 243], "done": [1, 3, 6, 7, 11, 12, 14, 19, 23, 41, 42, 44, 45, 46, 47, 48, 51, 58, 59, 60, 75, 82, 84, 86, 87, 95, 101, 102, 116, 154, 155, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 238, 241, 242, 243], "state": [1, 3, 11, 12, 14, 15, 23, 41, 44, 45, 46, 47, 48, 51, 58, 63, 64, 66, 69, 75, 84, 86, 90, 91, 93, 95, 102, 110, 113, 114, 116, 120, 123, 124, 130, 139, 144, 163, 170, 171, 172, 173, 224, 232, 233, 234, 237, 242], "after": [1, 7, 19, 23, 41, 44, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 74, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 101, 117, 133, 135, 158, 232, 233, 234, 237, 238, 240, 241, 242], "predifin": 1, "becaus": [1, 3, 6, 90, 107, 113, 139, 140, 232, 233, 236, 237, 241, 242], "potenti": [1, 237], "comput": [1, 3, 7, 11, 14, 20, 23, 41, 44, 46, 47, 48, 75, 91, 93, 103, 104, 105, 106, 107, 109, 110, 111, 112, 113, 114, 115, 119, 120, 121, 123, 124, 126, 127, 130, 133, 135, 136, 140, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 168, 169, 170, 171, 172, 173, 203, 232, 233, 234, 236, 238, 240], "heavi": [1, 7], "crucial": [1, 232, 233, 234, 237, 242], "configur": [1, 7, 11, 12, 14, 15, 162, 205, 213, 215, 218, 234, 237], "hyperparamet": [1, 237], "appropri": [1, 6, 11, 12, 14, 15, 39, 40, 87, 221, 224, 232], "paramet": [1, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 49, 52, 53, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 132, 133, 135, 136, 139, 140, 141, 142, 144, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 221, 222, 223, 224, 232, 233, 237, 238, 240, 243], "consider": [1, 3, 7, 232], "whether": [1, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 44, 45, 46, 47, 48, 91, 103, 114, 143, 154, 155, 156, 163, 165, 173, 232, 233, 234, 237, 242], "should": [1, 3, 4, 6, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 38, 41, 44, 45, 46, 47, 48, 63, 71, 75, 79, 83, 84, 90, 91, 95, 97, 101, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 139, 140, 149, 160, 161, 162, 163, 166, 170, 171, 172, 173, 182, 194, 195, 196, 199, 220, 222, 223, 224, 230, 232, 233, 234, 236, 237, 238, 242, 243], "occur": [1, 7, 12, 64, 75, 79, 139, 140, 158, 242], "serial": [1, 3, 23, 41, 44, 46, 47, 48, 95], "optim": [1, 7, 23, 41, 44, 46, 47, 48, 102, 116, 117, 118, 162, 165, 194, 199, 205, 213, 220, 230, 233, 234, 237, 241], "parallel": [1, 3, 7, 11, 12, 15, 97, 152, 221, 222, 223, 224, 233, 234], "syncdatacollector": [1, 11, 12, 15, 220, 223, 226, 234], "worker": [1, 11, 12, 14, 15, 42, 46, 47, 48, 95, 222, 223, 224, 232, 234, 242, 243], "multisyncdatacollector": [1, 223, 226, 234, 243], "split": [1, 11, 12, 14, 15, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 230, 234, 243], "workload": 1, "across": [1, 7, 95, 136, 201, 232, 241], "aggreg": [1, 103, 104, 105, 142, 241], "result": [1, 3, 6, 11, 12, 14, 15, 23, 25, 26, 27, 28, 41, 42, 44, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 95, 97, 101, 114, 146, 171, 174, 175, 176, 177, 178, 179, 180, 181, 201, 233, 237, 238, 241, 242, 243], "final": [1, 3, 133, 135, 136, 141, 171, 195, 232, 233, 234, 237, 242], "multiasyncdatacollector": [1, 15, 222, 226, 232, 233, 234, 243], "sever": [1, 7, 21, 23, 41, 44, 46, 47, 48, 64, 91, 162, 234, 242], "batch": [1, 3, 11, 12, 14, 15, 16, 20, 23, 24, 25, 26, 27, 28, 41, 44, 45, 46, 47, 48, 71, 75, 79, 87, 91, 92, 108, 109, 113, 117, 122, 125, 136, 139, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 196, 198, 199, 201, 222, 223, 224, 230, 232, 233, 234, 236, 238, 240, 242, 243], "gather": [1, 79, 170, 203, 227, 232, 234, 237, 240, 242], "continu": [1, 8, 18, 30, 104, 105, 106, 107, 136, 140, 142, 166, 171, 174, 175, 178, 208, 232, 234, 237, 242, 243], "concomittantli": 1, "network": [1, 7, 23, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 114, 118, 120, 121, 123, 124, 130, 131, 132, 139, 154, 155, 156, 160, 163, 165, 166, 168, 171, 172, 173, 205, 208, 213, 219, 220, 230, 236, 237, 240, 242], "impli": [1, 242], "weight": [1, 8, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 118, 139, 152, 153, 158, 201, 219, 230, 232, 233, 234, 236, 237, 243], "mai": [1, 2, 3, 4, 6, 7, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 75, 84, 91, 92, 95, 97, 114, 230, 232, 234, 237, 238, 242, 243], "slightli": [1, 232, 237, 238, 240, 242], "lag": [1, 11, 12, 14, 15, 234], "therefor": [1, 3, 6, 162, 241, 242], "although": [1, 7, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 230, 232, 233], "fastest": 1, "price": 1, "suitabl": 1, "where": [1, 3, 6, 7, 11, 12, 14, 15, 25, 26, 27, 28, 35, 36, 41, 44, 45, 46, 47, 48, 63, 78, 83, 88, 90, 92, 94, 133, 135, 139, 140, 151, 152, 153, 154, 156, 160, 161, 162, 163, 165, 166, 170, 171, 172, 173, 181, 182, 196, 199, 201, 230, 232, 233, 234, 236, 237, 240, 242], "asynchron": [1, 8, 12, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 152, 222, 234], "off": [1, 2, 112, 126, 127, 165, 195, 206, 230, 233, 234, 238, 242], "curriculum": 1, "For": [1, 3, 6, 7, 8, 9, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 71, 75, 117, 145, 152, 156, 162, 195, 208, 230, 232, 234, 237, 238, 240, 242], "remot": [1, 47, 48, 242], "rollout": [1, 3, 11, 12, 14, 15, 41, 44, 45, 46, 47, 48, 59, 60, 97, 102, 116, 136, 152, 203, 232, 233, 234, 238, 243], "necessari": [1, 5, 7, 11, 12, 14, 15, 84, 163, 171, 172, 173, 232, 234], "synchronis": [1, 42], "from": [1, 2, 3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 49, 64, 67, 69, 75, 78, 79, 84, 86, 87, 89, 90, 91, 92, 94, 95, 101, 102, 104, 105, 106, 107, 112, 114, 115, 116, 117, 119, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 153, 154, 155, 161, 162, 163, 165, 170, 171, 172, 173, 181, 182, 190, 196, 199, 202, 203, 205, 208, 210, 213, 215, 216, 218, 220, 221, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "either": [1, 4, 23, 41, 44, 46, 47, 48, 144, 189, 208, 230, 232, 238, 241, 242, 243], "update_policy_weights_": [1, 11, 12, 14, 15, 232, 233, 243], "update_at_each_batch": [1, 11, 12, 15, 232], "true": [1, 3, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 59, 60, 64, 66, 67, 71, 74, 75, 78, 79, 82, 86, 87, 89, 91, 92, 94, 95, 97, 101, 102, 103, 104, 105, 106, 107, 111, 112, 114, 116, 117, 118, 126, 127, 130, 131, 132, 133, 136, 139, 140, 141, 142, 148, 152, 153, 157, 158, 159, 161, 162, 163, 165, 167, 171, 172, 173, 176, 177, 179, 180, 181, 182, 192, 193, 195, 196, 199, 210, 224, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "second": [1, 7, 165, 198, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "consid": [1, 7, 23, 41, 44, 46, 47, 48, 67, 108, 125, 232, 237, 241], "devic": [1, 2, 3, 6, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 35, 36, 41, 43, 44, 45, 46, 47, 48, 51, 58, 59, 60, 66, 77, 78, 87, 89, 91, 94, 102, 103, 104, 105, 106, 107, 111, 113, 114, 116, 117, 118, 130, 131, 132, 134, 136, 137, 138, 139, 142, 143, 145, 146, 154, 196, 201, 205, 208, 210, 213, 215, 216, 218, 232, 233, 234, 236, 237, 238, 240, 243], "oper": [1, 3, 6, 7, 11, 12, 15, 23, 41, 44, 46, 47, 48, 71, 90, 119, 130, 131, 132, 139, 144, 145, 152, 153, 154, 155, 156, 161, 162, 170, 171, 172, 173, 199, 208, 210, 215, 218, 230, 232, 233, 234, 236, 237, 240, 242], "instanc": [1, 3, 6, 7, 11, 12, 14, 15, 23, 29, 41, 42, 44, 45, 46, 47, 48, 53, 63, 75, 87, 90, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 119, 120, 121, 123, 124, 133, 135, 136, 140, 141, 142, 149, 182, 189, 195, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 222, 223, 230, 232, 233, 234, 237, 240, 241, 242], "cpu": [1, 3, 7, 9, 11, 12, 14, 17, 23, 29, 35, 36, 41, 44, 45, 46, 47, 48, 51, 58, 59, 60, 66, 78, 87, 91, 94, 102, 116, 118, 137, 139, 142, 196, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "slower": 1, "than": [1, 7, 11, 12, 14, 15, 107, 114, 119, 133, 135, 139, 196, 201, 227, 232, 233, 234, 237, 240, 241, 242, 243], "one": [1, 3, 4, 6, 7, 10, 11, 12, 14, 15, 22, 24, 25, 26, 27, 28, 32, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 67, 74, 75, 78, 85, 91, 92, 94, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 122, 123, 124, 133, 134, 135, 136, 138, 139, 140, 145, 146, 149, 151, 152, 153, 154, 155, 161, 162, 163, 192, 194, 195, 199, 203, 205, 213, 215, 218, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242], "cuda": [1, 3, 6, 23, 41, 44, 46, 47, 48, 66, 77, 78, 87, 91, 94, 139, 191, 232, 233, 234, 238, 241, 242], "multipl": [1, 3, 4, 7, 11, 12, 14, 15, 20, 47, 48, 64, 67, 83, 90, 95, 113, 117, 118, 139, 140, 163, 215, 224, 230, 232, 233, 234, 237, 241, 243], "infer": [1, 47, 48, 95, 117, 165, 232, 234, 240, 241], "run": [1, 3, 4, 5, 6, 7, 9, 11, 12, 15, 23, 41, 44, 45, 46, 47, 48, 52, 53, 74, 75, 91, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 141, 142, 149, 195, 222, 223, 224, 227, 230, 232, 233, 234, 236, 237, 238, 240, 241, 243], "dispatch": 1, "avail": [1, 5, 140, 145, 146, 222, 223, 232, 233, 234, 242], "speed": [1, 2, 7, 20, 232, 233, 234, 237], "avoid": [1, 23, 41, 44, 46, 47, 48, 91, 95, 139, 202, 234, 240], "oom": 1, "choic": [1, 2, 119], "size": [1, 2, 3, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 35, 36, 38, 41, 43, 44, 45, 46, 47, 48, 51, 58, 59, 60, 64, 71, 78, 85, 87, 89, 91, 92, 94, 102, 103, 108, 113, 114, 116, 119, 122, 123, 124, 125, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 170, 171, 172, 173, 182, 190, 196, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 238, 240, 242, 243], "pass": [1, 3, 14, 19, 23, 27, 41, 42, 43, 44, 46, 47, 48, 68, 90, 92, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 117, 119, 120, 121, 123, 124, 133, 135, 136, 139, 140, 142, 148, 149, 171, 172, 173, 196, 222, 223, 224, 232, 233, 234, 236, 237, 242], "ie": [1, 11, 12, 14, 17, 18, 19, 20, 21, 22, 24, 27, 29, 30, 31, 32, 71, 92, 234], "store": [1, 2, 7, 11, 12, 14, 15, 19, 23, 27, 28, 32, 35, 36, 37, 41, 44, 46, 47, 48, 95, 102, 113, 116, 205, 208, 210, 213, 215, 218, 230, 232, 233, 234, 238, 241, 242], "while": [1, 3, 6, 7, 23, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 161, 162, 232, 233, 234, 237, 238, 243], "wait": [1, 233, 237], "also": [1, 2, 3, 7, 10, 23, 27, 41, 44, 46, 47, 48, 67, 75, 83, 84, 87, 91, 124, 141, 142, 152, 154, 155, 171, 230, 232, 233, 234, 236, 237, 240, 241, 242], "impact": 1, "memori": [1, 3, 7, 20, 23, 35, 41, 42, 44, 46, 47, 48, 66, 78, 87, 91, 94, 95, 139, 224, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "manag": [1, 7, 168, 169, 195, 232, 240], "kei": [1, 3, 6, 16, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 41, 44, 46, 47, 48, 49, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 101, 102, 115, 116, 133, 135, 136, 139, 140, 141, 142, 143, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 182, 194, 195, 198, 199, 203, 205, 213, 215, 218, 230, 232, 233, 234, 236, 237, 240, 242, 243], "control": [1, 3, 4, 7, 47, 48, 52, 53, 67, 104, 105, 106, 107, 115, 116, 124, 136, 139, 140, 141, 153, 161, 162, 166, 171, 174, 175, 178, 208, 230, 232, 234, 237], "which": [1, 3, 6, 7, 10, 11, 12, 14, 15, 19, 20, 23, 24, 28, 41, 44, 46, 47, 48, 49, 63, 64, 72, 74, 75, 78, 79, 87, 88, 90, 91, 97, 112, 126, 127, 130, 131, 132, 139, 140, 142, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 171, 190, 194, 205, 208, 210, 213, 215, 218, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242], "storing_devic": [1, 11, 12, 14, 15, 232, 233, 243], "dure": [1, 11, 12, 14, 15, 41, 44, 46, 47, 48, 72, 91, 195, 199, 232, 234, 237, 242], "A": [1, 3, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 46, 47, 48, 49, 56, 67, 72, 78, 79, 87, 90, 91, 93, 95, 96, 97, 101, 102, 103, 114, 116, 118, 119, 133, 135, 140, 141, 142, 145, 149, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 172, 173, 183, 184, 185, 192, 199, 201, 205, 210, 213, 215, 218, 220, 233, 234, 241, 242], "heurist": [1, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 136, 232, 242], "usual": [1, 3, 5, 6, 7, 41, 44, 46, 47, 48, 118, 181, 205, 213, 215, 218, 227, 230, 232, 234, 242], "same": [1, 3, 10, 14, 23, 41, 42, 44, 46, 47, 48, 67, 72, 74, 75, 90, 91, 95, 103, 114, 136, 232, 233, 234, 236, 238, 240, 241, 242], "storag": [1, 2, 7, 23, 25, 26, 27, 28, 35, 36, 37, 41, 43, 44, 46, 47, 48, 68, 226, 230, 232, 233, 234, 238], "default": [1, 3, 9, 11, 12, 14, 15, 17, 19, 20, 23, 24, 25, 26, 27, 32, 35, 36, 41, 44, 46, 47, 48, 49, 52, 63, 64, 67, 71, 74, 75, 78, 79, 82, 87, 88, 89, 91, 92, 94, 95, 97, 101, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 120, 121, 123, 124, 125, 126, 127, 129, 133, 135, 136, 137, 139, 140, 143, 149, 152, 153, 154, 155, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 190, 192, 193, 195, 196, 197, 199, 205, 208, 213, 215, 218, 220, 224, 230, 232, 233, 234, 238, 240, 241, 242, 243], "behaviour": [1, 3, 44, 64, 75, 79, 112, 126, 127, 195, 233], "besid": 1, "those": [1, 4, 6, 47, 48, 75, 87, 140, 141, 142, 201, 222, 223, 232, 233, 242], "choos": [1, 232, 234], "follow": [1, 2, 3, 5, 6, 7, 23, 41, 44, 45, 46, 47, 48, 78, 103, 114, 151, 153, 161, 164, 199, 215, 218, 230, 232, 233, 234, 236, 237, 240, 241, 242, 243], "max_frames_per_traj": [1, 11, 12, 14, 15, 202, 232, 234, 243], "frame": [1, 2, 11, 12, 14, 15, 23, 44, 63, 72, 133, 135, 136, 181, 182, 192, 195, 199, 202, 203, 232, 233, 234, 242, 243], "call": [1, 3, 6, 7, 10, 11, 12, 14, 15, 23, 25, 26, 27, 28, 35, 36, 37, 38, 41, 44, 46, 47, 48, 63, 66, 67, 68, 75, 77, 78, 83, 86, 87, 91, 94, 95, 97, 100, 102, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 116, 117, 119, 120, 121, 123, 124, 133, 135, 136, 139, 140, 142, 149, 170, 181, 195, 230, 232, 233, 234, 237, 240, 241, 242], "frames_per_batch": [1, 11, 12, 14, 15, 202, 232, 233, 234, 243], "each": [1, 3, 6, 7, 11, 12, 14, 15, 16, 21, 22, 23, 27, 41, 42, 44, 46, 47, 48, 78, 83, 86, 87, 88, 94, 95, 133, 142, 145, 146, 176, 177, 179, 180, 195, 196, 222, 223, 232, 233, 234, 237, 238, 240, 242, 243], "init_random_fram": [1, 11, 12, 14, 15, 202, 232, 233], "random": [1, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 33, 41, 44, 45, 46, 47, 48, 67, 74, 75, 87, 97, 139, 140, 163, 195, 203, 232, 233, 234, 237, 238, 242, 243], "rand_step": [1, 41, 42, 44, 45, 46, 47, 48, 50, 52, 53, 54, 55, 57, 95, 237, 242, 243], "reset_at_each_it": [1, 11, 12, 14, 15, 232], "split_traj": [1, 11, 12, 14, 15, 232, 234], "trajectori": [1, 11, 12, 14, 15, 16, 23, 27, 32, 41, 44, 46, 47, 48, 79, 90, 102, 116, 136, 162, 171, 173, 174, 175, 176, 177, 178, 179, 180, 190, 226, 233, 234, 237, 242, 243], "pad": [1, 16, 103, 104, 105, 113, 196, 232, 233], "along": [1, 63, 64, 75, 79, 83, 89, 114, 118, 139, 140, 233, 237, 241], "mask": [1, 11, 12, 14, 79, 196, 232, 233, 241, 242, 243], "point": [1, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 32, 39, 40, 41, 44, 46, 47, 48, 63, 66, 78, 87, 89, 91, 94, 115, 139, 151, 156, 199, 227, 234, 236, 242], "boolean": [1, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 44, 79, 133, 174, 175, 176, 177, 178, 179, 180, 230], "repres": [1, 3, 11, 12, 14, 15, 19, 27, 41, 44, 46, 47, 48, 72, 79, 140, 145, 146, 167, 171, 196, 232, 234, 240, 241], "valid": [1, 79, 91, 103, 114, 133, 135, 161, 196, 230, 242], "valu": [1, 3, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 31, 41, 44, 46, 47, 48, 49, 62, 63, 64, 67, 74, 75, 78, 79, 81, 83, 87, 88, 89, 90, 91, 94, 95, 104, 105, 106, 107, 108, 110, 111, 112, 114, 116, 117, 118, 119, 122, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 145, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 190, 192, 193, 194, 195, 196, 199, 205, 208, 213, 215, 218, 220, 230, 233, 236, 237, 240, 242, 243], "exploration_mod": [1, 11, 14, 195, 226, 232, 233, 240], "strategi": [1, 230, 232], "reset_when_don": [1, 11, 14], "central": [2, 232], "part": [2, 7, 23, 41, 44, 46, 47, 48, 75, 83, 143, 190, 224, 232, 233, 234, 237, 240, 242], "algorithm": [2, 7, 8, 11, 12, 45, 72, 152, 162, 163, 164, 165, 190, 205, 206, 213, 230, 232, 233, 234, 237, 238, 241, 243], "implement": [2, 3, 8, 10, 23, 38, 41, 44, 46, 47, 48, 95, 112, 125, 126, 127, 152, 162, 165, 205, 213, 215, 218, 230, 232, 233, 234, 237, 243], "wide": [2, 3, 4, 232], "we": [2, 3, 4, 6, 8, 19, 23, 41, 42, 44, 46, 47, 48, 78, 87, 95, 102, 113, 227, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "give": [2, 6, 45, 227, 232, 233, 237, 238, 243], "abil": [2, 237], "veri": [2, 3, 233, 237, 242, 243], "influenti": 2, "sampl": [2, 7, 8, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 41, 45, 79, 98, 100, 102, 108, 112, 116, 122, 123, 126, 127, 133, 135, 136, 139, 140, 153, 154, 155, 161, 162, 190, 196, 199, 202, 233, 234, 238, 240, 242, 243], "latenc": 2, "especi": [2, 3, 6, 7, 64], "larger": 2, "volum": 2, "lazymemmapstorag": [2, 226, 232, 233, 238], "advis": [2, 232, 242], "share": [2, 3, 5, 7, 35, 36, 37, 38, 42, 47, 48, 95, 130, 131, 132, 224, 234, 236, 240, 242, 243], "due": [2, 3, 4, 238, 242], "lower": [2, 11, 12, 14, 15, 18, 95, 123, 124, 234, 237, 241], "serialis": 2, "memmaptensor": [2, 238], "well": [2, 3, 7, 11, 12, 15, 23, 38, 41, 44, 46, 47, 48, 123, 124, 232, 233, 238, 240, 241, 242, 243], "specifi": [2, 10, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 83, 85, 92, 102, 139, 140, 232, 234, 240], "file": [2, 5, 6, 7, 181, 230, 239], "locat": [2, 6, 44, 75, 82, 112, 119, 126, 127, 234, 241], "improv": [2, 72, 152], "node": [2, 205, 208, 210, 213, 215, 218], "failur": 2, "recoveri": 2, "mean": [2, 3, 6, 14, 27, 32, 75, 95, 102, 108, 110, 113, 116, 125, 133, 140, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 232, 233, 234, 237, 242, 243], "liststorag": [2, 25, 26, 27, 226], "were": [2, 6, 47, 48, 232, 234], "found": [2, 5, 6, 9, 19, 23, 27, 41, 44, 46, 47, 48, 95, 140, 154, 162, 232, 233, 240], "rough": 2, "benchmark": [2, 3, 8], "http": [2, 4, 5, 6, 9, 25, 32, 46, 63, 78, 104, 105, 106, 107, 110, 111, 116, 118, 120, 121, 123, 124, 136, 145, 152, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 171, 174, 175, 178, 205, 208, 213, 215, 218, 232, 238, 243], "com": [2, 4, 5, 6, 9, 238, 243], "tree": 2, "type": [2, 3, 23, 25, 27, 29, 41, 44, 45, 46, 47, 48, 66, 78, 87, 91, 94, 95, 103, 114, 118, 133, 135, 139, 140, 147, 205, 208, 210, 213, 215, 218, 222, 233, 234, 237, 241, 242], "1x": 2, "lazytensorstorag": [2, 226, 234], "83x": 2, "3": [2, 3, 5, 6, 9, 10, 11, 12, 14, 19, 20, 21, 22, 23, 24, 41, 44, 46, 47, 48, 66, 67, 75, 78, 87, 89, 91, 94, 102, 103, 104, 105, 111, 113, 114, 116, 119, 129, 130, 131, 132, 134, 137, 139, 142, 143, 145, 148, 158, 171, 172, 173, 176, 177, 179, 180, 182, 198, 210, 230, 232, 233, 234, 237, 238, 239, 241, 242, 243], "44x": 2, "difficult": 2, "trajecotri": 2, "One": [2, 7, 122, 133, 135, 139, 167, 189, 232, 240, 241, 242], "element": [2, 21, 22, 24, 25, 26, 27, 28, 32, 35, 36, 37, 79, 103, 133, 139, 140, 190, 234, 242], "pai": [2, 7, 233], "attent": [2, 7, 233, 240], "alwai": [2, 23, 41, 44, 46, 47, 48, 74, 233, 234, 237], "lead": [2, 3, 7, 9, 10, 19, 87, 112, 126, 127, 237, 243], "dimens": [2, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 63, 64, 71, 75, 79, 85, 89, 92, 103, 114, 117, 118, 125, 126, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 224, 234, 237, 241], "other": [2, 3, 6, 7, 23, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 67, 84, 95, 118, 119, 140, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 196, 205, 213, 215, 218, 222, 223, 230, 232, 233, 234, 237, 238, 240, 242, 243], "word": [2, 242], "creat": [2, 3, 4, 5, 6, 9, 11, 12, 15, 23, 25, 26, 27, 41, 42, 44, 46, 47, 48, 49, 78, 83, 90, 91, 95, 101, 103, 104, 105, 106, 107, 111, 114, 115, 140, 155, 156, 163, 182, 196, 203, 206, 207, 220, 222, 223, 232, 233, 234, 237, 238, 240, 241, 242, 243], "1m": [2, 202, 232, 234, 238], "multidimension": [2, 27, 32, 241], "doe": [2, 3, 25, 27, 32, 38, 117, 141, 142, 153, 161, 162, 170, 199, 230, 232, 234, 237, 241, 242], "desir": [2, 3, 23, 41, 44, 46, 47, 48, 49, 66, 75, 78, 79, 87, 91, 94, 100, 103, 114, 139, 140, 232, 233, 237, 241], "sub": [2, 3, 41, 44, 46, 47, 48, 79, 141, 142, 190, 199, 234, 236, 242, 243], "diversifi": 2, "make": [2, 6, 23, 38, 41, 44, 46, 47, 48, 55, 58, 75, 78, 79, 97, 101, 117, 140, 162, 196, 207, 224, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "more": [2, 5, 7, 10, 11, 12, 14, 15, 23, 25, 26, 27, 28, 41, 44, 46, 47, 48, 96, 114, 117, 119, 133, 135, 139, 145, 152, 156, 162, 171, 174, 175, 178, 194, 208, 227, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242], "To": [2, 3, 5, 6, 7, 23, 25, 26, 27, 41, 44, 46, 47, 48, 95, 130, 131, 132, 136, 199, 232, 233, 234, 237, 238, 240, 242, 243], "do": [2, 3, 6, 11, 12, 14, 15, 44, 74, 79, 101, 117, 131, 230, 232, 233, 234, 236, 237, 242, 243], "custom": [2, 3, 4, 23, 41, 44, 46, 47, 48, 224, 234, 237], "name": [2, 5, 6, 10, 23, 41, 44, 46, 47, 48, 52, 67, 69, 83, 84, 91, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 183, 185, 186, 187, 189, 193, 194, 205, 208, 210, 213, 215, 218, 230, 232, 233, 234, 237, 240, 242], "randomcroptensordict": 2, "here": [2, 3, 6, 7, 8, 9, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "exampl": [2, 3, 8, 9, 10, 11, 12, 14, 15, 17, 19, 20, 21, 22, 23, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 64, 66, 67, 68, 75, 78, 87, 89, 91, 94, 95, 101, 102, 103, 113, 114, 116, 119, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 148, 171, 172, 173, 190, 191, 192, 193, 194, 196, 197, 198, 201, 205, 208, 210, 213, 215, 218, 220, 230, 232, 233, 234, 235, 236, 237, 238, 241, 242, 243], "how": [2, 23, 25, 27, 32, 41, 44, 46, 47, 48, 153, 160, 161, 162, 199, 227, 232, 233, 234, 236, 237, 238, 242, 243], "parent": [2, 3, 29, 41, 64, 71, 72, 75, 78, 87, 90, 92, 130, 162, 233, 237, 241, 242, 243], "subclass": [2, 3, 41, 44, 46, 47, 48, 90, 97, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 134, 135, 136, 138, 139, 140, 141, 149, 162, 232, 237], "basic": [2, 45, 234, 242], "properti": [2, 3, 41, 44, 45, 46, 47, 48, 91, 108, 112, 117, 122, 125, 126, 127, 237, 240, 241], "observ": [2, 3, 7, 11, 12, 14, 29, 41, 42, 44, 45, 46, 47, 48, 49, 51, 52, 53, 58, 59, 60, 63, 64, 65, 66, 68, 69, 71, 73, 75, 76, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 95, 101, 104, 105, 106, 107, 113, 120, 121, 123, 129, 130, 131, 132, 134, 135, 136, 137, 138, 143, 144, 145, 146, 158, 171, 172, 173, 182, 205, 208, 210, 213, 215, 218, 220, 230, 233, 234, 236, 237, 240, 241, 242, 243], "action": [2, 3, 7, 8, 11, 12, 14, 20, 24, 29, 41, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 67, 68, 72, 74, 84, 91, 101, 102, 104, 105, 106, 107, 109, 110, 114, 115, 116, 124, 125, 126, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 143, 145, 146, 155, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 205, 208, 210, 213, 215, 218, 220, 224, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "shape": [2, 3, 11, 12, 14, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 41, 44, 46, 47, 48, 49, 64, 75, 87, 89, 96, 97, 108, 109, 114, 117, 119, 122, 125, 137, 139, 142, 167, 182, 190, 196, 199, 220, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "dtype": [2, 3, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 41, 44, 45, 46, 47, 48, 51, 58, 59, 60, 66, 67, 68, 75, 78, 87, 89, 91, 94, 97, 102, 116, 117, 118, 130, 131, 132, 134, 136, 137, 138, 139, 142, 143, 145, 146, 171, 172, 173, 205, 208, 210, 213, 215, 218, 233, 234, 236, 237, 238, 240, 241, 242, 243], "import": [2, 3, 5, 6, 9, 11, 12, 14, 25, 27, 32, 42, 44, 45, 47, 48, 75, 78, 87, 94, 95, 102, 114, 116, 119, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 153, 171, 172, 173, 192, 195, 205, 208, 210, 213, 215, 218, 220, 233, 234, 236, 237, 238, 240, 241, 242, 243], "match": [2, 3, 5, 7, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 42, 44, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 103, 108, 114, 125, 139, 140, 161, 163, 165, 196, 201, 233, 234, 236, 237, 240, 241, 242, 243], "input": [2, 3, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 45, 46, 47, 48, 63, 64, 66, 67, 68, 69, 70, 71, 72, 75, 77, 78, 79, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 97, 101, 103, 104, 105, 106, 107, 113, 114, 117, 118, 123, 124, 136, 139, 140, 141, 142, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 202, 220, 230, 232, 233, 234, 237, 241, 242, 243], "output": [2, 3, 11, 12, 14, 15, 23, 25, 26, 27, 41, 44, 45, 46, 47, 48, 63, 75, 78, 88, 90, 94, 97, 103, 104, 105, 109, 110, 113, 114, 119, 130, 133, 135, 136, 139, 140, 141, 142, 145, 146, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 182, 190, 232, 234, 236, 237, 238, 241, 242, 243], "send": [2, 3, 7, 233, 241, 243], "receiv": [2, 3, 23, 41, 44, 46, 47, 48, 90, 114, 233, 234, 236, 237], "parallelenv": [2, 3, 11, 12, 14, 15, 46, 48, 221, 226, 232, 233, 234, 236, 242, 243], "commun": [2, 3, 227, 234, 242], "spawn": [2, 3, 46], "check": [2, 3, 4, 5, 6, 10, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 42, 44, 45, 46, 47, 48, 64, 70, 79, 97, 139, 140, 147, 232, 233, 234, 236, 237, 238, 242], "check_env_spec": [2, 3, 226, 234, 237], "method": [2, 3, 11, 12, 14, 15, 23, 27, 32, 35, 36, 37, 38, 41, 44, 46, 47, 48, 63, 66, 71, 75, 78, 80, 87, 91, 94, 102, 113, 130, 131, 132, 139, 140, 141, 147, 152, 181, 221, 230, 231, 232, 234, 237, 240, 241, 242], "saniti": [2, 3, 6, 97, 234, 237], "offer": [3, 6, 237, 242], "handl": [3, 23, 41, 44, 46, 47, 48, 95, 114, 199, 222, 223, 232, 234], "differ": [3, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 63, 67, 75, 91, 92, 114, 116, 145, 146, 162, 167, 171, 172, 195, 199, 201, 222, 223, 230, 232, 233, 234, 236, 237, 238, 241, 242], "backend": [3, 6, 10, 230, 232, 234, 237], "dm": [3, 232, 242], "base": [3, 7, 8, 11, 12, 14, 15, 34, 40, 45, 46, 87, 93, 130, 157, 199, 205, 213, 215, 218, 230, 232, 235, 237, 239, 242], "goal": [3, 232, 233, 234, 237], "abl": [3, 232, 234, 236, 237, 241, 243], "experi": [3, 25, 32, 97, 183, 185, 186, 187, 188, 189, 227, 234, 237], "even": [3, 7, 12, 35, 36, 37, 38, 42, 232, 234, 241, 242], "simul": [3, 4, 6, 7, 61, 102, 116, 232, 234, 237], "some": [3, 6, 7, 8, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 78, 97, 104, 140, 141, 142, 190, 202, 230, 232, 233, 234, 237, 240, 242, 243], "box": [3, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "wrapper": [3, 10, 15, 27, 28, 45, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 119, 133, 135, 136, 140, 144, 171, 185, 186, 187, 224, 232, 234, 238, 242], "under": [3, 23, 41, 44, 46, 47, 48, 139, 140, 232, 242], "lib": [3, 4, 5, 6, 8, 9, 11, 12, 14, 42, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 75, 87, 95, 205, 208, 210, 213, 215, 218, 220, 232, 233, 234, 236, 238, 242, 243], "hope": 3, "imit": 3, "torch": [3, 7, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 35, 36, 41, 42, 44, 45, 46, 47, 48, 51, 58, 59, 60, 64, 66, 67, 68, 75, 78, 82, 87, 89, 91, 94, 95, 101, 102, 103, 108, 110, 112, 113, 114, 116, 117, 118, 119, 122, 125, 126, 127, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 154, 171, 172, 173, 190, 198, 205, 208, 210, 213, 215, 218, 220, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "nn": [3, 11, 12, 14, 23, 41, 44, 45, 46, 47, 48, 66, 67, 78, 87, 91, 94, 102, 103, 104, 105, 106, 107, 109, 110, 111, 114, 116, 119, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 152, 155, 156, 171, 172, 173, 215, 218, 220, 232, 233, 234, 236, 237, 238, 240, 243], "typic": [3, 7, 23, 41, 44, 46, 47, 48, 230, 234, 237], "organis": 3, "allow": [3, 11, 12, 14, 15, 23, 24, 41, 44, 46, 47, 48, 49, 87, 101, 114, 167, 230, 232, 234, 237, 240, 241, 242], "gener": [3, 6, 7, 14, 26, 34, 42, 45, 75, 83, 84, 108, 122, 129, 137, 140, 143, 144, 163, 171, 174, 175, 178, 188, 199, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "arbitrari": [3, 24, 47, 48, 232, 233, 237], "nest": [3, 19, 23, 41, 44, 46, 47, 48, 49, 171, 172, 173, 230, 233, 234, 237, 241, 243], "structur": [3, 6, 136, 171, 172, 173, 234, 237, 238], "attribut": [3, 23, 41, 44, 46, 47, 48, 78, 86, 140, 233, 237, 240], "batch_siz": [3, 7, 11, 12, 14, 19, 25, 26, 27, 28, 41, 43, 45, 51, 58, 59, 60, 63, 87, 102, 116, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 190, 196, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "togeth": [3, 11, 12, 14, 15, 79, 130, 131, 132, 144, 232, 234, 240], "expect": [3, 6, 19, 23, 29, 41, 44, 45, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 78, 80, 81, 82, 84, 86, 87, 88, 89, 90, 92, 97, 136, 139, 142, 152, 153, 161, 162, 203, 227, 230, 232, 234, 237, 242], "live": [3, 11, 12, 14, 15, 23, 25, 26, 27, 28, 41, 44, 45, 46, 47, 48], "actual": [3, 6, 11, 12, 15, 41, 44, 46, 47, 48, 202, 232, 233, 234], "respons": [3, 7, 199, 240, 242], "just": [3, 190, 230, 232, 233, 234, 237, 240, 241, 242, 243], "retriev": [3, 25, 26, 27, 28, 41, 44, 46, 47, 48, 49, 64, 75, 101, 102, 116, 140, 153, 161, 162, 171, 172, 173, 205, 208, 210, 213, 215, 218, 224, 230, 234, 237, 241, 242], "care": [3, 7, 41, 44, 46, 47, 48, 90, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 232, 233, 234, 237], "map": [3, 7, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 35, 41, 44, 46, 47, 48, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 80, 81, 82, 84, 86, 87, 88, 89, 90, 92, 95, 119, 130, 131, 132, 139, 140, 142, 144, 145, 226, 232, 233, 234, 238, 240, 241], "see": [3, 5, 6, 7, 8, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 96, 103, 112, 114, 117, 126, 127, 139, 140, 196, 232, 233, 234, 237, 240, 241, 242], "below": [3, 6, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 103, 112, 114, 126, 127, 139, 196, 234, 237], "parametr": [3, 118, 140, 165, 232, 234, 240], "hardwar": 3, "observation_spec": [3, 41, 45, 63, 64, 65, 66, 68, 69, 71, 73, 75, 78, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 102, 116, 203, 220, 232, 234, 236, 237, 242], "compositespec": [3, 41, 43, 45, 67, 86, 87, 102, 116, 129, 133, 135, 137, 142, 226, 232, 234, 237, 242], "pair": [3, 23, 41, 44, 46, 47, 48, 49, 87, 130, 140, 232, 233, 234, 236, 237, 241, 242], "input_spec": [3, 41, 45, 47, 48, 66, 67, 68, 75, 84, 86, 90, 91, 92, 102, 116, 234, 237, 242], "action_spec": [3, 13, 41, 44, 45, 46, 47, 48, 51, 58, 91, 124, 129, 131, 134, 137, 138, 145, 146, 220, 232, 233, 234, 236, 237, 238, 242, 243], "reward_spec": [3, 41, 45, 62, 66, 68, 81, 82, 83, 90, 91, 92, 102, 116, 234, 237, 242], "reward": [3, 11, 12, 14, 23, 29, 41, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 62, 66, 68, 81, 82, 83, 84, 90, 91, 92, 93, 94, 95, 101, 102, 116, 144, 154, 155, 158, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 192, 193, 195, 197, 224, 230, 232, 233, 234, 236, 237, 238, 241, 242, 243], "importantli": [3, 140], "4": [3, 6, 11, 12, 14, 17, 20, 24, 45, 52, 53, 54, 57, 95, 102, 103, 104, 105, 110, 111, 113, 114, 116, 119, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 148, 181, 232, 233, 234, 237, 238, 239, 241, 242, 243], "action_s": 3, "simpli": [3, 5, 69, 84, 232, 233, 234, 242], "With": [3, 230, 232, 241, 242], "necessarili": 3, "requir": [3, 6, 7, 14, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 31, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 114, 139, 141, 142, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 230, 232, 233, 234, 237, 240, 242], "stateless": [3, 47, 48, 90, 232, 237, 242], "set_se": [3, 11, 12, 14, 15, 41, 44, 45, 46, 47, 48, 51, 58, 75, 91, 232, 237, 242, 243], "integ": [3, 11, 12, 14, 15, 21, 22, 23, 24, 31, 38, 41, 44, 46, 47, 48, 72, 75, 86, 103, 114], "seed": [3, 11, 12, 14, 15, 41, 44, 45, 46, 47, 48, 52, 59, 60, 91, 97, 199, 232], "next": [3, 7, 11, 12, 14, 19, 23, 25, 26, 27, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 95, 101, 102, 116, 124, 144, 163, 170, 171, 172, 173, 232, 233, 236, 237, 238, 242, 243], "determinist": [3, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 110, 120, 124, 129, 135, 139, 140, 232, 233, 237, 242], "preced": [3, 113, 240], "without": [3, 6, 8, 23, 41, 44, 46, 47, 48, 131, 163, 170, 220, 227, 232, 233, 234, 242], "risk": [3, 79], "overlap": 3, "consecut": [3, 136, 233, 242], "still": [3, 8, 86, 133, 161, 232, 233, 236, 237, 242], "reproduc": [3, 97, 234, 237], "max_step": [3, 41, 44, 45, 46, 47, 48, 59, 60, 86, 101, 233, 242, 243], "maximum": [3, 11, 12, 14, 15, 18, 23, 35, 36, 37, 41, 44, 46, 47, 48, 67, 81, 86, 88, 125, 126, 127, 137, 165, 196, 232, 233, 234, 237, 242, 243], "safemodul": [3, 45, 102, 115, 130, 131, 132, 133, 135, 136, 137, 140, 142, 144, 147, 148, 152, 153, 154, 157, 158, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 195, 206, 207, 220, 226, 243], "ani": [3, 4, 7, 19, 23, 25, 26, 27, 28, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 71, 78, 79, 91, 95, 97, 103, 114, 118, 139, 140, 141, 142, 162, 185, 199, 227, 232, 233, 234, 237, 242, 243], "compat": [3, 6, 10, 23, 38, 41, 44, 46, 47, 48, 56, 63, 95, 147, 167, 233, 243], "better": [3, 7, 233, 234], "featur": [3, 11, 12, 14, 15, 24, 41, 44, 46, 47, 48, 63, 71, 87, 92, 103, 110, 111, 114, 117, 118, 140, 171, 172, 173, 224, 232, 233, 234, 240, 242], "intens": [3, 7], "gym3": 3, "envpool": [3, 46], "interfac": [3, 114, 117, 232, 234, 237, 240], "simultan": [3, 47, 48, 237], "often": [3, 7, 160, 199, 237, 242], "competit": 3, "advantag": [3, 7, 111, 152, 153, 161, 162, 164, 171, 172, 173, 174, 175, 176, 178, 179, 230, 232, 233, 234, 237, 242], "scale": [3, 75, 82, 110, 112, 119, 123, 124, 126, 127, 130, 131, 132, 137, 140, 142, 197, 203, 205, 213, 215, 218, 224, 232, 233, 234, 240, 243], "varieti": 3, "its": [3, 4, 6, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 29, 30, 31, 41, 44, 45, 46, 47, 48, 63, 90, 91, 95, 103, 133, 134, 135, 140, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 199, 220, 230, 232, 233, 234, 237, 238, 240, 242], "own": [3, 11, 12, 15, 23, 41, 44, 46, 47, 48, 233, 234, 240], "As": [3, 41, 44, 46, 47, 48, 140, 232, 233, 234, 237, 238, 242, 243], "inherit": [3, 115, 230, 234, 240, 241], "enjoi": 3, "exact": 3, "Of": [3, 6, 227, 237, 242], "cours": [3, 227, 234, 237, 242], "correspond": [3, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 41, 44, 45, 46, 47, 48, 78, 87, 91, 94, 95, 136, 140, 233, 234, 237, 238], "count": [3, 42, 86, 136, 195, 202, 232, 234, 242], "def": [3, 10, 23, 41, 42, 44, 45, 46, 47, 48, 102, 116, 143, 145, 148, 230, 232, 233, 236, 237, 240, 241, 242, 243], "make_env": [3, 60, 95, 101, 206, 207, 232, 233, 242], "gymenv": [3, 4, 11, 12, 14, 15, 42, 56, 66, 75, 87, 91, 95, 205, 208, 210, 213, 215, 218, 220, 226, 232, 233, 234, 238, 242, 243], "pendulum": [3, 11, 12, 14, 15, 42, 46, 54, 55, 66, 75, 87, 91, 95, 220, 233, 234, 237, 239, 242, 243], "v1": [3, 11, 12, 14, 42, 46, 75, 87, 167, 176, 177, 179, 180, 233, 237, 242, 243], "from_pixel": [3, 52, 53, 205, 213, 215, 218, 232, 233, 238, 242, 243], "9": [3, 6, 23, 95, 233, 234, 237, 238, 239, 241], "81": [3, 237], "0": [3, 4, 5, 6, 7, 9, 10, 21, 22, 23, 24, 25, 27, 32, 41, 44, 45, 46, 47, 48, 51, 58, 62, 64, 66, 67, 74, 75, 78, 87, 89, 91, 94, 95, 97, 101, 102, 103, 104, 105, 107, 110, 112, 114, 116, 117, 118, 119, 123, 124, 125, 126, 127, 133, 135, 136, 139, 142, 149, 152, 153, 157, 158, 159, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 190, 197, 199, 220, 224, 230, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243], "must": [3, 6, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 35, 36, 37, 38, 41, 42, 44, 46, 47, 48, 72, 75, 87, 91, 92, 103, 114, 139, 140, 145, 146, 174, 175, 176, 177, 178, 179, 180, 190, 195, 196, 199, 201, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 240, 241, 243], "print": [3, 5, 6, 11, 12, 14, 17, 19, 20, 23, 24, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 64, 67, 68, 75, 87, 89, 95, 101, 103, 114, 119, 129, 130, 131, 132, 134, 135, 136, 138, 139, 142, 143, 145, 146, 148, 205, 208, 210, 213, 215, 218, 220, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "b": [3, 6, 7, 16, 19, 117, 118, 171, 172, 173, 182, 238, 240, 241], "c": [3, 5, 6, 19, 75, 205, 208, 210, 213, 215, 218, 241], "d": [3, 25, 32, 140, 241, 243], "get": [3, 5, 6, 7, 38, 42, 47, 48, 64, 67, 68, 75, 79, 89, 95, 129, 135, 140, 174, 175, 178, 189, 232, 233, 234, 237, 240, 242, 243], "forc": [3, 5, 6, 233, 237], "variou": [3, 11, 12, 14, 15, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 222, 223, 233, 234, 242], "reset_work": 3, "fals": [3, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 60, 64, 66, 71, 74, 75, 78, 79, 82, 87, 89, 91, 92, 94, 95, 97, 102, 103, 104, 114, 116, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 154, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 171, 172, 173, 176, 177, 179, 180, 192, 193, 195, 196, 197, 199, 205, 208, 210, 213, 215, 218, 224, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "field": [3, 11, 12, 14, 15, 19, 23, 41, 44, 45, 46, 47, 48, 51, 58, 59, 60, 87, 91, 102, 116, 130, 131, 132, 134, 136, 137, 138, 139, 142, 143, 145, 146, 203, 205, 208, 210, 213, 215, 218, 227, 233, 234, 236, 237, 238, 240, 241, 242, 243], "tensor": [3, 7, 11, 12, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 51, 58, 59, 60, 63, 64, 66, 67, 71, 75, 78, 79, 82, 87, 88, 89, 90, 91, 92, 94, 95, 101, 102, 103, 104, 105, 106, 107, 108, 109, 111, 112, 113, 114, 115, 116, 117, 119, 122, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 149, 150, 154, 155, 158, 159, 167, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 205, 208, 210, 213, 215, 218, 230, 232, 233, 234, 236, 237, 238, 240, 242, 243], "bool": [3, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 58, 59, 60, 64, 67, 71, 74, 75, 78, 82, 87, 89, 91, 92, 94, 95, 97, 101, 102, 103, 104, 105, 112, 114, 116, 117, 118, 126, 127, 133, 136, 139, 140, 141, 142, 147, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 167, 171, 172, 173, 176, 177, 179, 180, 181, 182, 192, 193, 195, 196, 197, 199, 205, 208, 210, 213, 215, 218, 224, 233, 234, 236, 237, 238, 242, 243], "500": [3, 199, 232, 233, 237, 242, 243], "uint8": [3, 31, 89, 233, 238, 242, 243], "none": [3, 7, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 41, 42, 44, 45, 46, 47, 48, 59, 60, 62, 63, 64, 65, 66, 68, 71, 73, 75, 76, 78, 79, 80, 81, 82, 83, 86, 87, 88, 89, 90, 91, 94, 95, 96, 101, 102, 103, 104, 105, 106, 107, 108, 111, 113, 114, 115, 116, 117, 118, 122, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 147, 158, 159, 164, 165, 170, 171, 172, 173, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 194, 195, 196, 199, 203, 205, 206, 207, 208, 210, 213, 215, 218, 220, 222, 223, 224, 230, 232, 233, 234, 237, 240, 241, 242, 243], "is_shar": [3, 11, 12, 14, 19, 45, 51, 58, 59, 60, 87, 95, 102, 116, 130, 131, 132, 134, 136, 137, 138, 139, 142, 143, 145, 146, 205, 208, 210, 213, 215, 218, 233, 234, 236, 237, 238, 240, 241, 242, 243], "note": [3, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 95, 136, 140, 232, 233, 236, 240, 241, 242], "launch": 3, "quit": [3, 232, 233, 234, 242], "time": [3, 6, 7, 11, 12, 14, 15, 23, 41, 42, 44, 46, 47, 48, 64, 79, 87, 88, 95, 101, 110, 113, 136, 158, 163, 171, 172, 173, 199, 233, 234, 236, 237, 238, 240, 241, 242, 243], "mani": [3, 153, 161, 162, 163, 234, 237, 241, 242], "start": [3, 4, 11, 42, 101, 194, 233, 237, 242], "bottleneck": [3, 7], "why": [3, 232, 237, 242], "so": [3, 5, 6, 9, 23, 41, 44, 46, 47, 48, 87, 95, 141, 142, 232, 234, 237, 242], "onc": [3, 6, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 91, 133, 135, 230, 232, 233, 234, 237, 242], "great": [3, 6, 7, 241, 243], "speedup": [3, 7, 242], "anoth": [3, 7, 41, 44, 46, 47, 48, 90, 114, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 232, 234, 236, 237, 241, 242], "thing": [3, 6, 7, 232, 233, 234, 242], "misspecifi": 3, "caus": [3, 6, 7, 79], "breakag": 3, "t": [3, 5, 6, 7, 10, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 29, 30, 31, 32, 41, 42, 44, 46, 47, 48, 78, 88, 94, 95, 101, 139, 148, 154, 171, 172, 173, 199, 201, 224, 227, 232, 233, 234, 236, 238, 242, 243], "prealloc": [3, 237], "In": [3, 4, 6, 7, 9, 10, 11, 12, 15, 23, 41, 44, 46, 47, 48, 66, 78, 84, 87, 90, 91, 94, 112, 114, 124, 126, 127, 139, 142, 151, 201, 222, 223, 224, 232, 233, 234, 236, 237, 238, 241, 242], "obj": [3, 19, 139, 140, 141], "rais": [3, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 70, 91, 97, 148, 232, 234], "assert": [3, 5, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 44, 95, 97, 101, 119, 171, 172, 173, 190, 198, 232, 233, 236, 240, 241, 242], "mismatch": [3, 241], "serialenv": [3, 87, 226, 242], "mostli": [3, 15, 242], "purpos": [3, 6, 220, 232, 234, 238, 241, 242], "want": [3, 5, 6, 7, 75, 232, 234, 237, 238, 241, 242, 243], "assess": [3, 232], "subprocess": [3, 42], "addit": [3, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 133, 139, 151, 171, 233], "multithread": [3, 25, 26, 27, 46], "multithreadedenv": [3, 226], "underneath": 3, "higher": [3, 232, 233, 234, 242], "restrict": [3, 233, 238, 242], "flexibl": [3, 8, 46, 230, 232, 240, 242], "cover": [3, 227, 232, 234, 243], "popular": 3, "atari": [3, 63, 242], "classic": [3, 45, 240, 241], "benchmark_batched_env": 3, "compar": [3, 41, 195, 233, 234, 237, 242], "case": [3, 4, 6, 7, 10, 11, 12, 14, 15, 19, 25, 27, 32, 41, 44, 46, 47, 48, 87, 91, 97, 114, 139, 140, 142, 151, 190, 201, 222, 223, 224, 230, 232, 234, 237, 240, 241, 242], "raw": [3, 112, 126, 127], "treat": 3, "logic": 3, "torchvis": [3, 78, 94, 242, 243], "build": [3, 6, 16, 19, 23, 41, 44, 46, 47, 48, 95, 102, 116, 140, 199, 204, 209, 211, 212, 214, 216, 217, 219, 230, 234, 237, 238, 240, 241, 242, 243], "transformedenv": [3, 42, 66, 74, 75, 87, 90, 95, 205, 208, 210, 213, 215, 218, 232, 233, 234, 236, 237, 238, 242, 243], "primit": [3, 232, 233], "built": [3, 4, 6, 216, 220, 221, 224, 234, 242], "base_env": [3, 67, 68, 87, 232, 233, 234, 238, 242, 243], "totensorimag": [3, 210, 233, 242, 243], "in_kei": [3, 11, 12, 14, 45, 62, 63, 64, 65, 67, 68, 71, 73, 75, 76, 78, 80, 81, 82, 83, 88, 89, 90, 94, 95, 102, 116, 129, 130, 131, 132, 137, 139, 140, 142, 143, 147, 148, 154, 155, 171, 172, 173, 181, 182, 215, 218, 220, 232, 233, 234, 236, 237, 238, 240, 242, 243], "resiz": [3, 233, 242], "64": [3, 104, 105, 111, 232, 233, 234, 236, 237, 238, 242, 243], "By": [3, 24, 44, 47, 48, 140, 195, 224, 232, 238, 241, 242], "now": [3, 6, 232, 234, 236, 238, 240, 241, 242], "appar": [3, 192], "bring": [3, 234, 242], "signific": [3, 4, 7, 234, 242], "kind": [3, 29, 101], "consult": 3, "achiev": [3, 23, 41, 44, 46, 47, 48, 196, 230, 232, 234, 237, 240, 241, 242], "interest": [3, 47, 48, 140, 234, 237, 242], "abov": [3, 6, 23, 41, 44, 46, 47, 48, 112, 126, 127, 151, 230, 232, 233, 234, 242], "resize_par": 3, "sinc": [3, 4, 6, 23, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 232, 233, 234, 237, 238, 242, 243], "out_kei": [3, 11, 12, 14, 45, 47, 48, 62, 63, 64, 65, 71, 73, 75, 76, 78, 80, 81, 83, 88, 89, 90, 94, 102, 116, 129, 130, 131, 132, 137, 139, 140, 142, 143, 145, 146, 147, 148, 171, 172, 173, 195, 220, 232, 234, 236, 237, 238, 240, 242, 243], "keyword": [3, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 140, 221, 234, 240, 242], "easi": [3, 4, 232, 233, 234, 238, 241, 242], "root": [3, 19, 112, 126, 127, 237, 242], "graph": [3, 7, 168, 169, 237], "inv": [3, 67], "appli": [3, 23, 25, 26, 27, 28, 41, 44, 46, 47, 48, 63, 64, 66, 67, 69, 70, 71, 72, 77, 79, 84, 86, 87, 88, 90, 91, 93, 95, 126, 171, 194, 230, 232, 233, 234, 237, 240, 242, 243], "revers": 3, "order": [3, 14, 23, 24, 25, 26, 27, 28, 41, 44, 46, 47, 48, 91, 139, 141, 142, 240], "chain": [3, 25, 26, 27, 66, 67, 103, 142, 242], "taken": [3, 41, 44, 46, 47, 48, 232, 233, 234, 237], "includ": [3, 6, 8, 23, 35, 36, 37, 38, 41, 44, 45, 46, 47, 48, 91, 95, 202, 230, 232, 233, 234, 237, 241, 242], "invers": [3, 75, 150, 237], "through": [3, 4, 7, 14, 47, 48, 79, 114, 140, 141, 142, 149, 232, 233, 234, 236, 237, 238, 240, 242], "in_keys_inv": [3, 68, 75, 76, 90, 232, 236, 237, 242], "append_transform": [3, 25, 26, 27, 28, 78, 87, 232, 242, 243], "doubletofloat": [3, 205, 208, 213, 215, 218, 232, 234, 236], "float32": [3, 11, 12, 14, 19, 25, 29, 32, 45, 51, 58, 59, 60, 68, 75, 87, 89, 102, 116, 130, 131, 132, 134, 136, 137, 138, 139, 142, 143, 145, 146, 205, 208, 210, 213, 215, 218, 233, 234, 236, 237, 238, 240, 241, 242, 243], "float64": [3, 23, 41, 44, 46, 47, 48, 59, 60, 66, 78, 87, 91, 94, 139, 236, 242], "append": [3, 7, 25, 26, 27, 28, 42, 87, 101, 232, 233, 234, 237, 238, 241, 243], "regist": [3, 23, 24, 41, 44, 46, 47, 48, 91, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 230, 234, 240], "manipul": [3, 7, 78, 242], "keep": [3, 6, 7, 12, 75, 78, 94, 95, 136, 192, 199, 232, 233, 234, 237, 241, 242, 243], "mind": 3, "go": [3, 6, 79, 232, 238, 240, 242], "singl": [3, 15, 23, 25, 26, 27, 28, 41, 44, 46, 47, 48, 49, 63, 64, 78, 89, 94, 103, 113, 114, 142, 156, 163, 176, 177, 179, 180, 215, 224, 232, 233, 234, 236, 237, 238, 240], "third_transform": 3, "prohibit": 3, "would": [3, 23, 41, 44, 46, 47, 48, 114, 230, 233, 234, 240, 241, 242], "replac": [3, 5, 6, 23, 67, 233], "unexpect": [3, 23, 41, 44, 46, 47, 48, 91, 242], "behviour": 3, "fortun": 3, "eras": [3, 41, 44, 46, 47, 48, 49], "ident": [3, 14, 47, 48, 222, 223, 232, 240, 241], "alreadi": [3, 7, 23, 41, 44, 46, 47, 48, 140, 232, 233, 234], "place": [3, 11, 12, 14, 15, 19, 23, 41, 42, 44, 46, 47, 48, 49, 66, 78, 87, 91, 94, 95, 139, 196, 201, 202, 233, 234, 240], "chang": [3, 4, 6, 23, 35, 36, 37, 38, 41, 44, 46, 47, 48, 91, 95, 232, 234, 238, 241, 242], "happen": [3, 133, 238, 242], "catfram": [3, 233], "hold": [3, 168, 169, 237], "context": [3, 4, 7, 23, 41, 42, 44, 46, 47, 48, 87, 92, 117, 168, 169, 171, 174, 175, 178, 195, 232, 233, 234, 237, 238, 240], "notic": [3, 233, 234], "loss": [3, 7, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 171, 194, 199, 204, 209, 211, 212, 214, 215, 217, 220, 230, 232, 233, 237, 241, 243], "parenthood": 3, "reason": [3, 7, 23, 41, 44, 46, 47, 48, 78, 232, 233, 234, 237], "henc": [3, 79, 232, 234], "composit": [3, 19, 234, 237], "transform1": 3, "transform2": 3, "transform3": 3, "last_two": 3, "isinst": [3, 237, 241], "log": [3, 7, 108, 122, 127, 140, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 192, 193, 195, 199, 220, 230, 233, 234, 237, 240, 243], "tool": [4, 237, 242], "real": [4, 140], "world": [4, 45, 144, 158, 242], "system": [4, 234, 237], "robot": [4, 6, 78, 94], "game": 4, "adopt": [4, 232, 242], "interact": [4, 6, 7, 14, 140, 234, 237, 242], "histor": 4, "wa": [4, 6, 41, 44, 46, 47, 48, 91, 160, 166, 233, 234, 236, 243], "ceas": 4, "maintain": [4, 8, 237], "fork": 4, "gymnasium": [4, 10, 234, 237, 243], "farama": [4, 234, 237], "foundat": [4, 234], "document": [4, 6, 23, 41, 44, 46, 47, 48, 91, 243], "further": [4, 234], "detail": [4, 5, 6, 23, 41, 44, 46, 47, 48, 91, 145, 152, 156, 162, 208, 227, 236, 241], "usag": [4, 6, 165, 232, 233, 234, 236, 237, 238, 242, 243], "known": [4, 6, 7, 232], "gone": 4, "bc": [4, 243], "break": [4, 11, 12, 14, 23, 41, 44, 46, 47, 48, 95, 232, 233, 240, 243], "face": [4, 7, 8, 233, 242], "modif": [4, 19, 23, 41, 44, 46, 47, 48, 71, 232, 234, 241], "practic": [4, 7, 112, 126, 127, 151, 227, 232, 233, 234, 238, 242], "torchrl": [4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 235, 236, 238, 239, 240, 241], "against": [4, 6, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 97, 139, 140, 234], "13": [4, 9, 10, 233, 234, 237, 238, 239, 240], "between": [4, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 67, 74, 81, 89, 91, 97, 103, 114, 140, 158, 159, 161, 167, 171, 195, 199, 232, 233, 240, 241, 242], "howev": [4, 6, 23, 41, 44, 46, 47, 48, 83, 86, 91, 232, 233, 234, 241, 242], "around": [4, 6, 15, 27, 28, 45, 140, 171, 242], "construct": [4, 23, 41, 44, 46, 47, 48, 97, 124, 140, 199, 205, 213, 232, 234, 237, 240, 242], "automat": [4, 41, 44, 46, 47, 48, 75, 129, 137, 232, 233, 234, 237, 243], "wrap": [4, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 97, 130, 131, 132, 144, 232, 233, 234, 240, 242], "best": [4, 8, 233, 243], "gymwrapp": [4, 44, 226, 234, 243], "If": [4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 44, 45, 46, 47, 48, 49, 64, 65, 67, 69, 71, 74, 75, 78, 79, 83, 84, 86, 87, 90, 91, 94, 95, 103, 113, 114, 133, 135, 136, 139, 140, 141, 142, 148, 149, 151, 158, 165, 170, 171, 172, 173, 179, 180, 194, 196, 199, 201, 203, 205, 213, 215, 218, 220, 224, 227, 232, 233, 234, 236, 237, 240, 241, 242, 243], "you": [4, 5, 6, 7, 9, 23, 41, 44, 46, 47, 48, 95, 227, 232, 233, 234, 236, 238, 241, 242, 243], "feel": [4, 227, 243], "free": [4, 6, 152, 158, 162, 230, 234, 243], "gladli": 4, "instruct": [5, 6, 9, 67, 234], "prepar": [5, 234], "conda": [5, 6, 227], "assum": [5, 19, 24, 28, 44, 47, 48, 65, 71, 78, 79, 83, 87, 94, 113, 165, 176, 177, 179, 180, 182, 232, 233, 234, 236, 237], "let": [5, 6, 23, 41, 44, 46, 47, 48, 195, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "n": [5, 6, 17, 20, 23, 24, 41, 44, 46, 47, 48, 63, 67, 71, 92, 116, 140, 152, 170, 196, 230, 232, 233, 241, 242], "7": [5, 9, 20, 24, 102, 103, 113, 114, 116, 232, 233, 236, 237, 238, 239, 243], "cmake": 5, "14": [5, 10, 75, 233, 234, 237, 240], "activ": [5, 6, 8, 103, 110, 114, 162, 243], "sim": 5, "bullet": 5, "physic": [5, 6, 230, 232, 237], "headless": [5, 6], "mode": [5, 14, 23, 41, 44, 46, 47, 48, 91, 95, 98, 100, 108, 112, 122, 125, 126, 127, 140, 195, 232, 233, 242, 243], "cluster": [5, 6, 7, 227], "withbullet": 5, "forg": [5, 6], "aihabitat": 5, "nightli": 5, "y": [5, 6, 113, 148, 234], "git": [5, 6, 9], "facebookresearch": 5, "subdirectori": 5, "reduc": [5, 20, 234], "verbos": 5, "export": 5, "magnum_log": 5, "quiet": 5, "habitat_sim_log": 5, "don": [5, 6, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 41, 232, 234, 241, 242, 243], "remov": [5, 23, 41, 44, 46, 47, 48, 85, 242], "command": [5, 6, 9, 232, 234, 237, 242], "readm": [5, 6], "md": [5, 6], "habitatenv": [5, 226], "_has_habitat": 5, "_env": [5, 242], "available_env": [5, 50, 51, 52, 53, 54, 55, 57, 58, 242], "startswith": 5, "oserror": 5, "could": [5, 232, 233, 234, 238, 241, 242], "load": [5, 11, 12, 14, 15, 25, 26, 27, 53, 224, 230, 233], "libllvmlit": 5, "solut": [5, 6, 7, 8, 227, 230, 243], "ionstal": 5, "miss": [5, 6, 10, 19, 23, 41, 44, 46, 47, 48, 87, 91, 141, 142, 227], "add": [5, 23, 25, 26, 27, 28, 39, 40, 41, 44, 46, 47, 48, 117, 152, 194, 232, 233, 234, 237, 241, 243], "pointer": [5, 42, 237, 241], "path": [5, 6, 23, 35, 41, 44, 46, 47, 48, 78, 94, 116, 199, 230], "env_nam": [5, 46, 50, 52, 54, 57, 232, 234, 242], "llvmlite": 5, "config": [5, 6, 78, 94, 203, 205, 206, 207, 208, 210, 213, 215, 216, 218, 221], "var": [5, 6, 23, 41, 44, 46, 47, 48, 91], "ld_preload": [5, 6], "python3": [5, 6, 9], "8": [5, 6, 32, 51, 103, 104, 105, 111, 114, 130, 131, 132, 137, 139, 142, 233, 234, 237, 238, 240, 243], "site": [5, 6], "deactiv": [5, 6], "importerror": [5, 6, 9], "usr": [5, 6, 9], "x86_64": [5, 6], "linux": [5, 6], "gnu": [5, 6], "libopengl": [5, 6], "undefin": [5, 6, 9, 23, 41, 44, 46, 47, 48, 91], "symbol": [5, 6, 9], "_glapi_tls_curr": [5, 6], "link": [5, 6], "right": [5, 6, 113, 232, 233, 234, 242], "mujoco_env": [5, 6], "proper": [5, 6, 234], "libglvnd": [5, 6], "glx": [5, 6], "cos7": [5, 6], "reinstal": [5, 6], "xvfbwrapper": [5, 6], "sysroot": [5, 6], "lib64": [5, 6], "libgldispatch": [5, 6], "offici": 6, "repositori": 6, "stand": [6, 130, 131, 132, 236, 242], "joint": [6, 233], "dynam": [6, 234, 237], "contact": 6, "engin": [6, 237], "facilit": [6, 77, 78, 94, 130, 131, 132, 232, 237], "develop": [6, 232, 243], "biomechan": 6, "graphic": 6, "anim": 6, "machin": [6, 23], "area": 6, "demand": [6, 242], "fast": [6, 8, 51, 163, 232, 233, 234], "accur": [6, 232, 237], "articul": 6, "recent": [6, 10, 242], "acquir": [6, 232, 234], "deepmind": [6, 7, 8, 52, 53, 234], "access": [6, 7, 23, 41, 44, 46, 47, 48, 49, 78, 224, 227, 237, 241], "whomev": 6, "licenc": 6, "incorpor": [6, 232, 237], "relianc": 6, "obsolet": 6, "seri": [6, 7, 24, 39, 40, 48, 74, 90, 182, 234, 242], "legaci": 6, "capabl": [6, 230, 232, 236, 238, 242], "glfw": 6, "osmesa": 6, "egl": 6, "hand": [6, 232], "gpu": [6, 7, 23, 41, 44, 46, 47, 48, 232, 234, 242], "our": [6, 7, 232, 233, 234, 236, 238, 240, 241, 243], "advic": [6, 242], "sudo": [6, 227], "enabl": [6, 7, 136, 195, 234], "apt": 6, "libglfw3": 6, "libglew2": 6, "libgl1": 6, "mesa": 6, "libosmesa6": 6, "via": [6, 7, 47, 78, 90, 94, 154, 230, 234, 242], "awar": [6, 35, 36, 37, 38], "fact": [6, 7, 233, 234, 237, 238, 242], "indent": 6, "workflow": [6, 130, 131, 132], "glew": 6, "mesalib": 6, "anaconda": 6, "libgl": 6, "cos6": 6, "menpo": 6, "glfw3": 6, "both": [6, 23, 41, 42, 44, 46, 47, 48, 91, 103, 114, 130, 131, 132, 195, 232, 234, 238, 240, 242], "tell": 6, "variabl": [6, 7, 20, 24, 116, 130, 131, 132, 163, 230, 240], "mujoco_gl": 6, "pyopengl_platform": 6, "pre": [6, 23, 36, 41, 44, 46, 47, 48, 78, 94, 242], "binari": [6, 17, 24, 62, 145, 146], "releas": [6, 9, 23, 41, 44, 46, 47, 48, 91, 243], "need": [6, 7, 9, 23, 38, 41, 44, 46, 47, 48, 71, 78, 91, 94, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 117, 119, 120, 121, 123, 124, 133, 135, 136, 139, 149, 151, 163, 170, 182, 199, 224, 232, 234, 237, 240, 241, 242, 243], "These": [6, 23, 41, 44, 46, 47, 48, 78, 94, 232, 234, 237, 242], "instead": [6, 7, 10, 20, 23, 41, 44, 46, 47, 48, 71, 87, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 224, 232, 233, 237, 240, 242], "refer": [6, 7, 23, 41, 44, 46, 47, 48, 91, 95, 102, 110, 116, 120, 121, 123, 124, 145, 152, 156, 157, 158, 159, 162, 171, 174, 175, 178, 208, 232, 234], "setup": [6, 232], "mkdir": 6, "cd": 6, "tag": [6, 182, 185, 224], "earlier": [6, 11, 12, 14, 15, 232, 234], "roboti": 6, "u": [6, 9, 232, 234, 237, 238, 240, 242, 243], "download": [6, 9, 78, 94, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "html": [6, 46], "wget": 6, "mujoco210": 6, "tar": 6, "gz": 6, "xf": 6, "charg": 6, "obtain": [6, 44, 78, 94, 102, 196, 232, 233, 234], "mjkei": 6, "txt": 6, "mjlib_path": 6, "home": [6, 238], "bin": 6, "libmujoco210": 6, "ld_library_path": 6, "mujoco_py_mujoco_path": 6, "mujoco_py_mjkey_path": 6, "reload": 6, "recommend": [6, 241], "hard": [6, 160, 233, 242], "later": [6, 107, 140, 232, 233, 234], "try": [6, 7, 148, 232, 233, 234, 237, 241, 242, 243], "nativ": [6, 8, 41, 44, 46, 47, 48, 63, 240], "local": [6, 9, 14, 23, 41, 44, 46, 47, 48, 91, 185], "modifi": [6, 7, 23, 41, 44, 46, 47, 48, 66, 71, 78, 87, 90, 91, 94, 136, 139, 202, 205, 213, 215, 218, 232, 234, 240], "nvidia": 6, "driver": 6, "older": [6, 10], "hack": 6, "line": [6, 23, 41, 44, 46, 47, 48], "adatp": 6, "script": [6, 97, 205, 208, 210, 213, 215, 218, 220, 224, 230, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "unnot": [6, 79], "until": [6, 234], "complet": [6, 8, 44, 227, 233, 234, 236], "mujoco_pi": 6, "trigger": 6, "pipelin": [6, 234], "problem": [6, 7, 14, 234, 237, 242], "troubleshoot": 6, "gl": 6, "h": [6, 65, 80, 89, 116, 182], "eglshim": 6, "10": [6, 19, 42, 45, 59, 60, 89, 102, 113, 116, 135, 136, 163, 164, 165, 171, 172, 173, 190, 230, 232, 233, 234, 237, 239, 240, 241, 242, 243], "fatal": 6, "No": 6, "directori": [6, 35, 185, 230], "sure": [6, 38, 101, 224, 232, 234, 237, 240, 241, 242, 243], "glu": 6, "38": [6, 233, 234, 237, 239], "disappear": [6, 236], "filenotfounderror": 6, "errno": 6, "patchelf": 6, "fatalerror": 6, "gladloadgl": 6, "mj_env": 6, "__init__": [6, 45, 102, 116, 143, 145, 148, 230, 237, 240, 242], "912": 6, "glfwerror": 6, "65537": 6, "initi": [6, 11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 75, 78, 87, 90, 91, 96, 102, 116, 117, 118, 133, 135, 136, 161, 163, 165, 205, 208, 210, 213, 215, 218, 224, 233, 237, 242], "sovl": 6, "myscript": 6, "cymj": 6, "linuxgpuextensionbuild": 6, "filenam": 6, "runtimeerror": [6, 7, 23, 41, 44, 46, 47, 48, 91, 241, 242], "job": [6, 241], "schedul": [6, 195, 234, 237], "slurm": 6, "mjrendercontext": 6, "pyx": 6, "46": [6, 234, 237, 238, 239, 243], "114": [6, 237], "_setup_opengl_context": 6, "opengl_context": 6, "130": [6, 237], "offscreenopenglcontext": 6, "fail": [6, 97], "opengl": 6, "global": [6, 23, 41, 44, 46, 47, 48, 140, 230, 232, 240], "cuda_visible_devic": 6, "id": [6, 16, 136, 163, 188, 215], "slurm_step_gpu": 6, "enviro": [6, 9], "imag": [6, 52, 65, 78, 89, 94, 114, 232, 233, 238, 241, 242], "black": 6, "read": [6, 11, 12, 14, 15, 35, 36, 37, 38, 44, 47, 48, 49, 63, 64, 66, 67, 69, 70, 71, 72, 77, 79, 84, 86, 87, 88, 90, 93, 95, 122, 130, 131, 132, 139, 140, 142, 144, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 182, 199, 205, 213, 215, 218, 232, 233, 234, 236, 237, 238, 240, 242], "onscreen": 6, "101": [6, 237], "displai": [6, 199, 230, 233, 237], "correctli": [6, 23, 41, 44, 46, 47, 48], "cannot": [6, 19, 79, 234, 237, 241], "scratch": [7, 232, 233, 237], "loop": [7, 11, 12, 14, 15, 44, 101, 199, 230, 232, 236, 241], "sketch": [7, 230], "ob": [7, 19, 68, 75, 89, 143, 171, 172, 173, 232, 236, 242, 243], "_": [7, 42, 64, 67, 68, 75, 89, 95, 139, 151, 171, 172, 173, 232, 233, 234, 237, 240, 243], "rang": [7, 10, 20, 42, 95, 101, 161, 230, 232, 233, 234, 237, 240, 241, 243], "n_training_step": 7, "datapoint": 7, "onlin": [7, 11, 15, 152, 162, 190, 224, 234], "n_data_per_train": 7, "no_grad": [7, 23, 41, 44, 46, 47, 48, 232, 233, 234], "replay_buff": [7, 32, 33, 34, 35, 36, 37, 38, 39, 40, 196, 220, 232, 233, 234], "extend": [7, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 196, 230, 232, 233, 234, 238, 243], "offlin": [7, 11, 12, 14, 15, 97, 230, 238, 243], "loss_fn": [7, 243], "backward": [7, 23, 41, 44, 46, 47, 48, 95, 232, 233, 234, 237, 241], "zero_grad": [7, 23, 41, 44, 46, 47, 48, 230, 232, 233, 234, 237, 241], "backpropag": [7, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 237], "decor": [7, 10], "differenti": [7, 171, 172, 173, 232, 237], "understand": [7, 232, 233], "denomin": 7, "probabl": [7, 108, 122, 127, 140, 233, 240, 243], "artifact": 7, "numer": [7, 95, 112, 126, 127, 139, 140, 234, 241, 242], "misconcept": 7, "directli": [7, 45, 224, 233, 234, 237], "save": [7, 23, 41, 44, 46, 47, 48, 181, 199, 230, 233], "freed": 7, "appear": [7, 24], "compuat": 7, "twice": [7, 165], "fix": [7, 87, 165, 242], "retain_graph": 7, "discuss": [7, 8], "inplac": [7, 23, 41, 44, 46, 47, 48, 232], "flag": [7, 25, 26, 27, 28, 174, 175, 176, 177, 178, 179, 180, 238], "updat": [7, 11, 12, 14, 15, 23, 32, 41, 44, 45, 46, 47, 48, 67, 91, 93, 95, 102, 116, 136, 139, 140, 152, 160, 162, 166, 171, 172, 173, 195, 199, 201, 206, 207, 219, 220, 230, 232, 233, 234, 240, 242, 243], "critic": [7, 130, 152, 153, 161, 162, 164, 165, 234, 240], "accumul": 7, "onto": [7, 24, 133, 135, 139, 140, 237], "separ": [7, 11, 12, 15, 16, 78, 94, 154, 163, 165, 232, 242], "exclud": [7, 47, 48, 69, 232], "forward": [7, 23, 41, 44, 46, 47, 48, 63, 64, 66, 67, 69, 70, 71, 72, 75, 77, 78, 79, 84, 86, 87, 88, 90, 93, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 115, 117, 119, 120, 121, 123, 124, 133, 135, 136, 139, 140, 143, 145, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 171, 172, 173, 232, 233, 240, 243], "submodul": [7, 23, 41, 44, 46, 47, 48], "param": [7, 23, 41, 44, 45, 46, 47, 48, 108, 125, 137, 138, 139, 142, 143, 145, 146, 166, 169, 171, 172, 173, 208, 232, 233, 237, 238, 240, 243], "grad": [7, 23, 41, 44, 46, 47, 48, 233, 234], "whose": [7, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 119, 139, 232], "norm": [7, 199, 233, 234, 237], "strictli": [7, 23, 41, 44, 46, 47, 48, 91, 232, 234], "neg": [7, 11, 12, 14, 15, 25, 27, 32, 63, 71, 79, 92, 157, 232, 234, 237], "ask": [7, 232, 234, 238, 242], "core": [7, 205, 208, 210, 213, 215, 218, 230, 243], "much": [7, 25, 27, 32, 161, 162, 234, 237, 241, 242], "upon": [7, 237], "factor": [7, 23, 112, 118, 126, 127, 136, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 232, 233, 242], "fit": [7, 10, 75, 230], "everi": [7, 11, 12, 15, 19, 23, 24, 38, 41, 44, 46, 47, 48, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 199, 230, 232, 233, 234, 237, 241], "bottlneck": 7, "affect": [7, 23, 41, 44, 46, 47, 48, 90, 91, 97], "brax": [7, 50, 51, 242], "jax": [7, 10], "improperli": 7, "item": [7, 11, 70, 154, 155, 190, 230, 232, 233, 234, 237, 241], "underli": [7, 237], "tedeiou": 7, "priorit": [7, 25, 27, 32, 154, 155, 163, 165, 232, 233], "amount": [7, 47, 48, 136], "isn": [7, 139], "contigu": [7, 234, 237, 241, 242, 243], "costli": 7, "concaten": [7, 21, 22, 63, 64, 75, 90, 114, 142, 232, 233, 237, 241, 242], "constitut": 7, "plain": 7, "profil": 7, "indic": [7, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 39, 40, 41, 44, 46, 47, 48, 64, 86, 87, 103, 114, 136, 149, 203, 224, 227, 230, 232, 234, 237, 240, 241, 242], "fulli": [7, 23, 41, 44, 46, 47, 48, 233, 237], "frequent": 7, "techniqu": [7, 233], "target": [7, 23, 41, 42, 44, 46, 47, 48, 90, 139, 140, 154, 155, 156, 159, 160, 161, 163, 165, 166, 170, 171, 172, 173, 202, 219, 220, 230, 232, 233, 237], "program": [7, 242], "incl": 7, "suit": [7, 53, 234, 242], "mujoco_instal": 7, "valueerror": 7, "bad": 7, "fds_to_keep": 7, "view": [7, 20, 23, 24, 41, 44, 46, 47, 48, 114, 145, 232, 237, 241, 242, 243], "expand": [7, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 139, 142, 232, 237, 240, 243], "new_shap": 7, "origin": [7, 11, 12, 14, 15, 67, 78, 91, 94, 139, 140, 160, 162, 215, 218, 236, 237, 241, 242], "content": [7, 14, 46, 103, 114, 233, 234, 237, 241, 243], "lost": 7, "permut": [7, 241, 242, 243], "clone": [7, 130, 131, 132, 139, 205, 213, 215, 218, 226, 232, 233, 237, 240, 241, 243], "spin": [8, 242], "deep": [8, 63, 104, 105, 106, 107, 109, 136, 152, 160, 165, 166, 208, 232], "hug": 8, "syllabu": 8, "lectur": 8, "awesom": [8, 241], "curat": 8, "succinct": 8, "summari": [8, 75, 95, 232, 234], "reddit": 8, "reagent": 8, "product": [8, 222, 223], "orient": [8, 242], "stabl": [8, 9, 232], "baselines3": 8, "tf": 8, "agent": [8, 118, 237], "bandit": 8, "tensorflow": 8, "kera": 8, "acm": 8, "framework": [8, 45, 242, 243], "dopamin": 8, "prototyp": 8, "salina": 8, "simpl": [8, 23, 24, 41, 44, 46, 47, 48, 104, 140, 164, 171, 232, 233, 234, 241, 242], "sequenti": [8, 23, 41, 44, 46, 47, 48, 141, 142, 234, 237, 238, 240, 241, 242], "tianshou": 8, "eleg": 8, "rlpyt": 8, "rllib": 8, "industri": [8, 243], "grade": 8, "factori": 8, "throughput": [8, 232], "cherri": 8, "jaxrl": 8, "space": [8, 24, 29, 67, 121, 133, 135, 136, 139, 140, 142, 145, 146, 232, 234, 237, 242, 243], "mbrl": [8, 45], "rlmeta": 8, "light": 8, "elegantrl": 8, "cloud": 8, "mtrl": 8, "baselin": [8, 233], "689": 9, "dist": 9, "_torchrl": 9, "_zn8pybind116detail11type_casterin2at6tensoreve4loadens_6handleeb": 9, "colab": [9, 234], "notebook": [9, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "24": [9, 234, 237], "11": [9, 20, 24, 42, 89, 102, 116, 233, 234, 236, 237], "2022": [9, 243], "12": [9, 233, 234, 237, 241], "pip": [9, 242, 243], "solv": [9, 227, 232, 233, 234, 237], "pip3": [9, 234], "extra": [9, 23, 41, 44, 46, 47, 48, 95, 234], "url": 9, "org": [9, 25, 32, 63, 78, 104, 105, 106, 107, 110, 111, 116, 118, 120, 121, 123, 124, 136, 145, 152, 156, 157, 158, 159, 160, 162, 164, 165, 166, 171, 174, 175, 178, 205, 208, 213, 218, 232, 238], "whl": 9, "latest": [9, 46, 196, 234, 237, 243], "There": [9, 230, 233, 234, 237, 242], "upgrad": 9, "previou": [9, 23, 124, 232, 234, 237, 240, 242], "relas": 9, "lib_version_her": 9, "module_nam": 10, "str": [10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 35, 41, 43, 44, 46, 47, 48, 52, 62, 63, 64, 65, 66, 67, 68, 69, 71, 73, 75, 76, 78, 79, 80, 81, 82, 83, 84, 88, 89, 90, 91, 94, 95, 98, 100, 102, 103, 104, 105, 106, 107, 111, 113, 114, 115, 116, 117, 118, 119, 129, 133, 134, 135, 136, 137, 139, 140, 143, 145, 146, 147, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 167, 170, 171, 172, 173, 181, 182, 183, 184, 185, 186, 187, 188, 189, 193, 194, 195, 196, 198, 203, 205, 208, 213, 215, 216, 218, 224, 234], "from_vers": 10, "to_vers": 10, "explicit": [10, 113, 233], "intersect": 10, "eg": [10, 35, 36, 37, 38, 67], "v": [10, 95, 113, 165, 233, 240, 243], "longer": [10, 233], "fun": [10, 234, 237, 240, 241], "self": [10, 23, 41, 44, 45, 46, 47, 48, 66, 78, 87, 91, 94, 102, 116, 133, 135, 139, 143, 145, 148, 230, 237, 240, 241, 243], "x": [10, 16, 19, 23, 89, 103, 109, 111, 113, 114, 116, 145, 148, 149, 151, 174, 175, 176, 177, 178, 179, 180, 182, 199, 233, 234, 237, 240, 243], "27": [10, 234, 237, 242], "doesn": [10, 46], "create_env_fn": [11, 12, 14, 15, 42, 47, 48, 232, 243], "sequenc": [11, 12, 14, 15, 19, 21, 22, 25, 26, 39, 40, 62, 63, 64, 65, 67, 68, 71, 73, 75, 76, 79, 80, 81, 82, 83, 88, 89, 90, 95, 103, 108, 114, 122, 129, 137, 140, 141, 142, 143, 181, 182, 194, 196, 198, 199, 205, 213, 215, 218, 233, 234, 236, 240, 242], "callabl": [11, 12, 14, 15, 23, 25, 26, 27, 41, 42, 44, 45, 46, 47, 48, 151, 206, 207, 222, 223, 224], "union": [11, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 27, 28, 29, 30, 31, 32, 41, 44, 46, 47, 48, 66, 75, 78, 82, 91, 94, 95, 103, 104, 105, 106, 107, 108, 111, 113, 114, 117, 118, 122, 125, 126, 127, 136, 137, 139, 140, 141, 147, 148, 150, 155, 156, 160, 163, 165, 166, 171, 172, 173, 196, 205, 206, 207, 208, 213, 215, 216, 218, 220, 221, 222, 223, 224], "tensordictbas": [11, 12, 14, 15, 16, 19, 23, 27, 28, 41, 43, 44, 46, 47, 48, 49, 63, 64, 66, 69, 70, 71, 74, 77, 79, 83, 84, 86, 87, 88, 90, 93, 95, 101, 102, 115, 116, 133, 135, 136, 139, 140, 152, 153, 154, 155, 156, 161, 162, 163, 164, 165, 170, 171, 172, 173, 199, 237], "total_fram": [11, 12, 14, 15, 199, 202, 220, 230, 232, 233, 234, 243], "int": [11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 52, 63, 64, 65, 66, 67, 71, 72, 74, 75, 78, 79, 80, 85, 86, 88, 91, 92, 94, 97, 102, 103, 104, 105, 106, 107, 108, 110, 111, 112, 113, 114, 116, 117, 118, 120, 121, 123, 124, 125, 126, 133, 135, 136, 138, 139, 140, 145, 146, 152, 153, 154, 157, 158, 159, 161, 162, 163, 165, 181, 182, 190, 191, 192, 195, 196, 199, 201, 205, 208, 213, 215, 216, 218, 222, 223, 224, 237], "create_env_kwarg": [11, 12, 14, 15, 42, 46, 47, 48, 232], "dict": [11, 12, 14, 15, 19, 20, 21, 23, 41, 42, 44, 46, 47, 48, 87, 91, 95, 103, 104, 105, 106, 107, 111, 113, 114, 140, 185, 189, 195, 206, 207, 208, 215, 218, 222, 223, 224, 234, 242], "200": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 59, 60, 104, 105, 110, 123, 124, 232, 237], "postproc": [11, 12, 14, 15, 232, 233], "pin_memori": [11, 14, 15, 25, 26, 27, 47, 48, 77, 232, 243], "init_with_lag": [11, 12, 14, 15], "given": [11, 12, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 45, 46, 47, 48, 66, 67, 75, 78, 87, 91, 94, 101, 102, 110, 116, 136, 139, 140, 141, 142, 145, 146, 151, 154, 155, 170, 171, 172, 173, 191, 195, 220, 230, 232, 233, 234, 237, 240, 242], "datacollector": [11, 12, 14, 15, 140, 234], "synchron": [11, 46, 222, 223, 234], "recept": 11, "safe": [11, 12, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 133, 136, 139, 140, 147, 232, 243], "env_mak": [11, 12, 14, 220, 242], "lambda": [11, 12, 14, 15, 42, 157, 159, 173, 176, 177, 179, 180, 220, 240, 241, 242, 243], "linear": [11, 12, 14, 23, 41, 44, 45, 46, 47, 48, 66, 78, 87, 91, 94, 102, 103, 114, 116, 117, 118, 119, 123, 124, 129, 130, 131, 132, 135, 136, 137, 138, 139, 142, 143, 145, 146, 148, 171, 172, 173, 220, 232, 236, 238, 240, 243], "2000": [11, 12, 14, 232, 234, 237], "50": [11, 12, 14, 234, 237, 238, 239], "enumer": [11, 12, 14, 23, 41, 44, 46, 47, 48, 232, 233, 234, 243], "step_count": [11, 12, 14, 86, 232, 233, 234, 243], "int64": [11, 12, 14, 17, 20, 21, 22, 24, 134, 136, 138, 145, 146, 210, 233, 234, 237, 242, 243], "traj_id": [11, 12, 14, 16, 232, 233, 243], "shutdown": [11, 12, 14, 15, 232, 233, 243], "del": [11, 12, 14, 232, 233, 234, 236, 242, 243], "bound": [11, 12, 14, 15, 18, 19, 23, 41, 44, 46, 47, 48, 95, 123, 124, 136, 139, 140, 234, 242], "total": [11, 12, 14, 15, 17, 21, 22, 24, 44, 153, 161, 162, 190, 192, 195, 199, 202, 203, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243], "greater": [11, 12, 15, 232, 233, 243], "close": [11, 12, 14, 15, 44, 46, 153, 161, 162, 232, 236, 237, 243], "signal": [11, 12, 15, 232, 234], "sent": [11, 12, 15, 35, 36, 47, 48, 95, 233, 241], "server": [11, 12, 15], "dictionari": [11, 12, 14, 15, 19, 23, 41, 44, 46, 47, 48, 87, 91, 140, 222, 223, 224, 230, 232, 234, 242], "per": [11, 12, 14, 15, 47, 110, 199, 222, 223, 232, 233, 234, 243], "span": [11, 12, 14, 15], "unless": [11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 234, 240], "traje": [11, 12], "tori": [11, 12], "n_steps_max": [11, 12, 14, 15, 23, 232], "track": [11, 12, 14, 15, 83, 95, 136, 185, 192, 232, 233, 237, 241], "independ": [11, 12, 14, 15, 90, 92, 165, 230, 232, 243], "ignor": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 67, 69, 84, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 240, 241, 242], "length": [11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 47, 48, 79, 102, 103, 104, 106, 109, 114, 116, 139, 190, 196, 232, 233, 234, 237, 241, 242], "mainli": [11, 12, 14, 15, 237], "postprocessor": [11, 12, 15], "format": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 242], "accord": [11, 12, 14, 15, 49, 75, 82, 112, 117, 123, 126, 127, 240, 241], "split_trajectori": [11, 12, 14, 15, 226], "inform": [11, 12, 14, 15, 23, 41, 42, 44, 46, 47, 48, 103, 114, 230, 233, 234, 237], "accommod": [11, 12, 14, 15, 237], "kept": [11, 12, 14, 15, 47, 48, 67, 90, 97, 101, 112, 126, 127], "long": [11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 67, 233, 241], "truncat": [11, 12, 14, 15, 127, 234, 242], "help": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 227, 232, 234], "desynchron": [11, 12, 14, 15], "load_state_dict": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 91, 95, 230, 232], "state_dict": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 91, 95, 224, 230, 232, 242], "ordereddict": [11, 12, 14, 15, 23, 41, 44, 46, 47, 48, 91, 95], "form": [11, 12, 15, 23, 25, 26, 27, 41, 44, 46, 47, 48, 95, 151, 153, 161, 162, 199], "worker0": [11, 12, 15], "state_dict0": [11, 12, 15], "worker1": [11, 12, 15], "state_dict1": [11, 12, 15], "reset_idx": [11, 12, 15], "static_se": [11, 12, 14, 15, 41, 44, 46, 47, 48, 91], "increment": [11, 12, 14, 15, 41, 44, 46, 47, 48, 86, 161], "last": [11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 71, 75, 79, 88, 103, 113, 114, 120, 133, 135, 233, 234, 237, 238, 242, 243], "env_fn": [11, 12, 14, 15, 42, 222, 223], "v0": [11, 12, 15, 44, 54, 55, 57, 58, 66, 91, 95, 220], "env_fn_parallel": [11, 12, 14, 15], "6": [11, 12, 14, 15, 58, 75, 103, 108, 113, 114, 125, 143, 205, 208, 210, 213, 215, 218, 232, 233, 234, 237, 238, 239, 240, 241, 242, 243], "out_se": [11, 12, 14, 15, 242], "shut": [11, 12, 14, 15, 233], "down": [11, 12, 14, 15, 233], "irrevers": [11, 12, 15], "arg": [12, 19, 23, 35, 36, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 78, 85, 91, 92, 93, 94, 103, 114, 129, 130, 134, 138, 187, 192, 196, 199, 224], "kwarg": [12, 14, 15, 19, 23, 35, 36, 41, 42, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 78, 85, 87, 91, 92, 93, 94, 103, 104, 105, 106, 107, 111, 112, 114, 115, 122, 125, 127, 129, 130, 134, 137, 138, 140, 153, 161, 170, 182, 185, 187, 189, 192, 199, 205, 206, 207, 208, 213, 215, 218, 221, 222, 223, 234], "envcreat": [14, 220, 221, 224, 226, 232, 233, 242, 243], "return_same_td": 14, "stop": [14, 41, 44, 46, 47, 48, 234, 242, 243], "equat": [14, 136, 151, 153, 166, 234], "exce": [14, 234], "batcher": 14, "cautious": [14, 162], "ad": [14, 23, 25, 26, 27, 28, 32, 41, 44, 46, 47, 48, 49, 83, 91, 117, 118, 136, 153, 161, 162, 232, 242], "whole": [14, 19, 23, 41, 44, 46, 47, 48, 91, 190, 233, 234], "yield": [14, 23, 41, 44, 46, 47, 48], "chunk": 14, "policy_state_dict": 14, "env_state_dict": 14, "paradigm": 15, "regular": [15, 139, 140, 146, 156, 201, 230, 232, 240, 241, 242], "prefer": [15, 79, 84, 234], "mere": 15, "rollout_tensordict": 16, "zero": [16, 17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 64, 67, 75, 102, 113, 135, 136, 149, 171, 172, 173, 240, 241, 243], "max": [16, 24, 27, 32, 67, 88, 125, 126, 127, 153, 163, 165, 232, 234], "durat": [16, 233], "discret": [17, 20, 21, 22, 24, 31, 67, 122, 145, 146, 156], "5": [17, 42, 46, 58, 59, 60, 102, 103, 110, 112, 113, 114, 116, 126, 127, 134, 138, 145, 146, 161, 232, 233, 237, 238, 241, 242, 243], "assert_is_in": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "belong": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "otherwis": [17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 67, 75, 87, 91, 95, 112, 126, 127, 158, 165, 195, 196, 230, 232, 234, 237, 242], "encod": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 67, 121, 122, 123, 134, 138, 145, 146, 151, 234, 237, 240], "val": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 243], "ndarrai": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 44, 136], "np": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 44, 232, 237], "tupl": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 44, 46, 47, 48, 75, 104, 113, 114, 119, 154, 157, 171, 172, 173, 209, 211, 214, 217, 241], "compli": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 241], "current": [17, 18, 19, 20, 21, 22, 23, 24, 29, 30, 31, 41, 44, 46, 47, 48, 49, 56, 79, 91, 98, 110, 113, 124, 136, 145, 146, 188, 205, 213, 230, 234, 237, 242, 243], "least": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "complient": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "singleton": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 103, 114, 237], "slice": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 241], "tensor_to_index": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "is_in": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 242], "project": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 67, 133, 135, 136, 139, 140, 233, 242, 243], "back": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 139, 140, 232, 234, 237], "rand": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 45, 51, 58, 102, 116, 237, 242, 243], "uniform": [17, 18, 19, 20, 21, 22, 24, 25, 27, 29, 30, 31, 32], "unbound": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 87, 237, 241], "to_numpi": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "transformed_in": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 90, 91, 119, 125, 224], "type_check": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31], "fill": [17, 18, 19, 20, 21, 22, 24, 29, 30, 31, 87, 238, 241], "minimum": [18, 81, 110, 119, 125, 126, 127, 137, 149, 151, 165, 190, 232, 234, 237, 242, 243], "float": [18, 20, 23, 24, 25, 27, 30, 32, 41, 44, 46, 47, 48, 66, 68, 75, 78, 81, 82, 87, 89, 91, 94, 95, 108, 110, 112, 116, 117, 118, 123, 124, 125, 127, 133, 135, 136, 139, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 170, 171, 172, 173, 174, 175, 176, 177, 178, 197, 232, 233, 242], "upper": 18, "unnam": 19, "effect": [19, 23, 41, 44, 46, 47, 48, 83, 91, 199, 233, 242], "pixels_spec": 19, "boundedtensorspec": [19, 130, 131, 132, 135, 136, 137, 226, 234, 237, 242, 243], "32": [19, 59, 60, 103, 104, 105, 111, 114, 120, 121, 232, 233, 234, 237, 238, 242, 243], "observation_vector_spec": 19, "33": [19, 23, 41, 44, 46, 47, 48, 103, 114, 234, 237, 239, 241], "composite_spec": 19, "observation_vector": [19, 64, 205, 208, 213, 215, 218, 232], "td": [19, 50, 51, 52, 53, 54, 55, 57, 58, 64, 67, 68, 75, 89, 91, 95, 101, 102, 115, 116, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 172, 173, 176, 177, 179, 180, 181, 190, 198, 205, 208, 210, 213, 215, 218, 237, 240, 241, 242, 243], "within": [19, 23, 28, 41, 44, 46, 47, 48, 95, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 237, 243], "randn": [19, 75, 113, 119, 129, 130, 131, 132, 134, 137, 138, 139, 142, 143, 145, 146, 171, 172, 173, 198, 240, 241, 242, 243], "td_project": 19, "yield_nesting_kei": 19, "nested_kei": 19, "keysview": 19, "immedi": [19, 23, 41, 44, 46, 47, 48, 170], "children": [19, 23, 41, 44, 46, 47, 48], "selected_kei": [19, 47, 48, 84, 232], "altern": [20, 46, 151, 232, 233, 234, 241], "onehottensorspec": 20, "categor": [20, 24, 122, 145, 146], "larg": [20, 234], "action_valu": [20, 24, 134, 138, 145, 146, 210, 233], "arang": [20, 24, 134, 145, 190], "argmax": [20, 134, 138, 145, 146], "dim": [20, 63, 64, 87, 92, 113, 224, 233, 240, 241], "chosen_action_valu": [20, 24, 138, 210, 233], "outcom": [20, 24, 108, 125], "nvec": [21, 22], "cardin": [21, 22, 145, 146, 234], "ax": [21, 117, 118], "use_regist": [22, 24], "hot": [22, 24, 67, 122, 134, 138, 145, 146], "sum": [22, 24, 44, 158, 170, 232, 233, 234, 237, 242], "gamma": [23, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 220, 232, 233, 234, 243], "present": [23, 25, 32, 41, 44, 46, 47, 48, 49, 69, 83, 84, 104, 105, 106, 107, 111, 118, 136, 139, 140, 141, 142, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 224, 230, 232, 236, 243], "sutton": 23, "r": [23, 75, 140, 151, 170, 242], "1988": [23, 237], "predict": [23, 110, 115, 116, 144, 156, 158, 159, 165, 170], "tempor": [23, 116, 172], "44": [23, 233, 234, 237], "discount": [23, 42, 152, 153, 154, 155, 156, 157, 159, 161, 162, 165, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 232, 233, 234], "ahead": [23, 242], "add_modul": [23, 41, 44, 46, 47, 48], "child": [23, 41, 44, 46, 47, 48, 241], "fn": [23, 41, 44, 46, 47, 48, 119, 222, 223], "recurs": [23, 41, 44, 46, 47, 48], "init": [23, 41, 44, 46, 47, 48, 232, 233, 234], "init_weight": [23, 41, 44, 46, 47, 48], "m": [23, 41, 44, 46, 47, 48, 67, 140, 233, 237], "fill_": [23, 41, 44, 46, 47, 48, 233, 241, 242], "net": [23, 41, 44, 46, 47, 48, 113, 163, 215, 220, 233, 237, 238, 240, 243], "in_featur": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 103, 104, 105, 106, 107, 113, 114, 117, 118, 130, 139, 240, 243], "out_featur": [23, 41, 44, 45, 46, 47, 48, 66, 78, 87, 91, 94, 102, 103, 104, 105, 106, 107, 110, 111, 113, 114, 116, 117, 118, 130, 134, 139, 232, 240, 243], "bia": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 103, 110, 114, 117, 118, 119, 135, 136, 139, 149, 150, 151, 233, 234, 243], "requires_grad": [23, 41, 44, 46, 47, 48, 232], "bfloat16": [23, 41, 44, 46, 47, 48], "cast": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 95, 139, 205, 208, 210, 213, 215, 218, 241, 242], "datatyp": [23, 41, 44, 46, 47, 48], "direct": [23, 41, 44, 46, 47, 48, 233], "member": [23, 41, 44, 46, 47, 48], "xdoctest": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "skip": [23, 41, 44, 46, 47, 48, 72, 91, 97, 140, 181, 182, 192, 195, 234, 240], "buf": [23, 41, 44, 46, 47, 48], "20l": [23, 41, 44, 46, 47, 48], "1l": [23, 41, 44, 46, 47, 48], "5l": [23, 41, 44, 46, 47, 48], "associ": [23, 41, 44, 46, 47, 48, 123, 224, 240], "copi": [23, 41, 44, 46, 47, 48, 91, 232, 233, 241], "doubl": [23, 25, 27, 30, 41, 44, 46, 47, 48, 66, 68, 78, 87, 89, 91, 94, 139, 155, 156, 160, 163, 166, 232, 234, 242], "eval": [23, 41, 44, 46, 47, 48, 91, 95, 232, 233, 234], "evalu": [23, 41, 44, 46, 47, 48, 91, 108, 122, 127, 163, 206, 207, 233, 234], "certain": [23, 41, 44, 46, 47, 48, 72, 86, 91, 161, 232, 233, 234, 241, 242], "particular": [23, 41, 44, 46, 47, 48, 91, 230, 233, 236, 237], "behavior": [23, 41, 44, 46, 47, 48, 91, 234], "dropout": [23, 41, 44, 46, 47, 48, 91, 240], "batchnorm": [23, 41, 44, 46, 47, 48, 91], "disabl": [23, 41, 44, 46, 47, 48, 91, 112, 126, 127, 232], "comparison": [23, 41, 44, 46, 47, 48, 91], "similar": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 93, 94, 95, 101, 139, 140, 232, 234, 237, 240, 242], "mechan": [23, 41, 44, 46, 47, 48, 91, 237], "confus": [23, 41, 44, 46, 47, 48, 91], "extra_repr": [23, 41, 44, 46, 47, 48], "represent": [23, 41, 44, 46, 47, 48, 78, 94, 232, 233, 237, 238, 242], "string": [23, 41, 44, 46, 47, 48, 78, 94, 140, 151, 181, 198, 205, 213, 215, 218, 234], "tennsordict": 23, "shift": [23, 149, 234], "nontermin": [23, 232], "termin": [23, 141, 232, 233, 234, 237, 240, 243], "original_reward": [23, 232], "newli": 23, "get_buff": [23, 41, 44, 46, 47, 48], "throw": [23, 41, 44, 46, 47, 48, 242], "docstr": [23, 41, 44, 46, 47, 48], "get_submodul": [23, 41, 44, 46, 47, 48], "explan": [23, 41, 44, 46, 47, 48], "qualifi": [23, 41, 44, 46, 47, 48], "referenc": [23, 41, 44, 46, 47, 48], "attributeerror": [23, 41, 44, 46, 47, 48], "invalid": [23, 41, 44, 46, 47, 48], "resolv": [23, 41, 44, 46, 47, 48], "someth": [23, 41, 44, 46, 47, 48, 227, 234, 237, 242], "get_extra_st": [23, 41, 44, 46, 47, 48, 95], "set_extra_st": [23, 41, 44, 46, 47, 48, 95], "picklabl": [23, 41, 44, 46, 47, 48, 95], "ensur": [23, 25, 27, 32, 41, 44, 46, 47, 48, 63, 78, 95, 147, 232, 234, 237], "guarante": [23, 35, 36, 37, 38, 41, 44, 46, 47, 48, 95, 243], "pickl": [23, 41, 44, 46, 47, 48, 95], "get_paramet": [23, 41, 44, 46, 47, 48], "sai": [23, 41, 44, 46, 47, 48, 238, 242], "net_b": [23, 41, 44, 46, 47, 48], "net_c": [23, 41, 44, 46, 47, 48], "conv": [23, 41, 44, 46, 47, 48, 103], "conv2d": [23, 41, 44, 46, 47, 48, 103, 243], "16": [23, 41, 44, 46, 47, 48, 233, 234, 237, 238, 239, 242], "kernel_s": [23, 41, 44, 46, 47, 48, 103, 104, 105, 233, 243], "stride": [23, 41, 44, 46, 47, 48, 103, 104, 105, 111, 233, 243], "100": [23, 41, 44, 46, 47, 48, 75, 191, 199, 220, 232, 233, 234, 236, 237, 238, 242, 243], "diagram": [23, 41, 44, 46, 47, 48], "show": [23, 41, 44, 46, 47, 48, 232, 233, 234, 237, 240, 243], "itself": [23, 41, 44, 46, 47, 48, 86, 234], "degre": [23, 41, 44, 46, 47, 48], "named_modul": [23, 41, 44, 46, 47, 48], "o": [23, 41, 44, 46, 47, 48], "transit": [23, 41, 44, 46, 47, 48, 144, 232, 233, 237], "half": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 232], "ipu": [23, 41, 44, 46, 47, 48], "strict": [23, 41, 44, 46, 47, 48, 91], "descend": [23, 41, 44, 46, 47, 48, 91], "exactli": [23, 41, 44, 46, 47, 48, 56, 91, 232], "persist": [23, 41, 44, 46, 47, 48, 91], "enforc": [23, 41, 44, 46, 47, 48, 91, 141, 237], "missing_kei": [23, 41, 44, 46, 47, 48, 91], "unexpected_kei": [23, 41, 44, 46, 47, 48, 91], "namedtupl": [23, 41, 44, 46, 47, 48, 91], "duplic": [23, 41, 44, 46, 47, 48, 155, 156, 241], "l": [23, 41, 44, 46, 47, 48, 170, 234, 237], "idx": [23, 41, 44, 46, 47, 48, 241], "named_buff": [23, 41, 44, 46, 47, 48, 233], "prefix": [23, 41, 44, 46, 47, 48, 91, 181, 242], "remove_dupl": [23, 41, 44, 46, 47, 48], "prepend": [23, 41, 44, 46, 47, 48], "running_var": [23, 41, 44, 46, 47, 48], "named_children": [23, 41, 44, 46, 47, 48], "conv4": [23, 41, 44, 46, 47, 48], "conv5": [23, 41, 44, 46, 47, 48], "memo": [23, 41, 44, 46, 47, 48], "named_paramet": [23, 41, 44, 46, 47, 48, 233], "register_backward_hook": [23, 41, 44, 46, 47, 48], "removablehandl": [23, 41, 44, 46, 47, 48], "deprec": [23, 41, 44, 46, 47, 48, 91, 242], "favor": [23, 41, 44, 46, 47, 48, 234], "register_full_backward_hook": [23, 41, 44, 46, 47, 48], "futur": [23, 41, 44, 46, 47, 48, 78, 91, 94, 114, 227, 243], "register_buff": [23, 41, 44, 46, 47, 48], "running_mean": [23, 41, 44, 46, 47, 48], "alongsid": [23, 41, 44, 46, 47, 48], "latter": [23, 41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 222, 223], "num_featur": [23, 41, 44, 46, 47, 48], "register_forward_hook": [23, 41, 44, 46, 47, 48, 145, 146], "with_kwarg": [23, 41, 44, 46, 47, 48], "posit": [23, 25, 26, 27, 28, 41, 44, 46, 47, 48, 71, 72, 85, 86, 88, 91, 92, 119, 234, 237, 240], "won": [23, 41, 42, 44, 46, 47, 48, 78, 94, 199, 224, 232, 234], "signatur": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 148, 237], "possibli": [23, 41, 44, 46, 47, 48, 103, 139, 199, 234, 237, 242], "fire": [23, 41, 44, 46, 47, 48], "register_module_forward_hook": [23, 41, 44, 46, 47, 48], "register_forward_pre_hook": [23, 41, 44, 46, 47, 48], "invok": [23, 41, 44, 46, 47, 48], "And": [23, 41, 44, 46, 47, 48], "forward_pr": [23, 41, 44, 46, 47, 48], "register_module_forward_pre_hook": [23, 41, 44, 46, 47, 48], "respect": [23, 41, 44, 46, 47, 48, 62, 66, 78, 79, 87, 91, 94, 124, 139, 143, 194, 234], "grad_input": [23, 41, 44, 46, 47, 48], "grad_output": [23, 41, 44, 46, 47, 48], "subsequ": [23, 41, 44, 46, 47, 48], "entri": [23, 41, 44, 46, 47, 48, 65, 71, 75, 78, 94, 171, 172, 173, 232, 234, 237, 238, 240], "technic": [23, 41, 44, 46, 47, 48], "similarli": [23, 41, 44, 46, 47, 48, 141, 142, 232, 240, 242], "caller": [23, 41, 44, 46, 47, 48], "register_module_full_backward_hook": [23, 41, 44, 46, 47, 48], "register_full_backward_pre_hook": [23, 41, 44, 46, 47, 48], "backward_pr": [23, 41, 44, 46, 47, 48], "register_module_full_backward_pre_hook": [23, 41, 44, 46, 47, 48], "register_load_state_dict_post_hook": [23, 41, 44, 46, 47, 48], "post": [23, 41, 44, 46, 47, 48, 232, 233], "incompatible_kei": [23, 41, 44, 46, 47, 48], "consist": [23, 41, 44, 46, 47, 48, 103, 114, 232, 233, 234, 237, 238, 242], "thrown": [23, 41, 44, 46, 47, 48], "clear": [23, 41, 44, 46, 47, 48, 191], "register_modul": [23, 41, 44, 46, 47, 48, 230], "alia": [23, 41, 44, 46, 47, 48], "register_paramet": [23, 41, 44, 46, 47, 48], "register_state_dict_pre_hook": [23, 41, 44, 46, 47, 48], "keep_var": [23, 41, 44, 46, 47, 48, 91], "made": [23, 35, 36, 37, 38, 41, 44, 46, 47, 48, 136, 232, 238], "requires_grad_": [23, 41, 44, 46, 47, 48, 232], "autograd": [23, 41, 44, 46, 47, 48, 91], "freez": [23, 41, 44, 46, 47, 48], "finetun": [23, 41, 44, 46, 47, 48], "individu": [23, 41, 44, 46, 47, 48, 232], "gan": [23, 41, 44, 46, 47, 48], "share_memori": [23, 41, 42, 44, 46, 47, 48, 232], "share_memory_": [23, 41, 44, 46, 47, 48, 241, 243], "destin": [23, 41, 44, 46, 47, 48, 91, 101], "averag": [23, 41, 44, 46, 47, 48, 91, 95, 136, 157, 158, 197, 232, 234, 240], "shallow": [23, 41, 44, 46, 47, 48, 91], "pleas": [23, 41, 44, 46, 47, 48, 91, 227], "design": [23, 24, 41, 44, 46, 47, 48, 79, 91, 152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 232, 233, 234, 236, 237, 241, 242], "detach": [23, 41, 44, 46, 47, 48, 91, 232, 233], "non_block": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 233], "memory_format": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "channels_last": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "Its": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "complex": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 232, 240], "integr": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 107, 116, 139, 237, 238], "unchang": [23, 41, 44, 46, 47, 48, 66, 67, 78, 87, 91, 94, 139], "tri": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "convert": [23, 41, 44, 46, 47, 48, 66, 68, 78, 87, 91, 94, 95, 139, 151, 234, 237, 241], "host": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "pin": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "4d": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "ignore_w": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "1913": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "3420": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 237], "5113": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "2325": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "torch_doctest_cuda1": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "gpu1": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "1914": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 234], "5112": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "2324": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "float16": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "cdoubl": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "3741": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "j": [23, 25, 32, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 230, 233], "2382": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139, 237], "5593": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "4443": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "complex128": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "6122": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "1150": [23, 41, 44, 46, 47, 48, 66, 78, 87, 91, 94, 139], "to_empti": [23, 41, 44, 46, 47, 48], "dst_type": [23, 41, 44, 46, 47, 48], "xpu": [23, 41, 44, 46, 47, 48], "set_to_non": [23, 41, 44, 46, 47, 48], "unidimension": [24, 241], "keepdim": 24, "user_regist": 24, "experiment": [24, 140], "priori": 24, "definit": [24, 38], "uniqu": 24, "discretebox": 24, "alpha": [25, 27, 32, 103, 163, 165, 232, 233, 243], "beta": [25, 27, 32, 161, 232, 233, 243], "ep": [25, 27, 32, 95, 136, 153, 166, 197], "1e": [25, 27, 32, 95, 108, 110, 119, 125, 234], "08": [25, 27, 32, 232, 233, 234, 237], "collate_fn": [25, 26, 27, 241, 243], "prefetch": [25, 26, 27, 232, 233], "schaul": [25, 32], "quan": [25, 32], "antonogl": [25, 32], "silver": [25, 32], "2015": [25, 32, 237], "arxiv": [25, 32, 63, 78, 104, 105, 106, 107, 110, 111, 116, 118, 120, 121, 123, 124, 136, 145, 152, 156, 157, 158, 159, 160, 162, 165, 166, 171, 174, 175, 178, 205, 208, 213, 218, 232, 238], "ab": [25, 32, 78, 95, 110, 111, 116, 118, 120, 121, 123, 124, 152, 157, 158, 159, 160, 162, 165, 205, 213, 232, 238], "1511": [25, 32, 111], "05952": [25, 32], "expon": [25, 27, 32], "\u03b1": [25, 27, 32], "determin": [25, 27, 32, 78, 94, 136, 233], "delta": [25, 27, 32, 125, 140, 226], "prioriti": [25, 27, 28, 32, 35, 36, 37, 38, 154, 155, 163, 165, 230, 232, 233], "null": [25, 27, 32, 62, 232], "max_siz": [25, 26, 27, 35, 37, 38, 233], "1_000": [25, 26, 27], "merg": [25, 26, 27], "mini": [25, 26, 27], "style": [25, 26, 27], "rb": [25, 26, 27, 233, 238, 243], "insert_transform": [25, 26, 27, 28], "insert": [25, 26, 27, 28, 39, 40, 92, 233], "return_info": [25, 26, 27, 28], "sampler": [25, 26, 27, 28, 32, 33, 35, 36, 37, 38, 79, 226, 232, 234], "info": [25, 26, 27, 28, 41, 44, 46, 47, 48, 59, 60, 96, 240], "select": [25, 26, 27, 28, 47, 48, 63, 64, 66, 69, 70, 71, 72, 74, 77, 79, 84, 86, 87, 88, 90, 93, 95, 102, 198, 232, 233], "writer": [26, 39, 226, 234], "randomsampl": [26, 226, 232], "roundrobinwrit": [26, 226], "priority_kei": [27, 28, 155, 156, 165, 243], "td_error": [27, 28, 154, 155, 156, 163, 165, 232, 243], "reduct": [27, 32], "prioritizedreplaybuff": [27, 226, 243], "update_tensordict_prior": [27, 232, 243], "min": [27, 32, 125, 126, 127, 153, 163, 165, 232, 233, 234], "median": [27, 32, 140], "include_info": [27, 28], "kw": [28, 39], "replaybuff": [28, 40, 79, 216, 220, 226, 234, 238, 243], "meta": [29, 43, 230, 234], "describ": [29, 64, 90, 125, 126, 188, 205, 213, 234, 242], "max_capac": [32, 232], "update_prior": [32, 196, 230, 243], "uniformli": [33, 242], "scratch_dir": [35, 232], "memmap": [35, 47, 48, 95, 196, 232], "attach": [35, 36, 37, 38, 233], "entiti": [35, 36, 37, 38], "alloc": [36, 232], "__len__": 38, "roundrobin": 39, "piec": [39, 40, 234, 237], "_inplace_upd": [41, 46, 47, 48, 50, 51, 59, 60, 91], "_batch_lock": [41, 46, 47, 48, 50, 51, 59, 60, 91], "run_type_check": [41, 45], "batch_lock": [41, 43, 44, 46, 47, 48, 87, 91, 237], "environn": [41, 44, 45, 46, 47, 48, 91], "immut": [41, 44, 46, 47, 48, 91, 205, 213], "fake_tensordict": [41, 44, 46, 47, 48, 232], "fake": [41, 44, 46, 47, 48, 232], "overridden": [41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149], "recip": [41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149], "afterward": [41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149, 242], "former": [41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149], "silent": [41, 44, 46, 47, 48, 103, 104, 105, 106, 107, 109, 110, 111, 113, 114, 119, 120, 121, 123, 124, 133, 135, 136, 149], "_step": [41, 44, 46, 47, 48, 71], "privat": [41, 44, 46, 47, 48, 237, 242], "_reset": [41, 44, 45, 46, 47, 48, 102, 116], "overwritten": [41, 44, 46, 47, 48, 71, 101], "callback": [41, 44, 46, 47, 48], "auto_reset": [41, 44, 46, 47, 48, 233, 237], "auto_cast_to_devic": [41, 44, 46, 47, 48], "break_when_any_don": [41, 44, 46, 47, 48], "return_contigu": [41, 44, 46, 47, 48, 97, 236], "soon": [41, 44, 46, 47, 48], "smaller": [41, 44, 46, 47, 48, 234], "lazystackedtensordict": [41, 44, 45, 46, 47, 48, 102, 116, 236, 241, 242, 243], "concomitt": [41, 44, 46, 47, 48], "workspac": [41, 44, 46, 47, 48, 49], "carri": [41, 44, 46, 47, 48, 237], "creator": [42, 206, 207, 222, 223, 224], "substitut": [42, 95], "multiprocess": [42, 43, 95, 234, 237, 242], "vecnorm": [42, 224], "mp": [42, 95], "env_creat": [42, 232], "test_env1": 42, "_td": 42, "observation_count": [42, 242], "test_env2": 42, "sleep": [42, 242], "__name__": [42, 233], "__main__": 42, "p": [42, 233, 240], "p1": [42, 233], "p2": [42, 233], "join": [42, 205, 213, 234], "9934": 42, "env_str": 43, "discard": [44, 101, 181, 242], "info_dict_read": 44, "set_info_dict_read": 44, "put": [44, 95, 224, 234, 237, 241], "f": [44, 151, 171, 172, 173, 232, 233, 234, 237, 240, 241, 242], "read_act": 44, "read_don": 44, "reader": [44, 232, 233], "frame_skip": [44, 52, 53, 54, 57, 72, 192, 195, 202, 230, 232, 234, 243], "broken": [44, 97], "read_ob": 44, "dictat": [44, 140, 237], "inner": [44, 67, 230, 232, 234, 242], "read_reward": 44, "total_reward": 44, "step_reward": 44, "far": [44, 112, 126, 127, 237, 242], "baseinfodictread": 44, "info_dict": 44, "hoc": 44, "manner": [44, 78, 232, 234, 236], "dict_read": 44, "default_info_dict_read": 44, "my_info_kei": 44, "some_env": 44, "meant": 45, "limit": [45, 47, 48, 232, 241], "safeti": 45, "constraint": [45, 234], "behav": [45, 56, 122, 238], "unboundedcontinuoustensorspec": [45, 87, 102, 129, 130, 131, 132, 139, 142, 143, 226, 234, 237, 242], "mymbenv": [45, 102, 116], "world_model": [45, 102, 116, 158], "super": [45, 102, 116, 143, 145, 148, 237, 240, 243], "hidden_observ": [45, 102, 116], "mlp": [45, 102, 103, 104, 105, 106, 107, 113, 116, 130, 134, 205, 213, 215, 218, 226, 232, 233, 236, 238, 240, 243], "worldmodelwrapp": [45, 102, 116, 226], "activation_class": [45, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 232, 233, 243], "relu": [45, 102, 116, 119, 151, 240], "activate_last_lay": [45, 102, 107, 114, 116], "depth": [45, 102, 103, 104, 105, 106, 107, 110, 111, 114, 116, 120, 121, 134, 233, 236], "faster": 46, "less": [46, 222, 223, 232, 233, 234, 243], "equal": [46, 47, 48, 74, 75, 103, 109, 114, 167, 190, 222, 223, 234, 238, 241], "readthedoc": 46, "io": [46, 47, 48], "en": 46, "python_interfac": 46, "num_work": [46, 47, 48, 232, 233], "thread": 46, "task_id": 46, "my_env_fun": [47, 48], "custom_attribute_list": [47, 48], "custom_attribut": [47, 48], "custom_method_list": [47, 48], "custom_method": [47, 48], "deploi": [47, 48], "creation": [47, 48, 242], "divers": [47, 48], "slight": [47, 48, 233], "overhead": [47, 48, 240], "env_input_kei": [47, 48], "permit": [47, 48, 71, 92], "drastic": [47, 48], "decreas": [47, 48], "burden": [47, 48], "_batchedenv": [47, 48], "might": [47, 48, 189, 227, 232, 242], "next_pixel": [47, 48], "next_vector": [47, 48], "occupi": [47, 48], "excluded_kei": [47, 48, 69], "share_individual_td": [47, 48], "lazi": [47, 48, 78, 117, 141, 142, 232, 236, 241, 242], "shared_memori": [47, 48], "policy_proof": [47, 48], "ll": [47, 48, 232, 233, 234, 242], "hidden": [47, 48, 110, 113, 120, 121, 123, 124, 130, 131, 132, 139, 142, 205, 213, 236, 240, 243], "instanti": [47, 48, 90, 232, 233, 241, 242], "allow_step_when_don": [47, 48], "encount": [47, 48, 227, 237], "update_kwarg": [47, 48], "build_tensordict": 49, "next_observ": [49, 101, 113, 236], "log_prob": [49, 108, 122, 127], "empti": [49, 78, 88, 91, 94, 232, 237], "popul": [49, 87, 234], "googl": [50, 51, 234], "ant": [50, 51, 238], "get_environ": 51, "87": [51, 237, 238], "acrobot": [51, 242], "fetch": [51, 238, 242], "dm_control": [52, 53, 232, 236, 242], "task_nam": 52, "cheetah": [52, 53, 232, 242], "serv": [56, 242], "placehold": [56, 91], "secur": 56, "jumanji": [57, 58], "snake": [57, 58], "6x6": [57, 58], "td1": 58, "int32": [58, 241, 243], "12x12": 58, "tsp50": 58, "tsp100": 58, "vma": [59, 60], "scenario_nam": [59, 60], "flock": [59, 60], "num_env": [59, 60], "continuous_act": [59, 60], "scenario": [59, 60, 232], "n_agent": [59, 60], "cohesion_rew": [59, 60], "collision_rew": [59, 60], "separation_rew": [59, 60], "velocity_rew": [59, 60], "18": [59, 60, 233, 234, 237], "model_bas": [61, 102, 116], "transform_reward_spec": [62, 66, 68, 81, 82, 90, 92], "success": [63, 90, 237, 243], "account": 63, "movement": 63, "veloc": [63, 237, 242], "propos": [63, 115, 160, 166, 215, 218], "plai": [63, 234, 242], "pdf": [63, 104, 105, 106, 107, 136, 145, 156, 163, 166, 171, 174, 175, 178, 208, 215, 218], "1312": 63, "5602": 63, "_buffer": [63, 88], "transform_observation_spec": [63, 64, 65, 66, 68, 69, 71, 73, 75, 80, 83, 84, 86, 87, 88, 89, 90, 92], "del_kei": [64, 233, 236, 237], "unsqueeze_if_oor": 64, "observation_posit": 64, "observation_veloc": 64, "delet": [64, 241], "unsqueez": [64, 89, 92, 113, 237, 241], "key1": [64, 190, 198], "key2": [64, 190, 198], "w": [65, 80, 89, 136, 182], "crop": [65, 79, 182], "center": [65, 182], "width": [65, 80, 233], "height": [65, 80, 233], "squar": [65, 112, 126, 127, 182], "rewardsc": [66, 91, 232], "rewardclip": 66, "transformed_env": [66, 90, 91], "tranform": [66, 69, 84, 86, 90, 93], "dest": [66, 78, 94, 139], "transform_input_spec": [66, 67, 68, 75, 86, 90, 92], "num_actions_effect": 67, "max_act": 67, "action_kei": [67, 102, 115, 116, 133, 135], "include_forward": 67, "dimension": [67, 171, 174, 175, 178], "num_act": [67, 233], "action_out": 67, "wherea": [67, 230, 232, 240], "_call": [67, 71], "inde": [67, 234, 237, 241], "remain": [67, 118], "manual_se": [67, 75, 135, 136, 232, 237, 242, 243], "expos": [68, 141, 240], "extern": [68, 242], "finit": 70, "first_dim": 71, "last_dim": 71, "allow_positive_dim": [71, 92], "flatten": [71, 196, 232, 233], "adjac": 71, "th": [71, 92, 237], "exclus": [71, 224], "frameskip": 71, "repeatedli": [72, 234], "stabil": 72, "turn": [73, 92, 195, 232, 233, 237, 238], "noop": [74, 243], "30": [74, 123, 124, 233, 234, 237, 239], "op": [74, 133, 135, 201], "randomli": [74, 75, 87, 140, 237], "noop_max": 74, "loc": [75, 82, 112, 119, 126, 127, 130, 131, 132, 137, 140, 142, 203, 205, 213, 215, 218, 224, 232, 233, 234, 240, 243], "out_keys_inv": [75, 76, 90], "standard_norm": [75, 82, 232, 233], "affin": [75, 82], "layer": [75, 95, 103, 104, 105, 110, 114, 117, 118, 120, 121, 128, 232, 233, 234, 238, 240], "normal": [75, 95, 103, 112, 114, 119, 126, 127, 133, 140, 153, 161, 162, 195, 197, 224, 230, 233, 242], "set_default_tensor_typ": 75, "doubletensor": 75, "std": [75, 95, 119, 133, 233, 242], "isclos": 75, "next_ob": [75, 171, 172, 173, 232, 243], "stat": [75, 203, 224, 234], "rubric": [75, 142], "init_stat": [75, 232, 234], "3752e": 75, "01": [75, 136, 149, 152, 153, 161, 162, 232, 233, 234, 237, 238, 239], "5087e": 75, "03": [75, 232, 233, 234, 237, 238, 239], "9294e": 75, "9636": 75, "5608": 75, "6408": 75, "num_it": [75, 234], "reduce_dim": [75, 232, 234], "cat_dim": [75, 232, 234], "keep_dim": 75, "constant": [75, 230, 232, 233, 234, 242], "ideal": [75, 232], "statist": [75, 95, 164, 224, 232, 234, 242], "approach": [75, 232, 234, 242], "gaussian": [75, 87, 102, 116, 117, 118, 133, 234], "empir": [75, 102, 116, 140, 234], "deviat": [75, 95, 102, 110, 116, 117, 118, 133, 162, 232, 233], "3d": 75, "third": 75, "r3m": [78, 238], "resnet": [78, 94], "visual": [78, 94, 234, 237], "embed": [78, 93, 94, 130, 131, 132, 139, 238, 240], "ego4d": [78, 94], "paper": [78, 94, 160, 215, 218, 232, 234], "univers": [78, 94], "suraj": 78, "nair": 78, "aravind": 78, "rajeswaran": 78, "vikash": [78, 94], "kumar": [78, 94], "chelsea": 78, "finn": 78, "abhinav": 78, "gupta": 78, "2203": [78, 116, 238], "12601": [78, 238], "_init": 78, "snippet": [78, 232], "resnet50": [78, 94, 238], "model_nam": [78, 94, 188], "resnet34": 78, "resnet18": 78, "left": [78, 88, 94, 232, 233, 234], "r3m_vec": [78, 238], "feed": [78, 94], "244": [78, 94, 237], "stack_imag": [78, 94], "tread": [78, 94], "separet": [78, 94], "hub": [78, 94, 238], "cach": [78, 91, 94, 191, 238], "public": [78, 94], "resnet50_weight": [78, 94], "imagenet1k_v1": [78, 94], "download_path": [78, 94], "tensor_pixels_kei": [78, 94], "sub_seq_len": 79, "sample_dim": 79, "mask_kei": 79, "primarili": 79, "hesit": 79, "request": 79, "robust": 79, "vari": 79, "mix": 79, "NOT": 79, "improp": 79, "interpol": [80, 233], "bilinear": 80, "clamp_min": [81, 136], "clamp_max": 81, "clip": [81, 153, 199, 234, 237], "clip_min": 81, "scalar": [81, 105, 107, 117, 118, 133, 135, 136, 149, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 237], "clip_max": 81, "episod": [83, 102, 174, 175, 176, 177, 178, 179, 180, 233], "cumul": [83, 102, 234], "episode_": 83, "reward1": 83, "reward2": 83, "ho": 83, "excludetransform": 84, "squeeze_dim": 85, "squeez": [85, 103, 233, 237, 241], "manual": 86, "primer": 87, "default_valu": 87, "drawn": [87, 140, 234], "rel": [87, 108, 125], "unit": [87, 102, 110, 120, 121, 123, 124, 234], "chosen": [87, 205, 213, 215, 218], "transfomedenv": 87, "lock": [87, 95, 237], "mykei": 87, "dtype_or_devic": 87, "pool": 88, "255": [89, 237], "precis": [89, 232, 234], "ri": 89, "randint": [89, 232], "principl": 90, "combin": [90, 241], "cattransform": 90, "notabl": 90, "cache_spec": 91, "anymor": [91, 139, 232], "unsqueeze_dim": [92, 237], "danger": 92, "vip": [93, 94, 238], "toward": 94, "implicit": 94, "jason": 94, "ma": 94, "shagun": 94, "sodhani": 94, "dinesh": 94, "jayaraman": 94, "osbert": 94, "bastani": 94, "ami": 94, "zhang": 94, "vip_vec": 94, "shared_td": 95, "decai": [95, 133, 135, 163, 197, 232, 233, 242], "9999": 95, "0001": [95, 110, 119, 197, 234, 237], "fly": [95, 161, 234, 242], "to_observation_norm": 95, "rate": [95, 170, 232, 233, 234], "99": [95, 116, 152, 153, 157, 159, 161, 162, 163, 164, 165, 170, 220, 232, 233, 234, 237, 243], "underflow": 95, "1000": [95, 133, 135, 136, 140, 160, 232, 233, 234, 238], "build_td_for_shared_vecnorm": 95, "memmori": 95, "memmap_": [95, 241], "queue": 95, "td_share": 95, "observationnorm": [95, 224, 232, 233, 234, 243], "state_dim": [96, 123, 124], "action_dim": [96, 104, 106, 236], "gsde": [96, 163, 224], "nois": [96, 118, 128, 136, 163, 195, 224, 232], "func": [96, 237, 240], "gsdemodul": 96, "check_dtyp": 97, "short": [97, 234], "discrep": [97, 152, 153, 154, 155, 161, 162], "imposs": 97, "heterogen": 97, "caution": [97, 242], "adequ": [97, 234], "probabilistictdmodul": [100, 114, 140, 165, 170, 195], "next_tensordict": [101, 232], "keep_oth": [101, 237], "exclude_reward": 101, "exclude_don": 101, "exclude_act": 101, "_run_check": 101, "reflect": [101, 202, 234], "renam": [101, 232], "next_": 101, "funtion": [101, 237], "td_out": [101, 190, 198], "make_polici": 101, "next_td": 101, "planning_horizon": [102, 116], "optim_step": [102, 116, 241], "num_candid": [102, 116], "top_k": [102, 116], "reward_kei": [102, 116], "cross": 102, "entropi": [102, 152, 153, 161, 162, 163, 165], "botev": 102, "et": [102, 240], "al": [102, 210, 240, 242], "2013": 102, "cem": 102, "plan": [102, 115, 116], "varianc": [102, 112, 119, 126, 127, 234], "rank": 102, "top": [102, 116], "k": [102, 233, 240, 241], "repeat": [102, 234, 237], "maximis": [102, 104, 106, 116, 232, 234, 237], "horizon": [102, 116, 234], "modelbasedenv": [102, 116], "mpc": [102, 115, 116], "candid": [102, 116], "modelbasedenvbas": [102, 115, 116, 226], "next_hidden_observ": 102, "actor": [102, 104, 106, 110, 116, 130, 131, 132, 134, 135, 136, 137, 138, 145, 146, 152, 153, 154, 157, 161, 162, 163, 165, 205, 208, 210, 213, 215, 218, 226, 232, 233, 234, 238, 243], "num_cel": [103, 104, 105, 106, 107, 110, 111, 114, 130, 232, 233, 234, 240, 243], "elu": [103, 104, 105, 106, 107, 110, 111, 233, 243], "activation_kwarg": [103, 114], "norm_class": [103, 104, 105, 114], "norm_kwarg": [103, 114], "bias_last_lay": [103, 104, 105, 106, 107, 111, 114], "aggregator_class": [103, 104, 105, 233, 243], "squashdim": [103, 104, 243], "aggregator_kwarg": [103, 104, 105, 233], "squeeze_output": [103, 104, 105, 233], "convolut": [103, 104, 105], "neural": [103, 139, 233, 234, 240, 242], "produc": [103, 114, 122, 130, 132, 182, 234, 242], "len": [103, 114, 232, 233, 237, 238, 240, 241, 243], "cell": [103, 114, 234], "kernel": [103, 111, 113], "tanh": [103, 112, 114, 125, 126, 127, 232, 234, 237, 238, 243], "device_typ": [103, 104, 105, 106, 107, 111, 114, 117, 118], "cnet": 103, "34": [103, 114, 234, 237], "35": [103, 114, 234, 237, 238], "rectangular": 103, "conv_net_kwarg": [104, 105], "mlp_net_kwarg": [104, 105, 106], "use_avg_pool": [104, 105], "WITH": [104, 105, 106, 107, 136, 166, 208], "1509": [104, 105, 106, 107, 116, 136, 160, 166, 208, 232], "02971": [104, 105, 106, 107, 136, 166, 208, 232], "q": [104, 105, 106, 107, 109, 111, 145, 146, 154, 155, 156, 160, 163, 165, 215, 218, 240], "convnet": [104, 226, 243], "ndims_in": 104, "avgpool": [104, 105], "128": [105, 232, 233, 237, 238], "adaptiveavgpool2d": [105, 233], "400": [106, 107, 233, 237], "300": [106, 107, 205, 213, 237], "mlp_net_kwargs_net1": 107, "mlp_net_kwargs_net2": 107, "atol": [108, 125], "06": [108, 125, 232, 233, 237], "rtol": [108, 125], "batch_shap": [108, 125], "event_shap": [108, 125], "absolut": [108, 125], "toler": [108, 125], "densiti": [108, 122, 127], "mass": [108, 122, 127, 237], "rsampl": [108, 122, 140], "sample_shap": [108, 122], "reparameter": [108, 122], "dqnet": 109, "atom": 109, "std_bia": 110, "std_min_val": 110, "stochast": [110, 118, 120, 124, 163, 165, 234], "belief": [110, 120, 123, 124], "1912": [110, 157, 158, 159], "01603": [110, 157, 158, 159], "softplu": [110, 119, 149, 150, 151], "out_features_valu": 111, "cnn_kwarg": [111, 233], "mlp_kwarg": [111, 113, 233], "duel": [111, 233], "cnn": [111, 233, 243], "06581": 111, "512": [111, 237], "upscal": [112, 126, 127], "tanh_loc": [112, 126, 127], "event_dim": [112, 125, 126], "prevent": [112, 126, 127, 161, 162, 232], "ultim": [112, 126, 127], "unstabl": [112, 126, 127], "poor": [112, 126, 127], "explos": [112, 126, 127], "switch": [112, 126, 127], "sigma": [112, 126, 127, 133, 136, 234], "formula": [112, 126, 127, 153, 161, 162, 234], "lstm_kwarg": 113, "embedd": 113, "lstm": [113, 119], "time_step": 113, "2d": 113, "hidden_s": 113, "input_s": 113, "hidden0_in": 113, "hidden1_in": 113, "hidden0_out": 113, "hidden1_out": 113, "single_bias_last_lay": 114, "layer_class": 114, "layer_kwarg": 114, "perceptron": 114, "seamless": 114, "though": [114, 234], "reshap": [114, 234, 240, 241], "lazylinear": [114, 234, 237, 238, 243], "42": [114, 199, 233, 234, 237], "noisylinear": [114, 117, 226, 233], "noisylazylinear": [114, 226], "At": [115, 234, 236, 237, 238], "mpcplanner": 115, "tensordict_out": [115, 240, 242], "advantage_modul": [116, 152, 234], "temperatur": 116, "mppi": 116, "covari": 116, "william": [116, 164], "aldrich": 116, "theodor": 116, "01149": 116, "hansen": 116, "wang": 116, "su": 116, "04955": 116, "ndunboundedcontinuoustensorspec": [116, 142], "valueoper": [116, 130, 131, 132, 152, 153, 161, 162, 220, 226, 232, 234, 240], "tdlambdaestim": [116, 226], "value_net": [116, 171, 172, 173, 234], "adv": 116, "95": [116, 157, 232, 233, 234, 237], "std_init": [117, 118], "noisi": [117, 118, 128], "term": [117, 118, 151, 152, 201, 233, 234], "matrix": [117, 118], "initialize_paramet": 117, "isol": 117, "1706": 118, "10295v3": 118, "induc": 118, "aid": 118, "descent": 118, "emploi": 118, "scale_map": 119, "biased_softplus_1": 119, "scale_lb": [119, 123, 124], "exp": [119, 151], "module_norm": 119, "decod": [120, 240], "1803": [120, 121], "10122": [120, 121], "rnn_hidden": 120, "latent": 121, "logit": 122, "prob": [122, 234], "excacli": 122, "hidden_dim": [123, 124, 240], "posterior": [123, 158], "rssm": [123, 124, 158], "1811": [123, 124], "04551": [123, 124], "obs_embed": 123, "rnn_hidden_dim": 124, "prior": [124, 158], "dream": 124, "recurr": 124, "tanhtransform": 126, "tensordict_modul": [129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 239, 240], "translat": [129, 137], "td_modul": [129, 130, 131, 132, 137, 139, 140, 142, 143, 240, 243], "get_policy_oper": [130, 131, 132, 205, 213, 240], "alon": [130, 131, 132], "tdmodul": [130, 131, 132, 220], "get_critic_oper": [130, 240], "common_oper": [130, 132], "policy_oper": [130, 131, 132], "value_oper": [130, 131, 132], "probabilisticactor": [130, 131, 132, 165, 226, 232, 234], "tanhnorm": [130, 131, 132, 137, 142, 226, 234, 240, 243], "normalparamwrapp": [130, 131, 132, 137, 142, 226, 240, 243], "spec_hidden": [130, 132], "module_hidden": [130, 132, 240], "td_module_hidden": [130, 132, 240], "spec_act": [130, 132], "module_act": [130, 132, 240], "td_module_act": [130, 131, 132, 240], "dist_in_kei": [130, 131, 132, 137, 142], "sample_out_kei": [130, 132, 142], "distribution_class": [130, 131, 132, 137, 140, 142, 232, 234, 240, 243], "return_log_prob": [130, 131, 132, 140, 142, 234, 240, 243], "module_valu": [130, 131, 132, 240], "td_module_valu": [130, 131, 132, 240], "state_action_valu": [130, 143, 170, 208, 215, 218, 220, 232, 240, 243], "td_clone": [130, 131, 132, 240], "sample_log_prob": [130, 131, 132, 140, 142, 205, 213, 215, 234, 240, 243], "tensordictmodulewrapp": [130, 206, 207, 220], "estim": [130, 131, 132, 152, 153, 161, 162, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "get_value_oper": [130, 131, 132, 205, 213], "action_modul": 131, "state_valu": [131, 132, 143, 171, 172, 173, 174, 175, 176, 178, 179, 205, 213, 218, 232, 234], "safesequenti": [131, 132, 144, 226], "sigma_init": 133, "sigma_end": 133, "annealing_num_step": [133, 135, 136, 232, 233], "po": [133, 135], "epsilon": [133, 135, 136, 166, 233, 234], "know": [133, 135, 163, 195, 232, 233, 234], "recov": [133, 135, 141, 236], "action_spac": [134, 138, 145, 146], "one_hot": [134, 138, 145, 146], "onehotdiscretetensorspec": [134, 138, 145, 146, 226], "nbin": [134, 145], "qvalue_actor": [134, 138, 145, 146], "eps_init": [135, 136, 233], "eps_end": [135, 136, 233], "greedi": [135, 146, 233], "explorative_polici": [135, 136], "0000": [135, 234, 237, 243], "6986": 135, "9366": 135, "5837": 135, "8596": 135, "grad_fn": [135, 243], "addbackward0": [135, 243], "theta": [136, 234, 237], "15": [136, 157, 233, 234, 237, 239, 243], "mu": [136, 234], "dt": [136, 237], "x0": 136, "sigma_min": 136, "n_steps_ann": 136, "ornstein": [136, 232], "uhlenbeck": [136, 232], "ou": [136, 232], "introduc": [136, 240, 241], "auto": [136, 163, 165], "correl": 136, "sort": 136, "prev_nois": 136, "current_sigma": 136, "sqrt": [136, 233], "n_step": [136, 234], "ou_prev_nois": 136, "ou_step": 136, "increas": 136, "anneal": 136, "_ou_prev_nois": 136, "_ou_step": 136, "probabilist": [137, 234, 240, 243], "functional_modul": [137, 138, 139, 142, 143, 145, 146], "make_funct": [137, 138, 139, 142, 143, 145, 146, 147, 233, 240, 243], "functionalmodul": [139, 147], "functionalmodulewithbuff": [139, 147], "character": 139, "overflow": [139, 140], "grucel": [139, 240], "td_fmodul": 139, "td_function": 139, "td_state": 139, "vmap": [139, 142, 233, 240, 243], "ensembl": [139, 163], "params_repeat": 139, "td_vmap": [139, 142], "irrespect": [139, 140], "random_sampl": [139, 140], "tensor_spec": 140, "default_interaction_mod": [140, 240], "distribution_kwarg": [140, 232, 234], "cache_dist": 140, "n_empirical_estim": 140, "probabilistictensordictmodul": [140, 141, 243], "rule": [140, 234, 240], "interaction_mod": 140, "get_dist": [140, 141, 240], "__call__": [140, 230, 240], "suppli": 140, "fist": 140, "set_interaction_mod": 140, "diverg": [140, 158, 161], "partial_toler": [141, 142, 236], "probabilistictensordictsequenti": [141, 240, 243], "tensordictsequenti": [141, 232, 236, 238, 243], "who": [141, 142], "AND": [141, 142], "scan": [141, 142], "tensordictsequenci": 142, "tensordictsequ": 142, "safeprobabilisticmodul": [142, 226], "spec1": 142, "net1": 142, "module1": 142, "td_module1": 142, "spec2": 142, "module2": 142, "td_module2": 142, "custommodul": [143, 148], "cat": [143, 241, 243], "transition_model": 144, "reward_model": 144, "imaginari": 144, "imagin": 144, "get_reward_oper": 144, "get_transition_model_oper": 144, "var_num": [145, 146], "regard": [145, 152, 156, 162, 234, 237, 241], "perspect": [145, 156, 234], "1707": [145, 156, 162, 205, 213], "06887": [145, 156], "mult_one_hot": [145, 146], "customdistributionalqv": 145, "log_softmax": 145, "_functorch": 147, "wrapper_typ": 147, "mislead": 148, "other_kei": 148, "typeerror": 148, "min_val": [149, 151], "bias": [149, 232], "_bia": 149, "invert": [150, 234], "surject": 151, "expln": 151, "biased_softplu": [151, 226], "beggin": 151, "biased_softplus_": 151, "syntax": [151, 232], "condit": [151, 232, 237], "met": [151, 237], "safeprobabilisticsequenti": [152, 153, 161, 162, 164, 206, 207, 226], "advantage_kei": [152, 153, 161, 162, 164, 171, 172, 173, 234], "value_target_kei": [152, 162, 164, 171, 172, 173, 234], "value_target": [152, 162, 164, 171, 172, 173, 234], "entropy_bonu": [152, 153, 161, 162, 234], "samples_mc_entropi": [152, 153, 161, 162], "entropy_coef": [152, 153, 161, 162, 234], "critic_coef": [152, 153, 161, 162, 234], "loss_critic_typ": [152, 153, 161, 162, 164, 234], "smooth_l1": [152, 153, 154, 155, 161, 162, 163, 164, 165, 167, 234], "reli": [152, 232, 234, 237, 242], "1602": 152, "01783v2": 152, "advantage_diff_kei": 152, "advantage_diff": 152, "value_error": [152, 171, 172, 173], "loss_function_typ": 152, "l1": [152, 153, 154, 155, 161, 162, 163, 167, 233], "l2": [152, 153, 154, 155, 158, 159, 161, 162, 163, 167], "tha": 152, "throughout": [152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 234, 242], "essenti": [152, 153, 156, 157, 158, 159, 161, 162, 163, 164, 165, 237, 241], "clip_epsilon": [153, 234], "normalize_advantag": [153, 161, 162], "threshold": [153, 234], "bonu": [153, 161, 162], "favour": [153, 161, 162], "exploratori": [153, 161, 162], "mont": [153, 161, 162], "carlo": [153, 161, 162], "multipli": [153, 161, 162, 163, 165, 232], "loss_funct": [153, 154, 155, 162, 163, 165, 167], "actor_network": [154, 163, 164, 165], "value_network": [154, 155, 156, 165, 171, 172, 173, 234], "delay_actor": [154, 165], "delay_valu": [154, 155, 156, 164, 165], "input_tensordict": [154, 155, 156], "assign": [154, 155, 234, 240], "qvalueactor": [155, 226, 233], "distributionalqvalueactor": [156, 226], "unlik": [156, 162, 240, 241, 243], "disctount": 156, "actor_model": 157, "value_model": [157, 159], "model_based_env": 157, "dreamerenv": [157, 226], "imagination_horizon": 157, "lmbda": [157, 171, 173, 174, 176, 177, 178, 179, 180, 232, 233, 234], "discount_loss": [157, 159], "unrol": 157, "lambda_kl": 158, "lambda_reco": 158, "lambda_reward": 158, "reco_loss": 158, "reward_loss": 158, "free_nat": 158, "delayed_clamp": 158, "global_averag": 158, "kl": [158, 161], "reconstruct": [158, 242], "nat": 158, "clamp": [158, 199, 237], "value_loss": [159, 232], "fake_data": 159, "loss_modul": [160, 166, 199, 219, 220, 230, 234, 241], "dqnloss": [160, 166, 211, 226], "ddpgloss": [160, 166, 209, 220, 226, 243], "sacloss": [160, 166, 217, 226], "td3loss": [160, 166], "value_network_update_interv": 160, "contrast": 160, "soft": [160, 165, 166], "06461": 160, "dtarg": 161, "decrement": 161, "samples_mc_kl": 161, "penalti": 161, "old_polici": 161, "new_polici": 161, "adapt": [161, 232], "thu": 161, "distanc": [161, 167, 170, 171], "apart": 161, "proxim": [162, 205, 213, 234], "optimis": [162, 195, 234], "flavour": [162, 243], "constrain": 162, "clipppoloss": [162, 226, 234], "klpenppoloss": [162, 226], "regularis": 162, "06347": [162, 205, 213], "qvalue_network": [163, 165], "num_qvalue_net": [163, 165], "sub_sample_len": 163, "priotity_kei": [163, 165], "alpha_init": [163, 165], "min_alpha": [163, 165], "max_alpha": [163, 165], "fixed_alpha": [163, 165], "target_entropi": [163, 165], "delay_qvalu": [163, 165], "openreview": [163, 215], "ay8zfzm0tdd": [163, 215], "idea": [163, 230, 233, 241], "subsampl": [163, 190, 230], "connectionist": 164, "1992": 164, "doi": 164, "1007": 164, "bf00992696": 164, "1801": [165, 218], "01290": [165, 218], "applic": [165, 237], "1812": 165, "05905": 165, "qvalue_network_bi": 165, "prod": 165, "n_action": 165, "redqloss": [166, 226], "999": [166, 197, 233], "prev_param": 166, "new_param": 166, "v2": [167, 176, 177, 179, 180, 205, 208, 213, 215, 218], "strict_shap": 167, "view_a": 167, "next_val_kei": 170, "pred_next_v": 170, "usus": 170, "mse": [170, 233], "q_valu": 170, "target_valu": [170, 243], "n_steps_to_next": 170, "value_next_st": 170, "average_ga": [171, 234], "value_kei": [171, 172, 173], "1506": [171, 174, 175, 178], "02438": [171, 174, 175, 178], "exponenti": [171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 197], "propag": [171, 172, 173, 234], "throught": [171, 172, 173], "advang": 171, "gradient_mod": 171, "sign": 171, "unused_arg": 171, "target_param": [171, 172, 173], "relev": [171, 172, 173, 237], "98": [171, 172, 173, 234, 237, 238], "94": [171, 173, 234, 237], "unpack": [171, 172, 173], "average_reward": [172, 173], "next_state_valu": [174, 175, 176, 177, 178, 179, 180, 226], "old_stat": [174, 175, 176, 178, 179], "timestep": [174, 175, 176, 177, 178, 179, 180, 233], "new_stat": [174, 175, 176, 177, 178, 179, 180], "rolling_gamma": [176, 177, 179, 180], "ti": [176, 177, 179, 180], "event": [176, 177, 179, 180], "g1": [176, 177, 179, 180], "g2": [176, 177, 179, 180], "g3": [176, 177, 179, 180], "g4": [176, 177, 179, 180], "v3": [176, 177, 179, 180], "v4": [176, 177, 179, 180, 232, 234, 238], "upcom": [176, 177, 179, 180, 232], "out_file_bas": 181, "skip_reset": 181, "dump": 181, "interv": [181, 182, 191, 201, 233, 237], "center_crop": 182, "make_grid": 182, "video": [182, 195, 224, 233], "Will": 182, "grid": 182, "exp_nam": [183, 184, 185, 186, 187, 220, 232], "log_dir": [183, 184, 186, 189], "minim": [183, 240], "dependeci": 183, "csv": [183, 189], "templat": 184, "tracking_uri": 185, "mlflow": [185, 189], "uri": 185, "datastor": 185, "tb_log": 186, "tensoarboard": 186, "tensorboard": [186, 189, 243], "wandb": [187, 189, 243], "experiment_nam": [188, 189], "uuid": [188, 242], "date": 188, "logger_typ": 189, "logger_nam": 189, "wandb_kwarg": 189, "mlflow_kwarg": 189, "sub_traj_len": 190, "min_sub_traj_len": 190, "full": [190, 232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "20": [190, 232, 233, 234, 237, 238, 242, 243], "register_op": [190, 191, 192, 193, 194, 196, 197, 198, 201, 230], "process_optim_batch": [190, 196, 197, 230], "_process_optim_batch_hook": [190, 230], "clear_cuda": 191, "pre_optim_step": [191, 230], "counter": [192, 230], "log_pbar": [192, 193, 195, 197, 230], "progress": [192, 193, 195, 199, 230, 242], "bar": [192, 193, 195, 199, 230], "count_fram": 192, "pre_steps_log": [192, 193, 230], "lognam": 193, "r_train": 193, "log_reward": 193, "loss_compon": 194, "appl": 194, "omit": [194, 232, 233, 234], "loss_": 194, "optimizer_hook": 194, "loss_actor": [194, 243], "record_interv": [195, 232], "record_fram": [195, 202, 232], "policy_explor": [195, 220, 232], "log_kei": 195, "suffix": 195, "underestim": 195, "suppos": [195, 230, 240, 241, 242], "set_exploration_mod": [195, 226, 232, 233, 234, 243], "reward_evalu": 195, "tensordictreplaybuff": [196, 220, 226, 232, 233], "flatten_tensordict": 196, "max_dim": 196, "rb_trainer": 196, "batch_process": [196, 197, 198, 230], "post_loss": [196, 230], "reward_norm": 197, "update_reward_stat": 197, "normalize_reward": 197, "make_train": [198, 226], "_process_batch_hook": [198, 230], "versatil": 199, "lossmodul": [199, 219, 220], "optim_steps_per_batch": [199, 230], "epoch": [199, 234], "clip_grad_norm": 199, "partial": 199, "deriv": 199, "clip_norm": 199, "progress_bar": 199, "tqdm": [199, 232, 233, 234, 237], "save_trainer_interv": 199, "disk": [199, 230, 233], "10000": [199, 233, 234], "save_trainer_fil": [199, 230], "_datacollector": [201, 206, 207, 220], "update_weights_interv": 201, "sit": [201, 233], "sync": [201, 220, 230, 232, 243], "update_weight": 201, "post_step": [201, 230], "cfg": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224], "dictconfig": [202, 203, 205, 206, 207, 208, 210, 213, 215, 216, 218, 219, 220, 221, 224], "correct": [202, 233, 234], "divid": [202, 232], "unknowingli": 202, "annealing_fram": [202, 232], "init_env_step": [202, 203, 232], "proof_environ": [203, 205, 208, 210, 213, 215, 218, 232], "sta": 203, "ot": 203, "a2closs": [204, 226], "in_keys_actor": [205, 213], "observation_kei": [205, 213, 215, 218], "actorvalueoper": [205, 213, 226, 240], "dummi": [205, 208, 210, 213, 215, 218, 232, 242], "actorcriticoper": [205, 213, 226], "parser_env_arg": [205, 213, 215], "make_ppo_model": [205, 226], "parser_model_args_continu": [205, 213, 215, 218], "cattensor": [205, 208, 213, 215, 218, 232, 233, 236, 237, 242], "hydra": [205, 208, 210, 213, 215, 218], "config_stor": [205, 208, 210, 213, 215, 218], "configstor": [205, 208, 210, 213, 215, 218], "dataclass": [205, 208, 210, 213, 215, 218], "halfcheetah": [205, 208, 213, 215, 218, 232], "config_field": [205, 208, 210, 213, 215, 218], "config_cl": [205, 208, 210, 213, 215, 218], "ppomodelconfig": [205, 213], "envconfig": [205, 208, 210, 213, 215, 218], "make_dataclass": [205, 208, 210, 213, 215, 218], "cls_name": [205, 208, 210, 213, 215, 218], "config_path": [205, 208, 210, 213, 215, 218], "config_nam": [205, 208, 210, 213, 215, 218], "actor_valu": [205, 213], "17": [205, 208, 213, 215, 218, 232, 233, 234, 237, 238, 239], "actor_model_explor": [206, 207, 232], "make_env_kwarg": [206, 207], "actor_net_kwarg": [208, 215, 218], "value_net_kwarg": [208, 218], "modulelist": [208, 215, 218, 240, 243], "ddpgcnnactor": [208, 226], "ddpgmlpactor": [208, 226], "ddpgcnnqnet": [208, 226], "ddpgmlpqnet": [208, 226], "ddpgmodelconfig": 208, "targetnetupdat": [209, 211, 214, 217, 219, 220], "discretemodelconfig": 210, "pong": [210, 242], "v5": [210, 242], "pixels_onli": [210, 232, 233, 242, 243], "210": [210, 237, 242], "160": [210, 233, 237, 242], "ppoloss": [212, 226], "redqloss_deprec": 214, "qvalue_net_kwarg": [215, 218], "qvalu": [215, 218, 233], "redqmodelconfig": 215, "replayargsconfig": 216, "sacmodelconfig": 218, "target_net_updat": 220, "constitu": 220, "learnt": [220, 233, 234], "tempfil": 220, "tensorboardlogg": [220, 226], "egreedywrapp": [220, 226, 233], "env_proof": 220, "obs_spec": 220, "net_valu": 220, "dir": [220, 230], "gettempdir": 220, "argpars": [221, 224], "namespac": [221, 224], "parser": [221, 224], "transformed_env_constructor": [221, 226], "env_kwarg": [222, 223, 232], "num_env_per_collector": [222, 223], "num_collector": [222, 223], "video_tag": 224, "norm_obs_onli": 224, "use_env_cr": 224, "custom_env_mak": 224, "custom_env": 224, "return_transformed_env": 224, "action_dim_gsd": 224, "state_dim_gsd": 224, "batch_dim": [224, 241], "obs_norm_state_dict": 224, "wheter": 224, "maker": 224, "overrid": 224, "randompolici": 226, "asyncdatacollector": 226, "tensordictprioritizedreplaybuff": [226, 243], "prioritizedsampl": [226, 232], "sotr": 226, "binarydiscretetensorspec": 226, "discretetensorspec": 226, "multidiscretetensorspec": 226, "multionehotdiscretetensorspec": 226, "unboundeddiscretetensorspec": [226, 234, 242], "multistep": [226, 232, 233], "tensordictrecord": 226, "videorecord": [226, 234], "step_mdp": [226, 232, 233, 237, 242, 243], "get_available_librari": 226, "braxenv": 226, "braxwrapp": 226, "dmcontrolenv": [226, 232, 236, 242], "dmcontrolwrapp": 226, "jumanjienv": 226, "jumanjiwrapp": 226, "vmasenv": 226, "vmaswrapp": 226, "actorcriticwrapp": [226, 240], "additivegaussianwrapp": 226, "ornsteinuhlenbeckprocesswrapp": [226, 232], "is_tensordict_compat": 226, "ensure_tensordict_compat": 226, "qvaluehook": 226, "distributionalqvaluehook": 226, "duelingcnndqnet": [226, 233], "distributionaldqnnet": 226, "lstmnet": 226, "dreameractor": 226, "obsencod": 226, "obsdecod": 226, "rssmprior": 226, "rssmposterior": 226, "reset_nois": 226, "cemplann": 226, "mpcplannerbas": 226, "mppiplann": 226, "independentnorm": 226, "truncatednorm": 226, "tanhdelta": [226, 232], "onehotcategor": 226, "inv_softplu": 226, "distributionaldqnloss": [226, 233], "reinforceloss": 226, "dreameractorloss": 226, "dreamermodelloss": 226, "dreamervalueloss": 226, "gae": [226, 234], "tdestim": 226, "generalized_advantage_estim": 226, "vec_generalized_advantage_estim": 226, "vec_td_lambda_return_estim": 226, "vec_td_lambda_advantage_estim": [226, 232, 233], "td_lambda_return_estim": 226, "td_lambda_advantage_estim": 226, "td_advantage_estim": 226, "distance_loss": 226, "hold_out_net": [226, 232], "hold_out_param": 226, "softupd": [226, 232], "hardupd": [226, 232], "batchsubsampl": [226, 230], "clearcudacach": 226, "countframeslog": 226, "logreward": [226, 230], "optimizerhook": 226, "replaybuffertrain": [226, 230], "rewardnorm": 226, "selectkei": [226, 230], "trainerhookbas": [226, 230], "updateweight": [226, 230], "make_a2c_loss": 226, "make_a2c_model": 226, "make_collector_offpolici": 226, "make_collector_onpolici": 226, "make_ddpg_actor": [226, 232], "make_ddpg_loss": 226, "make_dqn_actor": 226, "make_dqn_loss": 226, "make_ppo_loss": 226, "make_redq_loss": 226, "make_redq_model": 226, "make_replay_buff": [226, 232], "make_sac_loss": 226, "make_sac_model": 226, "make_target_updat": 226, "parallel_env_constructor": [226, 232], "sync_async_collector": 226, "sync_sync_collector": 226, "correct_for_frame_skip": 226, "get_stats_random_rollout": 226, "csvlogger": 226, "mlflowlogg": 226, "wandblogg": 226, "get_logg": 226, "generate_exp_nam": 226, "journei": 227, "guid": [227, 232, 233], "textbook": 227, "highlight": 227, "readi": [227, 234, 236], "ever": 227, "bump": 227, "think": [227, 234, 242], "benefit": 227, "submit": [227, 243], "pr": 227, "outer": [230, 232, 242], "believ": 230, "scheme": [230, 242], "substenti": 230, "_pre_steps_log_hook": 230, "_pre_optim_hook": 230, "sub_batch": 230, "_post_loss_hook": 230, "_post_optim_hook": 230, "post_optim": 230, "_post_optim_log": 230, "post_optim_log": 230, "_post_steps_hook": 230, "_post_steps_log_hook": 230, "post_steps_log": 230, "comment": [230, 243], "categori": 230, "extens": 230, "reserv": 230, "three": [230, 233, 234, 237], "logginghook": 230, "logging_hook": 230, "save_dict": 230, "some_valu": 230, "els": [230, 232, 233, 234, 237, 238], "torchsnapshot": 230, "ckpt_backend": 230, "pt": [230, 233, 238], "filepath": 230, "select_kei": 230, "save_train": 230, "load_from_fil": 230, "perfectli": [230, 232, 237], "intern": 231, "click": [232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "author": [232, 234, 237], "vincent": [232, 234, 237], "moen": [232, 234, 237], "tutori": [232, 233, 235, 236, 237, 238, 239, 240, 242], "topic": 232, "asid": [232, 240], "strongli": 232, "familiar": [232, 233, 242], "suffici": [232, 233], "transpar": [232, 233], "understood": [232, 233], "sota": [232, 233, 243], "rather": [232, 233, 234], "illustr": [232, 233], "deepcopi": 232, "matplotlib": [232, 233, 234, 237, 242], "pyplot": [232, 233, 234, 237, 242], "plt": [232, 233, 234, 237, 242], "environmet": 232, "remaind": 232, "easier": 232, "focu": [232, 234], "funciton": 232, "env_librari": 232, "env_task": 232, "env_arg": 232, "elif": [232, 233], "notimplementederror": 232, "friendli": 232, "special": [232, 240, 242], "torchr": 232, "rescal": 232, "presum": 232, "goe": [232, 233, 234, 242], "leav": [232, 237], "make_transformed_env": 232, "reward_sc": 232, "double_to_float_list": 232, "double_to_float_inv_list": 232, "dmcontrol": 232, "downstream": 232, "get_env_stat": 232, "proof_env": 232, "transform_state_dict": 232, "significantli": [232, 233], "leverag": [232, 242], "env_per_collector": 232, "make_t_env": 232, "copy_": 232, "parallel_env": [232, 242, 243], "maxim": 232, "recal": [232, 234], "flow": [232, 234], "materi": 232, "small": [232, 234, 242], "env_spec": 232, "actor_net": [232, 234], "num_lay": 232, "actor_modul": [232, 243], "q_net": 232, "qnet": 232, "frequenc": 232, "make_record": 232, "recorder_obj": 232, "flavor": 232, "likelihood": 232, "circular": 232, "pick": [232, 233], "arrai": 232, "buffer_s": [232, 233], "prb": 232, "buffer_scratch_dir": 232, "adjust": [232, 237], "magnitud": 232, "becom": [232, 242], "1000000": 232, "device_count": [232, 233, 238, 242], "500k": 232, "meaning": 232, "5000": [232, 234], "myopic": [232, 233], "n_steps_forward": 232, "lr": [232, 233, 234, 237], "5e": 232, "weight_decai": 232, "utd": 232, "update_to_data": 232, "tau": [232, 233], "005": [232, 233], "tmp": [232, 233, 238], "semin": 232, "qnet_target": 232, "tight": 232, "natur": 232, "async": [232, 243], "seamlessli": [232, 237], "3018685293": 232, "adam": [232, 233, 234, 237], "optimizer_actor": 232, "optimizer_qnet": 232, "total_collection_step": 232, "scheduler1": 232, "lr_schedul": [232, 234, 237], "cosineannealinglr": [232, 234, 237], "t_max": 232, "scheduler2": 232, "temporarili": 232, "explain": [232, 238], "Then": [232, 234, 236], "fed": 232, "hood": 232, "metadata": [232, 234, 237, 242], "explicitli": [232, 241], "coupl": [232, 237], "earli": [232, 243], "rewards_ev": 232, "norm_factor_train": 232, "collected_fram": 232, "pbar": [232, 233, 234, 237], "r0": 232, "numel": [232, 234, 238], "filter": 232, "current_fram": [232, 233], "sampled_tensordict": 232, "backprop": 232, "next_valu": [232, 233, 237], "value_est": 232, "pow": [232, 233], "sampled_tensordict_actor": 232, "actor_loss": 232, "p_in": 232, "p_dest": 232, "zip": [232, 235], "b_in": 232, "b_dest": 232, "td_record": 232, "r_evalu": 232, "set_descript": [232, 233, 234, 237], "4f": [232, 233, 234, 237], "2500": 232, "00": [232, 233, 234, 237, 238], "576": [232, 237], "83it": [232, 233], "memmapstorag": [232, 233, 238], "057220458984375": 232, "mb": [232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243], "002384185791015625": 232, "0095367431640625": 232, "1621246337890625": 232, "steps_to_next_ob": [232, 233], "019073486328125": 232, "4567": 232, "7129": 232, "3348": 232, "40": [232, 233, 234, 237], "05": [232, 233, 234, 237], "272": [232, 237], "60it": [232, 234, 237], "4025": 232, "04": [232, 233, 234, 237, 238, 239], "60": [232, 233, 234, 237, 243], "1500": [232, 237], "256": [232, 233, 234, 237], "62it": [232, 233, 237], "8219": 232, "80": [232, 234, 237], "316": [232, 237], "06it": 232, "9432": 232, "07": [232, 233, 237, 239], "317": [232, 237], "05it": [232, 234], "1043": 232, "09": [232, 233, 234, 237], "plot": [232, 233, 234, 237], "mention": [232, 233, 242], "figur": [232, 233, 234, 237, 240, 242], "label": [232, 233, 241], "legend": [232, 233], "xlabel": [232, 233, 237], "ylabel": [232, 233], "tight_layout": [232, 233], "250": [232, 234, 237], "100000": [232, 233], "batch_size_traj": 232, "simplic": [232, 234, 238, 240], "td_lambda": 232, "roughli": [232, 243], "four": [232, 237], "big": [232, 233, 234, 242], "incompat": [232, 241], "rand_idx": 232, "_batch_siz": [232, 233], "00152587890625": 232, "1444091796875": 232, "0476837158203125": 232, "24249267578125": 232, "19073486328125": 232, "3814697265625": 232, "titl": [232, 233, 234, 237], "labmda": 232, "minut": [232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "19": [232, 233, 234, 237, 239], "345": [232, 237, 239], "23": [232, 237, 238], "coding_ddpg": [232, 239], "jupyt": [232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "ipynb": [232, 233, 234, 236, 237, 238, 240, 241, 242, 243], "galleri": [232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "sphinx": [232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243], "cartpol": [233, 242], "tabl": 233, "highest": 233, "discretiz": 233, "amort": [233, 234], "seen": 233, "past": 233, "grayscal": [233, 242], "esitm": 233, "ipython": [233, 237], "get_funct": [233, 240], "is_notebook": 233, "shell": 233, "get_ipython": 233, "__class__": 233, "zmqinteractiveshel": 233, "qtconsol": 233, "terminalinteractiveshel": 233, "nameerror": 233, "interpret": 233, "hyperparam": 233, "hopefulli": 233, "sentit": 233, "variat": 233, "2e": [233, 237], "harder": [233, 243], "n_optim": 233, "n_worker": 233, "smooth": 233, "loos": [233, 234], "eps_greedy_v": 233, "eps_greedy_val_env": 233, "predefin": [233, 234], "init_bia": 233, "500000": 233, "techin": 233, "dummy_env": 233, "9927790760993958": 233, "0761055275797844": 233, "pole": 233, "un": 233, "actuat": 233, "cart": 233, "frictionless": 233, "upright": [233, 242], "balanc": [233, 242], "pixels_sav": 233, "eval_rollout": [233, 234], "imageio": 233, "mimwrit": 233, "cartpole_random": 233, "mp4": 233, "fp": 233, "480": [233, 237, 238], "360": [233, 237], "trick": 233, "num_ob": 233, "make_model": 233, "output_s": 233, "unflatten_kei": 233, "fairli": 233, "params_target": 233, "to_tensordict": [233, 241], "actor_explor": 233, "params_flat": 233, "flatten_kei": 233, "params_target_flat": 233, "600": [233, 237], "bootstrap": 233, "value_next_step": 233, "not_termin": 233, "data_collector": 233, "traj_lengths_ev": 233, "grad_val": 233, "traj_length": 233, "mavg": 233, "traj_count": 233, "prev_traj_count": 233, "enough": 233, "sampled_data": 233, "sampled_data_out": 233, "tdstep": 233, "exp_valu": 233, "mse_loss": 233, "gv": 233, "clip_grad_value_": 233, "set_": 233, "clear_output": [233, 237], "gcf": [233, 237], "clf": 233, "figsiz": [233, 234, 237], "subplot": [233, 234, 237, 242], "traj": 233, "savefig": 233, "dqn_td0": 233, "png": 233, "41": [233, 234, 237], "98it": [233, 234], "tmp1kim8uuw": 233, "00762939453125": 233, "tmpkalluq7g": 233, "003814697265625": [233, 238], "tmpuk0d2i9t": 233, "0019073486328125": 233, "tmpvrfonqs3": 233, "000476837158203125": 233, "tmpby7ytejl": 233, "tmpv4a95zx0": 233, "31": [233, 234, 237, 238], "25": [233, 234, 237], "tmp3brj8e5t": 233, "tmps02f3s1x": 233, "tmpmuluh70g": 233, "tmpjku2jjh5": 233, "tmp0dmt0r71": 233, "96": [233, 234, 237, 238], "61": [233, 237, 238], "55it": [233, 234, 237], "9671": 233, "7752": 233, "02": [233, 234, 237, 238, 239], "26": [233, 234, 237, 238], "59": [233, 234, 237, 239], "00it": 233, "68": [233, 234, 237, 238], "2490": 233, "7639": 233, "70it": 233, "9833": [233, 243], "0891": 233, "192": [233, 237], "63": [233, 237, 238], "15it": 233, "5763": 233, "1126": 233, "45": [233, 234, 237], "224": [233, 237], "33it": [233, 234], "7546": 233, "4040": 233, "51": [233, 234, 237], "62": [233, 234, 237], "91it": 233, "5211": 233, "3806": 233, "58": [233, 234, 237, 238], "288": [233, 237], "71it": 233, "6591": [233, 237], "3512": 233, "320": [233, 237, 242], "0368": 233, "4215": [233, 237], "70": [233, 234, 237, 238], "352": [233, 237], "22it": 233, "28": [233, 234, 237, 239], "6672": 233, "8625": 233, "77": [233, 237, 238], "384": [233, 237], "66it": [233, 234, 237], "6290": 233, "9888": 233, "83": [233, 237, 238], "416": [233, 237], "2413": 233, "0871": 233, "90": [233, 234, 237], "448": [233, 237], "39": [233, 234, 237, 238], "88it": 233, "4658": [233, 237], "4223": [233, 237], "59it": [233, 234, 237], "0318": 233, "7145": [233, 237], "512it": 233, "37": [233, 234, 237], "94it": [233, 237], "5967": [233, 237], "4180": 233, "imshow": [233, 242], "imread": 233, "axi": 233, "1499": 233, "traj_lengths_train": 233, "saved_results_td0": 233, "22": [233, 234, 237, 239], "entir": [233, 234], "capac": [233, 234], "smooth_l1_loss": 233, "clip_grad_norm_": [233, 234, 237], "dqn_tdlambda": 233, "47": [233, 234, 237], "84it": 233, "36it": [233, 234], "tmpyyge86th": 233, "0001220703125": 233, "tmpu02ka9oh": 233, "0078125": 233, "tmpcvzdzqh2": 233, "00390625": 233, "tmpg_xawr51": 233, "001953125": 233, "tmpmqpepphl": 233, "00048828125": 233, "tmp4s2fc5q8": 233, "103515625e": 233, "tmpn6u15wup": 233, "tmpyf922h1g": 233, "tmpnrqfal56": 233, "tmpo_2pv6k8": 233, "tmpihpz677f": 233, "tmpn12hnvd4": 233, "76": [233, 234, 237], "02it": 233, "57": [233, 234, 237, 238], "53it": [233, 237], "143": [233, 237], "8661": 233, "1244": 233, "55": [233, 234, 237], "63it": [233, 237], "1141": 233, "1676": 233, "56": [233, 234, 237, 238], "41it": 233, "1587": [233, 237], "4607": 233, "96it": [233, 237], "9794": 233, "4962": 233, "5329": 233, "9830": 233, "81it": 233, "4883": [233, 237], "5760": 233, "30it": [233, 234], "9459": 233, "3233": 233, "72it": 233, "3481": [233, 237], "2976": [233, 237], "50it": 233, "48": [233, 234, 237, 238], "8583": 233, "1068": [233, 237], "85it": 233, "0279": 233, "4311": 233, "95it": [233, 237], "1714": 233, "1164": 233, "49": [233, 234, 237, 238], "7322": 233, "4641": 233, "2233": 233, "3710": 233, "36": [233, 234, 237], "8476": 233, "0525": [233, 237], "saved_results_tdlambda": 233, "fewer": 233, "load_td0": 233, "load_tdlambda": 233, "frames_td0": 233, "frames_tdlambda": 233, "evals_td0": 233, "evals_tdlambda": 233, "mavgs_td0": 233, "mavgs_tdlambda": 233, "losses_td0": 233, "losses_tdlambda": 233, "values_td0": 233, "values_tdlambda": 233, "grad_vals_td0": 233, "grad_vals_tdlambda": 233, "traj_lengths_td0": 233, "traj_lengths_tdlambda": 233, "traj_count_td0": 233, "traj_count_tdlambda": 233, "td0": 233, "greatli": 233, "nth": 233, "noticebli": 233, "collectorclass": 233, "till": 233, "worst": 233, "accuraci": 233, "fanci": 233, "778": [233, 237, 239], "264": [233, 237], "coding_dqn": [233, 239], "demonstr": [234, 237, 240, 242], "talk": 234, "repetit": 234, "six": 234, "consum": 234, "sophist": 234, "invent": 234, "wheel": 234, "brief": [234, 242], "overview": [234, 243], "pessimist": 234, "theta_k": 234, "frac": 234, "pi_": 234, "ratio": 234, "exceed": 234, "discourag": 234, "indispens": 234, "loader": 234, "analyz": 234, "lingua": 234, "franca": 234, "descript": 234, "defaultdict": [234, 237], "normalparamextractor": 234, "samplerwithoutreplac": 234, "stepcount": [234, 243], "rest": [234, 243], "has_cuda": [234, 242], "3e": 234, "max_grad_norm": 234, "ourselv": [234, 242], "benefici": 234, "errat": 234, "hamper": 234, "reactiv": 234, "group": [234, 240], "xy": 234, "budget": 234, "50_000": 234, "sub_batch_s": 234, "num_epoch": 234, "intro": 234, "entropy_ep": 234, "previous": [234, 242], "generalist": 234, "interchang": [234, 238], "panel": 234, "charact": 234, "inverteddoublependulum": 234, "transmit": 234, "stai": 234, "thumb": 234, "measur": 234, "supplementari": [234, 242], "told": 234, "did": [234, 242], "stringent": 234, "nevertheless": 234, "concret": 234, "everyth": 234, "continuousbox": [234, 237, 242, 243], "environemnt": 234, "confid": 234, "succeed": [234, 237], "pack": [234, 242], "ran": 234, "mutli": 234, "boundari": 234, "f_": 234, "text": 234, "mu_": 234, "difficulti": [234, 242], "brought": 234, "scrictli": 234, "d_ob": 234, "d_action": 234, "extract": [234, 240], "carrier": 234, "policy_modul": 234, "That": 234, "said": 234, "value_modul": [234, 243], "briefli": 234, "simplest": [234, 242], "oblivi": 234, "refil": 234, "mandatori": [234, 237], "conveni": [234, 237, 240, 241], "easiest": 234, "hide": 234, "awai": [234, 241], "mathemat": 234, "deal": [234, 241], "tradeoff": 234, "eval_str": 234, "tensordict_data": 234, "data_view": 234, "subdata": 234, "loss_val": 234, "loss_valu": [234, 243], "loss_object": 234, "loss_crit": 234, "loss_entropi": 234, "cum_reward_str": 234, "stepcount_str": 234, "param_group": 234, "lr_str": 234, "nice": 234, "noth": 234, "50000": 234, "tensorstorag": 234, "242": [234, 237], "54it": 234, "110": [234, 237], "8067": 234, "0834": 234, "0003": [234, 237], "243": [234, 237], "77it": 234, "1292": 234, "3000": 234, "245": [234, 237], "42it": 234, "1580": 234, "4000": 234, "49it": 234, "1792": 234, "13it": [234, 237], "6000": 234, "246": [234, 237], "34it": 234, "1881": 234, "7000": 234, "54": [234, 237, 238], "1517": 234, "8000": 234, "1885": 234, "9000": 234, "1957": 234, "247": [234, 237], "28it": [234, 237], "2052": [234, 237], "11000": 234, "248": [234, 237], "120": [234, 237], "1396": 234, "2149": [234, 237], "12000": 234, "10it": 234, "2286": [234, 237], "13000": 234, "52": [234, 237, 238], "29": [234, 237], "37it": [234, 237], "2219": 234, "14000": 234, "38it": [234, 237], "2234": 234, "15000": 234, "249": [234, 237], "09it": 234, "2247": 234, "0002": [234, 237], "16000": 234, "12it": [234, 237], "2132": 234, "17000": 234, "44it": 234, "2250": [234, 237], "18000": 234, "2280": [234, 237], "19000": 234, "2227": 234, "20000": 234, "58it": [234, 237], "2277": [234, 237], "21000": 234, "29it": [234, 237], "129": [234, 237], "5715": 234, "2248": 234, "22000": 234, "53": [234, 237, 239, 240], "31it": 234, "2347": 234, "23000": 234, "2359": 234, "24000": 234, "2388": 234, "25000": 234, "01it": 234, "2326": 234, "26000": 234, "2135": 234, "27000": 234, "24it": 234, "2376": 234, "28000": 234, "1710": 234, "29000": 234, "46it": [234, 237], "2320": 234, "30000": 234, "74it": 234, "2464": 234, "31000": 234, "35it": 234, "148": [234, 237], "0229": 234, "2365": [234, 237], "32000": 234, "25it": 234, "66": [234, 237, 238], "33000": 234, "69it": 234, "2323": [234, 237], "34000": 234, "2362": 234, "35000": 234, "21": [234, 236, 237], "68it": 234, "2263": 234, "72": [234, 237, 238], "36000": 234, "251": [234, 237], "2369": 234, "74": [234, 237], "37000": 234, "2426": [234, 237], "38000": 234, "2587": [234, 237], "78": [234, 237], "39000": 234, "43": [234, 237, 238], "2627": 234, "40000": 234, "19it": 234, "2598": [234, 237], "82": [234, 237], "41000": 234, "40it": 234, "157": [234, 237], "0721": 234, "2563": 234, "84": [234, 237], "42000": 234, "87it": 234, "2562": 234, "86": [234, 237, 238], "43000": 234, "2608": 234, "88": [234, 237, 238], "44000": 234, "57it": [234, 237], "2607": 234, "45000": 234, "2504": 234, "92": [234, 237, 238], "46000": 234, "18it": 234, "2624": 234, "47000": 234, "2603": 234, "48000": 234, "2615": 234, "49000": 234, "14it": [234, 237], "2565": 234, "cap": 234, "bit": 234, "807": [234, 239], "coding_ppo": [234, 239], "tutorials_python": 235, "tutorials_jupyt": 235, "distinct": 236, "humanoid": [236, 242], "walk": [236, 242], "env1": 236, "env1_obs_kei": 236, "observation_stand": 236, "env2": 236, "env2_obs_kei": 236, "observation_walk": 236, "tdreset1": 236, "tdreset2": 236, "tdreset": 236, "67": [236, 237, 238], "backbon": [236, 243], "policy_common": 236, "policy_stand": 236, "policy_walk": 236, "seq": 236, "But": 236, "env1_mak": 236, "env2_mak": 236, "_single_task": 236, "td_rollout": 236, "shown": 236, "023": [236, 239], "multi_task": [236, 239], "ground": 237, "freeli": 237, "inspir": 237, "sep": 237, "touch": 237, "sens": 237, "undertaken": 237, "stage": 237, "challeng": [237, 238], "wider": 237, "algebra": [237, 241], "acquaint": 237, "surpris": 237, "avenu": 237, "unsqueezetransform": 237, "default_x": 237, "pi": 237, "default_i": 237, "_set_se": 237, "deleg": 237, "rearrang": 237, "todo": 237, "angular": 237, "new_th": 237, "plu": 237, "new_thdot": 237, "addition": 237, "sin": 237, "co": 237, "angl": 237, "punish": 237, "upward": 237, "thdot": 237, "g_forc": 237, "max_torqu": 237, "angle_norm": 237, "001": 237, "max_spe": 237, "zeros_lik": [237, 240], "albeit": 237, "is_empti": 237, "gen_param": 237, "high_th": 237, "high_thdot": 237, "low_th": 237, "low_thdot": 237, "rng": 237, "observationspec": 237, "trail": 237, "pollut": 237, "characterist": 237, "irrelev": 237, "_make_spec": 237, "td_param": 237, "make_composite_from_td": 237, "commong": 237, "pseudo": 237, "pendulumenv": 237, "homonym": 237, "render_mod": 237, "human": 237, "rgb_arrai": 237, "render_fp": 237, "classmethod": 237, "cl": 237, "random_": 237, "staticmethod": 237, "complic": [237, 240, 241, 242], "mdp": 237, "convin": 237, "simplifi": 237, "simple_rollout": 237, "_data": 237, "unexplor": 237, "assumpt": 237, "showcas": 237, "20_000": 237, "init_td": 237, "traj_return": 237, "gn": 237, "last_reward": 237, "is_ipython": 237, "inlin": 237, "get_backend": 237, "ion": 237, "625": 237, "9266": 237, "8855": 237, "21it": 237, "1505": 237, "6494": 237, "425": 237, "47it": 237, "4027": 237, "1463": 237, "783": 237, "8107": 237, "6160": 237, "9038": 237, "3170": 237, "538": 237, "4996": 237, "2572": 237, "4428": 237, "1989": 237, "322": 237, "65it": 237, "0616": 237, "4965": 237, "6983": 237, "4596": 237, "562": 237, "5580": 237, "3342": 237, "65": [237, 238], "1839": 237, "1143": 237, "67it": 237, "7682": 237, "7979": 237, "0317": 237, "4728": 237, "218": 237, "1692": 237, "9600": 237, "0109": 237, "0531": 237, "781": 237, "9979": 237, "9649": 237, "8525": 237, "9764": 237, "109": 237, "64it": 237, "5275": 237, "1344": 237, "9773": 237, "5141": 237, "8143": 237, "1775": 237, "2208": 237, "6846": 237, "8642": 237, "1940": 237, "542": 237, "6518": 237, "5410": 237, "2140": 237, "1722": 237, "921": 237, "2054": 237, "5124": 237, "424": 237, "4949": 237, "6917": 237, "75": [237, 238], "6888": 237, "9270": 237, "772": 237, "8562": 237, "1902": 237, "8441": 237, "7674": 237, "0118": 237, "2092": 237, "1204": 237, "067": 237, "1962": 237, "9235": 237, "71": [237, 238], "2727": 237, "8757": 237, "4235": 237, "5884": 237, "779": 237, "4090": 237, "7606": 237, "2187": 237, "6999": 237, "2978": 237, "4193": 237, "815": 237, "1240": 237, "7324": 237, "92it": 237, "0441": 237, "0848": 237, "319": 237, "27it": 237, "0140": 237, "5505": 237, "367": 237, "39it": 237, "6425": 237, "2510": 237, "7728": 237, "0743": 237, "52it": 237, "1644": 237, "6137": 237, "8888": 237, "583": 237, "8059": 237, "7800": 237, "0819": 237, "2592": 237, "691": 237, "0502": 237, "2924": 237, "054": 237, "8846": 237, "1838": 237, "5595": 237, "1471": 237, "7703": 237, "6139": 237, "219": 237, "1751": 237, "6989": 237, "118": 237, "4951": 237, "5348": 237, "398": 237, "9085": 237, "468": 237, "5493": 237, "6267": 237, "6030": 237, "4769": 237, "569": 237, "6288": 237, "2236": 237, "619": 237, "5154": 237, "9968": 237, "6179": 237, "7323": 237, "2981": 237, "3913": 237, "034": 237, "5014": 237, "3918": 237, "2370": 237, "3614": 237, "7929": 237, "8821": 237, "3610": 237, "1901": 237, "915": 237, "2983": 237, "7640": 237, "5792": 237, "3962": 237, "075": 237, "3180": 237, "1949": 237, "502": 237, "1380": 237, "5574": 237, "253": 237, "8458": 237, "7408": 237, "937": 237, "69": 237, "5840": 237, "4463": 237, "5086": 237, "5344": 237, "795": 237, "3694": 237, "8463": 237, "287": 237, "3028": 237, "2446": 237, "73": 237, "4761": 237, "7600": 237, "627": 237, "3842": 237, "4801": 237, "816": 237, "1771": 237, "9593": 237, "886": 237, "2737": 237, "9358": 237, "678": 237, "3900": 237, "6653": 237, "292": 237, "2661": 237, "8185": 237, "93": [237, 238], "79": [237, 238], "4661": 237, "8268": 237, "3443": 237, "6326": 237, "5140": 237, "6207": [237, 243], "892": 237, "7227": 237, "5777": 237, "064": 237, "7155": 237, "5219": 237, "97": 237, "4743": 237, "4839": 237, "515": 237, "85": [237, 238], "5471": 237, "3322": 237, "751": 237, "3552": 237, "1040": 237, "2691": 237, "0538": 237, "739": 237, "1406": 237, "6926": 237, "241": 237, "89": [237, 238], "1092": 237, "7926": 237, "091": 237, "3232": 237, "6219": 237, "91": [237, 238], "1943": 237, "8801": 237, "2436": 237, "1146": 237, "385": 237, "2468": 237, "6970": 237, "3437": 237, "7919": 237, "0362": 237, "4871": 237, "134": 237, "9510": 237, "6218": 237, "873": 237, "1963": 237, "7772": 237, "586": 237, "6380": 237, "4336": 237, "8875": 237, "7949": 237, "6233": 237, "2998": 237, "254": 237, "1574": 237, "845": 237, "102": 237, "7564": 237, "7148": 237, "127": 237, "103": 237, "8592": 237, "6204": 237, "104": 237, "7275": 237, "2646": 237, "105": 237, "5618": 237, "6144": 237, "106": 237, "3800": 237, "7663": 237, "107": 237, "8524": 237, "4591": 237, "108": 237, "0510": 237, "3500": 237, "1634": 237, "5899": 237, "3976": 237, "7117": 237, "718": 237, "111": 237, "3677": 237, "6074": 237, "112": 237, "8793": 237, "113": 237, "7407": 237, "3517": 237, "354": 237, "56it": 237, "4357": 237, "0914": 237, "401": 237, "115": 237, "7790": 237, "6851": 237, "712": 237, "116": 237, "61it": 237, "0181": 237, "6984": 237, "117": 237, "1435": 237, "0245": 237, "1855": 237, "2904": 237, "119": 237, "0618": 237, "9499": 237, "8561": 237, "4175": 237, "121": [237, 242], "1193": 237, "1237": 237, "122": [237, 242], "4464": 237, "2677": 237, "123": 237, "6946": 237, "5547": 237, "124": 237, "8347": 237, "4730": 237, "125": 237, "8955": 237, "126": 237, "4709": 237, "8433": 237, "8304": 237, "1127": 237, "7206": 237, "3253": 237, "1534": 237, "0756": 237, "0648": 237, "131": 237, "9925": 237, "5363": 237, "347": 237, "132": 237, "2872": 237, "2223": 237, "133": 237, "6648": 237, "6645": 237, "7473": 237, "3588": 237, "135": 237, "6368": 237, "9012": 237, "136": 237, "4529": 237, "7480": 237, "137": 237, "3097": 237, "138": 237, "7727": 237, "8002": 237, "139": 237, "2167": 237, "5346": 237, "140": 237, "4297": 237, "3134": 237, "141": 237, "1542": 237, "4714": 237, "142": 237, "3136": 237, "1843": 237, "1548": 237, "2351": 237, "086": 237, "144": 237, "0157": 237, "1632": 237, "966": 237, "145": 237, "9751": 237, "8632": 237, "968": 237, "146": 237, "7366": 237, "147": 237, "3489": 237, "7309": 237, "1923": 237, "7081": 237, "149": 237, "3550": 237, "1679": 237, "164": 237, "150": 237, "5629": 237, "151": 237, "1566": 237, "1028": 237, "152": 237, "3382": 237, "8772": 237, "153": 237, "8698": 237, "7157": 237, "154": 237, "8397": 237, "1144": 237, "155": 237, "7683": 237, "2360": 237, "156": 237, "7235": 237, "4874": 237, "2552": 237, "3192": 237, "158": 237, "4812": 237, "2567": 237, "896": 237, "159": 237, "3104": 237, "4942": 237, "4804": 237, "7292": 237, "161": 237, "5796": 237, "2654": 237, "162": 237, "8805": 237, "2816": 237, "163": [237, 238], "8147": 237, "6485": 237, "1319": 237, "165": 237, "4244": 237, "0058": 237, "166": 237, "1652": 237, "3788": 237, "635": 237, "167": 237, "4956": 237, "168": 237, "6229": 237, "3328": 237, "169": 237, "8273": 237, "7098": 237, "188": 237, "170": 237, "9447": 237, "1581": 237, "053": 237, "171": 237, "0189": 237, "668": 237, "172": 237, "0278": 237, "4442": 237, "173": 237, "7062": 237, "3810": [237, 243], "174": 237, "8141": 237, "1629": 237, "175": 237, "7237": 237, "4486": 237, "176": 237, "3132": 237, "2596": 237, "177": 237, "9584": 237, "0491": 237, "178": 237, "9415": 237, "6082": 237, "179": 237, "1820": 237, "2659": 237, "180": 237, "1256": 237, "0231": 237, "383": 237, "181": 237, "0764": 237, "2045": 237, "182": 237, "1614": 237, "8745": 237, "183": 237, "1001": 237, "4028": 237, "897": 237, "184": 237, "0939": 237, "7421": 237, "403": [237, 238, 239], "185": 237, "5489": 237, "1487": 237, "186": 237, "2853": 237, "8743": 237, "187": 237, "9386": 237, "7690": 237, "5815": 237, "189": 237, "7150": 237, "2569": 237, "190": 237, "8699": 237, "2972": 237, "191": 237, "9955": 237, "1081": 237, "0650": 237, "2338": 237, "193": 237, "7617": 237, "9620": 237, "194": 237, "5403": 237, "9385": 237, "195": 237, "2710": 237, "6990": 237, "196": 237, "8874": 237, "9997": 237, "197": 237, "0110": 237, "2850": 237, "859": 237, "198": 237, "2655": 237, "2121": 237, "199": 237, "4980": 237, "3311": 237, "3305": 237, "7865": 237, "201": 237, "9042": 237, "4459": 237, "202": 237, "7960": 237, "4873": 237, "203": 237, "1201": 237, "1649": 237, "204": 237, "9688": 237, "0669": 237, "205": 237, "7162": 237, "206": 237, "1441": [237, 243], "0293": 237, "207": 237, "2186": 237, "3986": 237, "374": 237, "208": 237, "0562": 237, "2101": 237, "209": 237, "0913": 237, "5205": 237, "7103": 237, "3482": 237, "211": 237, "2156": 237, "0283": 237, "212": 237, "3044": 237, "4783": 237, "268e": 237, "213": 237, "5168": 237, "5330": 237, "214": 237, "1426": 237, "1175": 237, "393": 237, "215": 237, "3528": 237, "1985": 237, "216": 237, "5549": 237, "0121": 237, "217": 237, "2009": 237, "4451": 237, "496": 237, "4562": 237, "6786": 237, "1657": 237, "2874": 237, "312": 237, "220": 237, "1303": 237, "3616": 237, "221": 237, "0414": 237, "1702": 237, "222": 237, "8627": 237, "9349": 237, "223": 237, "0825": 237, "4257": 237, "9939": 237, "7512": 237, "225": 237, "9160": 237, "226": 237, "9857": 237, "3414": 237, "983": 237, "227": 237, "1241": 237, "8157": 237, "666": 237, "228": 237, "0705": 237, "443": 237, "229": 237, "9893": 237, "3101": 237, "230": 237, "8796": 237, "231": 237, "5865": 237, "232": 237, "8679": 237, "8119": 237, "233": 237, "0144": 237, "7201": 237, "234": 237, "0515": 237, "9970": 237, "235": 237, "8066": 237, "3375": 237, "236": 237, "9807": 237, "7684": 237, "237": 237, "5995": 237, "2259": 237, "238": 237, "7022": 237, "3968": 237, "239": 237, "3982": 237, "1269": 237, "240": [237, 242, 243], "0225": 237, "4321": 237, "9207": 237, "0471": 237, "6985": 237, "6172": 237, "884": 237, "5946": 237, "6090": 237, "1029": 237, "4233": 237, "0060": 237, "8929": 237, "2404": 237, "3984": 237, "4397": 237, "645": 237, "5041": 237, "9562": 237, "5235": 237, "9321": 237, "4387": 237, "8357": 237, "4153": 237, "1393": 237, "252": 237, "2288": 237, "6305": 237, "3803": 237, "8206": 237, "0299": 237, "8761": 237, "048": 237, "1744": 237, "8613": 237, "2204": 237, "0925": 237, "257": 237, "2255": 237, "7406": 237, "258": 237, "1357": 237, "6814": 237, "259": 237, "8567": 237, "6356": 237, "260": 237, "5807": 237, "9107": 237, "261": 237, "9391": 237, "0113": 237, "262": 237, "1248": 237, "4668": 237, "087": 237, "263": [237, 239], "0668": 237, "8278": 237, "039": 237, "0673": 237, "265": 237, "0040": 237, "7700": 237, "266": 237, "0511": 237, "4896": 237, "601": 237, "267": 237, "9192": 237, "1827": 237, "268": 237, "5280": 237, "0873": 237, "269": 237, "3014": 237, "5507": 237, "270": 237, "5069": 237, "2757": 237, "271": 237, "4602": 237, "7364": 237, "5137": 237, "7152": 237, "273": 237, "2609": 237, "5740": 237, "274": [237, 239, 241], "9472": 237, "5040": 237, "275": 237, "6028": 237, "9918": 237, "276": 237, "9059": 237, "3914": 237, "277": 237, "0026": 237, "2842": 237, "278": 237, "0321": 237, "1832": 237, "279": 237, "9834": 237, "280": 237, "4768": 237, "4292": 237, "281": 237, "3840": 237, "282": 237, "2931": 237, "6942": 237, "283": 237, "1488": 237, "3838": 237, "284": 237, "0074": 237, "9390": 237, "285": 237, "9666": 237, "0514": 237, "286": 237, "3936": 237, "3241": 237, "0752": 237, "2862": 237, "4057": 237, "289": 237, "2797": 237, "3964": 237, "290": 237, "4318": 237, "291": 237, "3599": 237, "9775": 237, "7158": 237, "3675": 237, "293": 237, "6441": 237, "9933": 237, "294": 237, "8600": 237, "4586": 237, "295": 237, "9585": 237, "9932": 237, "098": 237, "296": 237, "1756": 237, "4249": 237, "875": 237, "297": 237, "0147": 237, "3067": 237, "298": 237, "9180": 237, "6733": 237, "422": 237, "299": 237, "8126": 237, "6604": 237, "579": 237, "8080": 237, "6994": 237, "301": 237, "4560": 237, "9351": 237, "302": 237, "5834": 237, "303": 237, "7041": 237, "3072": 237, "304": 237, "2861": 237, "3868": 237, "305": 237, "6433": [237, 243], "0882": 237, "306": 237, "0045": 237, "6813": 237, "307": 237, "0191": 237, "3033": 237, "308": 237, "9612": 237, "071": 237, "309": 237, "9705": 237, "9102": 237, "310": 237, "8991": 237, "0725": 237, "311": 237, "2188": 237, "0159": 237, "1930": 237, "313": 237, "314": 237, "1452": 237, "5926": 237, "708": 237, "315": 237, "8479": 237, "9037": 237, "5351": 237, "4159": 237, "2926": 237, "7374": 237, "318": 237, "9609": 237, "0911": 237, "26it": 237, "1442": 237, "7381": 237, "0751": 237, "4052": 237, "321": 237, "9347": 237, "9890": 237, "483e": 237, "5460": [237, 242], "323": 237, "5463": 237, "7730": 237, "324": 237, "3693": 237, "3198": 237, "325": 237, "5941": 237, "1420": 237, "326": 237, "8283": 237, "7905": 237, "327": 237, "6564": 237, "9658": 237, "328": 237, "3260": 237, "5651": 237, "329": 237, "2164": 237, "2481": 237, "330": 237, "9772": 237, "331": 237, "8438": 237, "6115": 237, "332": [237, 239], "7462": 237, "333": 237, "1774": 237, "4915": 237, "334": 237, "8624": 237, "9831": 237, "335": 237, "2100": 237, "336": 237, "1456": 237, "8095": 237, "337": 237, "9707": 237, "338": 237, "8271": 237, "339": 237, "8380": 237, "2761": 237, "340": 237, "9326": 237, "8235": 237, "341": 237, "342": 237, "5594": 237, "9462": 237, "343": 237, "7638": 237, "8639": 237, "344": 237, "6126": 237, "1713": 237, "8285": 237, "3792": 237, "346": 237, "7427": 237, "8262": 237, "8490": 237, "1490": 237, "348": 237, "8405": 237, "5136": 237, "349": 237, "6007": 237, "350": 237, "2067": 237, "351": 237, "4539": 237, "5870": 237, "1299": 237, "1656": 237, "353": 237, "1129": 237, "5336": 237, "446": 237, "8256": 237, "4978": 237, "355": 237, "4813": 237, "7872": 237, "356": 237, "1024": 237, "2716": 237, "357": 237, "0829": 237, "2118": 237, "358": 237, "7679": 237, "359": 237, "5480": 237, "9900": 237, "716": 237, "9307": 237, "1472": 237, "361": 237, "4880": 237, "362": 237, "2448": 237, "363": 237, "6911": 237, "1006": 237, "364": 237, "6835": 237, "3896": 237, "365": 237, "7777": 237, "1966": 237, "366": 237, "8924": 237, "2317": 237, "3337": 237, "368": 237, "2781": [237, 242], "369": 237, "9493": 237, "7175": 237, "370": 237, "5553": 237, "371": 237, "7952": 237, "7853": 237, "372": 237, "4168": 237, "6806": 237, "557": 237, "373": 237, "6027": 237, "1973": 237, "7414": 237, "375": 237, "8725": 237, "376": 237, "3431": 237, "5582": 237, "377": 237, "2882": 237, "1221": 237, "378": 237, "7185": 237, "5716": 237, "379": 237, "6549": 237, "1545": 237, "380": 237, "3890": 237, "4029": 237, "381": 237, "1570": 237, "6254": 237, "382": 237, "1731": 237, "1671": 237, "7785": 237, "9914": 237, "7940": 237, "5071": 237, "7138": 237, "386": 237, "7983": 237, "387": 237, "3659": 237, "2849": 237, "388": 237, "8605": 237, "6753": 237, "389": 237, "6005": 237, "390": 237, "7873": 237, "9913": 237, "391": 237, "3542": 237, "3406": 237, "392": 237, "574": 237, "5674": 237, "0402": 237, "394": 237, "6186": 237, "0033": 237, "395": 237, "4185": 237, "3325": 237, "396": 237, "5159": 237, "6041": 237, "681": 237, "397": 237, "7954": 237, "2275": 237, "5413": 237, "0069": 237, "7672": 237, "399": 237, "5722": 237, "0592": 237, "6850": 237, "4255": 237, "6123": 237, "402": 237, "0049": 237, "0202": 237, "3814": 237, "5955": 237, "0309": 237, "6388": 237, "404": 237, "5150": 237, "0265": 237, "405": 237, "4821": 237, "0065": 237, "8755": 237, "406": 237, "6165": 237, "8638": 237, "407": 237, "7435": 237, "6713": 237, "408": 237, "1156": 237, "0243": 237, "8155": 237, "409": 237, "4659": 237, "0141": 237, "4149": 237, "410": 237, "9123": 237, "0025": 237, "4418": 237, "411": 237, "1559": 237, "0176": 237, "415": 237, "412": 237, "3635": 237, "0182": 237, "413": 237, "0932": 237, "0056": 237, "738": 237, "414": 237, "0281": 237, "6352": 237, "9092": 237, "0020": 237, "0269": 237, "3579": 237, "417": 237, "9136": 237, "3377": 237, "418": 237, "0781": 237, "4073": 237, "419": 237, "3373": 237, "3578": 237, "420": 237, "1113": 237, "4225": 237, "421": 237, "7475": 237, "0359": 237, "2852": 237, "5245": 237, "423": 237, "4992": 237, "9388": 237, "2857": 237, "7211": 237, "9163": 237, "5431": 237, "426": 237, "4721": 237, "0830": 237, "594": 237, "427": 237, "0353": 237, "882": 237, "428": 237, "6649": 237, "0023": 237, "429": 237, "0303": 237, "430": 237, "8240": 237, "0136": 237, "624": 237, "431": 237, "4656": 237, "0013": 237, "5372": 237, "432": 237, "4186": 237, "8879": 237, "433": 237, "6537": 237, "0077": 237, "7151": 237, "434": 237, "4349": 237, "0004": 237, "435": 237, "5612": 237, "0062": 237, "061": 237, "436": 237, "2758": 237, "879": 237, "437": 237, "3622": 237, "0052": 237, "082": 237, "438": 237, "9641": 237, "0053": 237, "5533": 237, "439": 237, "6092": 237, "0022": 237, "3178": 237, "440": 237, "6514": 237, "5912": 237, "441": 237, "5670": 237, "0005": 237, "4096": 237, "442": 237, "7481": 237, "6967": 237, "6597": 237, "0224": 237, "444": 237, "6124": 237, "0106": 237, "445": 237, "6434": 237, "8651": 237, "8931": 237, "0365": 237, "593": 237, "447": 237, "6992": 237, "0322": 237, "085": 237, "8942": 237, "2957": 237, "449": 237, "7127": 237, "0115": 237, "450": 237, "7995": 237, "0123": 237, "083": 237, "451": 237, "0316": 237, "975": 237, "452": 237, "6283": 237, "0117": 237, "9908": 237, "453": 237, "5989": 237, "507": 237, "454": 237, "4934": 237, "0170": 237, "981": 237, "455": 237, "7330": 237, "0007": 237, "456": 237, "3200": 237, "0037": 237, "7489": 237, "457": 237, "2597": 237, "0055": 237, "6815": 237, "458": 237, "5925": 237, "3302": 237, "459": 237, "4868": 237, "4718": 237, "460": 237, "5454": 237, "6822": 237, "461": 237, "0008": 237, "3434": 237, "462": 237, "2985": 237, "0016": 237, "4229": 237, "463": 237, "6575": 237, "829": 237, "464": 237, "5289": 237, "0036": 237, "465": 237, "3969": 237, "1283": 237, "466": 237, "6184": 237, "467": 237, "6687": 237, "0064": 237, "008": 237, "4158": 237, "0403": 237, "025": 237, "469": 237, "6001": 237, "0480": 237, "470": 237, "6841": 237, "0256": 237, "598": 237, "471": 237, "3022": 237, "0522": 237, "971": 237, "472": 237, "5669": 237, "0150": 237, "473": 237, "6943": 237, "0806": 237, "474": 237, "4634": 237, "5638": 237, "475": 237, "5903": 237, "0081": 237, "497": 237, "476": 237, "5456": 237, "0166": 237, "477": 237, "3739": 237, "0373": 237, "901": 237, "478": 237, "4191": 237, "0209": 237, "479": 237, "5538": 237, "5469": 237, "3807": 237, "0169": 237, "511": 237, "481": 237, "3327": 237, "0238": 237, "949": 237, "482": 237, "0042": 237, "5868": 237, "483": 237, "4748": 237, "0015": 237, "3529": 237, "484": 237, "8558": 237, "0086": 237, "485": 237, "4408": 237, "6879": 237, "486": 237, "4199": 237, "487": 237, "6868": 237, "0011": 237, "4794": 237, "488": 237, "3112": 237, "489": 237, "4264": 237, "0027": 237, "5186": 237, "490": 237, "3766": 237, "1398": 237, "491": 237, "7910": 237, "492": 237, "4063": 237, "0047": 237, "5459": 237, "493": 237, "7694": 237, "3254": 237, "494": 237, "4348": 237, "1834": 237, "495": 237, "2418": 237, "0014": 237, "7178": 237, "5223": 237, "4077": 237, "0019": 237, "6349": 237, "498": 237, "3537": 237, "499": 237, "5482": 237, "501": 237, "4687": 237, "3084": 237, "1967": 237, "503": 237, "5958": 237, "504": 237, "5623": 237, "626": 237, "505": 237, "5930": 237, "8169": 237, "506": 237, "6399": 237, "4313": 237, "508": 237, "8404": 237, "843": 237, "509": 237, "5611": 237, "0193": 237, "523": 237, "510": 237, "6002": 237, "0085": 237, "659": [237, 238], "0029": 237, "513": 237, "5302": 237, "0080": 237, "9369": 237, "514": 237, "0066": 237, "6998": 237, "6370": 237, "5099": 237, "516": 237, "4817": 237, "603": 237, "517": 237, "4089": 237, "2707": 237, "518": 237, "7110": 237, "8602": 237, "519": 237, "6731": 237, "520": 237, "4991": 237, "3643": 237, "521": 237, "4262": 237, "021": 237, "522": 237, "5164": 237, "7196": 237, "5381": 237, "09353": 237, "524": 237, "4574": 237, "0103": 237, "525": 237, "5063": 237, "0124": 237, "526": 237, "527": 237, "5620": 237, "9034": 237, "528": 237, "5060": 237, "0098": 237, "529": 237, "5730": 237, "09915": 237, "530": 237, "6462": 237, "0048": 237, "8528": 237, "531": 237, "4146": 237, "0030": 237, "6585": 237, "532": 237, "6769": 237, "3161": 237, "533": 237, "7595": 237, "0088": 237, "9262": 237, "534": 237, "3997": 237, "0028": 237, "6147": 237, "535": 237, "3009": 237, "0021": 237, "5009": 237, "536": 237, "5789": 237, "0067": 237, "9273": 237, "537": 237, "2331": 237, "3397": 237, "0061": 237, "8454": 237, "539": 237, "5125": 237, "0034": [237, 242], "7267": 237, "540": 237, "1777": 237, "541": 237, "4060": 237, "5194": 237, "543": 237, "2428": 237, "0018": 237, "7637": 237, "544": 237, "4377": 237, "545": 237, "7458": 237, "1639": 237, "546": 237, "4933": 237, "0148": 237, "942": 237, "547": 237, "6040": 237, "0095": 237, "548": 237, "8440": 237, "0142": 237, "938": 237, "549": 237, "4537": 237, "5649": 237, "550": 237, "6866": 237, "551": 237, "0300": 237, "552": 237, "7342": 237, "0044": 237, "553": 237, "6614": 237, "0134": 237, "554": 237, "3916": 237, "0883": 237, "555": 237, "0259": 237, "0387": 237, "556": 237, "5540": 237, "0272": 237, "735": 237, "4142": 237, "3006": 237, "558": 237, "6493": 237, "3002": 237, "559": 237, "8739": 237, "5192": 237, "560": 237, "5129": 237, "8113": 237, "561": 237, "8092": 237, "3621": 237, "3960": 237, "563": 237, "5756": 237, "564": 237, "0078": 237, "8371": 237, "565": 237, "5067": 237, "4395": 237, "566": 237, "2474": 237, "567": 237, "0024": 237, "8578": 237, "568": 237, "5831": 237, "0012": 237, "6581": 237, "3662": 237, "0010": 237, "5693": 237, "570": 237, "4515": 237, "571": 237, "5741": 237, "2417": 237, "572": 237, "6877": 237, "573": 237, "4525": 237, "2384": 237, "931": 237, "575": 237, "6353": 237, "9342": 237, "577": 237, "0158": 237, "805": 237, "578": 237, "5378": 237, "015": 237, "4552": 237, "069": 237, "580": 237, "3430": 237, "581": 237, "5089": 237, "0315": 237, "582": 237, "5640": 237, "0072": 237, "1114": 237, "5908": 237, "584": 237, "4767": 237, "585": 237, "4403": 237, "0091": 237, "692": 237, "45it": 237, "3886": 237, "0125": 237, "587": 237, "6599": 237, "588": 237, "3784": 237, "3128": 237, "589": 237, "6548": 237, "590": 237, "6893": 237, "0090": 237, "591": 237, "1896": 237, "0222": [237, 242], "592": 237, "2106": 237, "0207": 237, "7451": 237, "9996": 237, "2112": 237, "0073": 237, "7498": 237, "595": 237, "0536": 237, "8849": 237, "596": 237, "2815": 237, "7195": 237, "597": 237, "5419": 237, "0450": 237, "1132": 237, "599": 237, "6940": 237, "6006": 237, "9512": 237, "5803": 237, "4805": 237, "0076": 237, "3985": 237, "602": 237, "5613": 237, "2526": 237, "2808": 237, "4755": 237, "604": 237, "605": 237, "2937": 237, "3396": 237, "606": 237, "9633": 237, "0046": 237, "2741": 237, "607": 237, "9763": 237, "608": 237, "3215": 237, "609": 237, "6501": 237, "2626": 237, "610": 237, "9696": 237, "0017": 237, "5173": 237, "611": 237, "9731": 237, "5793": 237, "612": 237, "4196": 237, "6237": 237, "613": 237, "9212": 237, "2519": 237, "614": 237, "1131": [237, 243], "615": 237, "6106": 237, "4802": 237, "616": 237, "8127": 237, "617": 237, "1906": 237, "3571": 237, "618": 237, "2302": 237, "0530": 237, "9727": 237, "9984": 237, "0009": 237, "3939": 237, "620": 237, "1301": 237, "621": 237, "622": 237, "9250": 237, "6589": 237, "623": 237, "9425": 237, "2548": 237, "8481": 237, "3058": 237, "subject": 237, "saw": 237, "096": [237, 239], "fine": 238, "tune": 238, "semat": 238, "r3mtransform": 238, "sake": 238, "embodi": 238, "ai": 238, "env_transform": [238, 242], "s3": 238, "amazonaw": 238, "r3m_50": 238, "374m": 238, "4m": 238, "112mb": 238, "8m": 238, "103mb": 238, "121mb": 238, "0m": 238, "114mb": 238, "3m": 238, "116mb": 238, "6m": 238, "3mb": 238, "6mb": 238, "115m": 238, "131m": 238, "1mb": 238, "147m": 238, "9mb": 238, "162m": 238, "101mb": 238, "172m": 238, "181m": 238, "195m": 238, "202m": 238, "213m": 238, "2mb": 238, "229m": 238, "8mb": 238, "246m": 238, "4mb": 238, "261m": 238, "5mb": 238, "271m": 238, "279m": 238, "7mb": 238, "289m": 238, "295m": 238, "310m": 238, "317m": 238, "326m": 238, "333m": 238, "342m": 238, "349m": 238, "0mb": 238, "360m": 238, "2048": 238, "trainabl": 238, "wiser": 238, "subset": 238, "again": [238, 242], "intermedi": 238, "conclud": 238, "tmp2b6oxhj6": 238, "030517578125": 238, "tmplejrm8un": 238, "00095367431640625": 238, "tmpfg2u13df": 238, "1796875": 238, "tmpgbqxn8j4": 238, "tmpagjuvnz": 238, "haven": 238, "yet": 238, "_storag": 238, "4989": [238, 239], "pretrained_model": [238, 239], "torchrl_demo": [239, 243], "856": [239, 243], "torch_env": [239, 242], "031": [239, 242], "tensordict_tutori": [239, 241], "719": [239, 240], "recommand": 240, "a_out": 240, "mergelinear": 240, "in_1": 240, "in_2": 240, "linear_1": 240, "linear_2": 240, "x_1": 240, "x_2": 240, "multiheadlinear": 240, "out_1": 240, "out_2": 240, "splitlinear": 240, "output_1": 240, "output_2": 240, "split_and_merge_linear": 240, "make_functional_with_buff": 240, "replica": 240, "params_expand": [240, 243], "buffers_expand": 240, "num_model": 240, "result_td": 240, "ok": 240, "conflict": 240, "wire": 240, "tensordictsequentialand": 240, "block": 240, "architectur": 240, "vaswani": 240, "2017": 240, "tokenstoqkv": 240, "to_dim": 240, "from_dim": 240, "latent_dim": 240, "x_to": 240, "x_from": 240, "splithead": 240, "num_head": 240, "to_num": 240, "from_num": 240, "d_tensor": 240, "transpos": 240, "softmax": 240, "n_head": 240, "d_in": 240, "attn": 240, "skiplayernorm": 240, "to_len": 240, "layer_norm": 240, "layernorm": 240, "x_0": 240, "ffn": 240, "dropout_r": 240, "attentionblock": 240, "tokens_to_qkv": 240, "split_head": 240, "encodertransformerblock": 240, "attention_block": 240, "x_out": 240, "decodertransformerblock": 240, "encoder_block": 240, "transformerencod": 240, "num_block": 240, "transformerdecod": 240, "from_len": 240, "attentionblocktensordict": 240, "connect": 240, "moreov": 240, "to_nam": 240, "from_nam": 240, "thank": 240, "transformerblockencodertensordict": 240, "transformerblockdecodertensordict": 240, "token": 240, "transformerencodertensordict": 240, "transformerdecodertensordict": 240, "transformertensordict": 240, "x_encod": 240, "x_decod": 240, "ve": 240, "operar": 240, "td_token": 240, "tdtransform": 240, "t1": 240, "t2": 240, "012506484985351562": 240, "t3": 240, "t4": 240, "009420394897460938": 240, "margin": 240, "furthermor": 241, "organ": 241, "power": 241, "segment": 241, "get_data_a": 241, "get_data_b": 241, "reusabl": 241, "lot": 241, "rewriten": 241, "modal": 241, "get_data": 241, "reus": 241, "argu": 241, "dictdataset": 241, "__getitem__": 241, "collat": 241, "collate_dict_fn": 241, "dict_list": 241, "final_dict": 241, "single_dict": 241, "simpler": 241, "collate_tensordict_fn": 241, "furtherdown": 241, "_permutedtensordict": 241, "_unsqueezedtensordict": 241, "_viewedtensordict": 241, "datastructur": 241, "caramba": 241, "foo": [241, 242], "insid": [241, 242], "violat": 241, "err": 241, "got": 241, "resp": 241, "among": 241, "tensordict_clon": 241, "tensodict": 241, "tuple_index": 241, "new_tensordict": 241, "get_sub_tensordict": 241, "subtensordict": 241, "subtd": 241, "td2": 241, "booltensor": 241, "fashion": 241, "clonned_tensordict": 241, "staked_tensordict": 241, "unbind": 241, "list_tensordict": 241, "comeback": 241, "unsqueezed_tensordict": 241, "role": 242, "supervis": 242, "unsupervis": 242, "rom": 242, "licens": 242, "pygam": 242, "unifi": 242, "_build_env": 242, "sphinx_gallery_start_ignor": 242, "warn": 242, "filterwarn": 242, "sphinx_gallery_end_ignor": 242, "adventur": 242, "ram": 242, "airraid": 242, "alien": 242, "amidar": 242, "assault": 242, "exectut": 242, "reproduct": 242, "shortcut": 242, "tensordict_tprim": 242, "tensordict_rollout": [242, 243], "quickli": 242, "axesimag": 242, "0x7faef02d63d0": 242, "inconsist": 242, "swingup": 242, "swingup_spars": 242, "ball_in_cup": 242, "catch": 242, "balance_spars": 242, "three_pol": 242, "two_pol": 242, "finger": 242, "turn_easi": 242, "turn_hard": 242, "fish": 242, "swim": 242, "hopper": 242, "hop": 242, "run_pure_st": 242, "bring_bal": 242, "bring_peg": 242, "insert_bal": 242, "insert_peg": 242, "point_mass": 242, "reacher": 242, "swimmer": 242, "swimmer6": 242, "swimmer15": 242, "walker": 242, "dog": 242, "trot": 242, "humanoid_cmu": 242, "lqr": 242, "lqr_2_1": 242, "lqr_6_2": 242, "quadrup": 242, "escap": 242, "stacker": 242, "stack_2": 242, "stack_4": 242, "wrapper1": 242, "wrapper2": 242, "obviou": 242, "truth": 242, "env0": 242, "env_transformed_bi": 242, "stanc": 242, "transformeddistribut": 242, "base_dist": 242, "concat": 242, "mofidi": 242, "_inv_apply_transform": 242, "_apply_transform": 242, "transformedenviron": 242, "noopresetenv": [242, 243], "moderet": 242, "computation": 242, "legitim": 242, "side": 242, "incom": 242, "amongst": 242, "wor": 242, "convention": 242, "scope": 242, "markovian": 242, "3288080526": 242, "sometim": 242, "constain": 242, "uuid1": 242, "bar_": 242, "get_someth": 242, "bar_c4a6efd8": 242, "ae3d": 242, "11ed": 242, "96f4": 242, "0242ac120002": 242, "aargh": 242, "foo_list": 242, "vec_env": 242, "_dispatch_caller_parallel": 242, "0x7faef03495b0": 242, "bar_cc60c8e8": 242, "9e29": 242, "bar_cc620758": 242, "996b": 242, "bar_cc63e5dc": 242, "ad2d": 242, "parallen": 242, "carefulli": 242, "commonli": 242, "approxim": 242, "particularili": 242, "evolv": 242, "steadi": 242, "approx": 242, "0262": 242, "2801": 242, "0704": 242, "0708": 242, "0325": 242, "_extra_st": 242, "observation_ssq": 242, "observation_sum": 242, "1512": 242, "2197": 242, "3516": 242, "3307": 242, "dispach": 242, "absor": 242, "demo": 243, "icml": 243, "dai": 243, "vmoen": 243, "fb": 243, "question": 243, "team": 243, "decid": 243, "invest": 243, "platform": 243, "media": 243, "truli": 243, "predominantli": 243, "tensordict1": 243, "tensordict2": 243, "tensordict_sampl": 243, "_sampler": 243, "_sum_tre": 243, "modulenotfounderror": 243, "28791671991348267": 243, "gym_env": 243, "squash": 243, "lazyconv2d": 243, "6400": 243, "backbone_modul": 243, "tensordict_exp": 243, "base_modul": 243, "0137": 243, "1524": 243, "0641": 243, "indexputbackward0": 243, "8728": 243, "1335": 243, "3497": 243, "6889": 243, "clampbackward1": 243, "1761": 243, "3425": 243, "2665": 243, "2915": 243, "2375": 243, "1242": 243, "1372": 243, "meanbackward1": 243, "tensordicts_prealloc": 243, "tensordicts_stack": 243, "disclaim": 243, "concatmodul": 243, "loss_td": 243, "pred_valu": 243, "pred_value_max": 243, "target_value_max": 243, "year": 243, "roadmap": 243, "compris": 243, "hierarch": 243, "contributor": 243, "curiou": 243, "feedback": 243, "nascent": 243, "pypi": 243}, "objects": {"torchrl._utils": [[10, 0, 1, "", "implement_for"]], "torchrl.collectors.collectors": [[11, 0, 1, "", "MultiSyncDataCollector"], [12, 0, 1, "", "MultiaSyncDataCollector"], [13, 0, 1, "", "RandomPolicy"], [14, 0, 1, "", "SyncDataCollector"], [15, 0, 1, "", "aSyncDataCollector"]], "torchrl.collectors.collectors.MultiSyncDataCollector": [[11, 1, 1, "", "load_state_dict"], [11, 1, 1, "", "reset"], [11, 1, 1, "", "set_seed"], [11, 1, 1, "", "shutdown"], [11, 1, 1, "", "state_dict"], [11, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.MultiaSyncDataCollector": [[12, 1, 1, "", "load_state_dict"], [12, 1, 1, "", "reset"], [12, 1, 1, "", "set_seed"], [12, 1, 1, "", "shutdown"], [12, 1, 1, "", "state_dict"], [12, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.SyncDataCollector": [[14, 1, 1, "", "iterator"], [14, 1, 1, "", "load_state_dict"], [14, 1, 1, "", "reset"], [14, 1, 1, "", "rollout"], [14, 1, 1, "", "set_seed"], [14, 1, 1, "", "shutdown"], [14, 1, 1, "", "state_dict"], [14, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.collectors.aSyncDataCollector": [[15, 1, 1, "", "load_state_dict"], [15, 1, 1, "", "reset"], [15, 1, 1, "", "set_seed"], [15, 1, 1, "", "shutdown"], [15, 1, 1, "", "state_dict"], [15, 1, 1, "", "update_policy_weights_"]], "torchrl.collectors.utils": [[16, 2, 1, "", "split_trajectories"]], "torchrl.data": [[17, 0, 1, "", "BinaryDiscreteTensorSpec"], [18, 0, 1, "", "BoundedTensorSpec"], [19, 0, 1, "", "CompositeSpec"], [20, 0, 1, "", "DiscreteTensorSpec"], [21, 0, 1, "", "MultiDiscreteTensorSpec"], [22, 0, 1, "", "MultiOneHotDiscreteTensorSpec"], [23, 0, 1, "", "MultiStep"], [24, 0, 1, "", "OneHotDiscreteTensorSpec"], [25, 0, 1, "", "PrioritizedReplayBuffer"], [26, 0, 1, "", "ReplayBuffer"], [27, 0, 1, "", "TensorDictPrioritizedReplayBuffer"], [28, 0, 1, "", "TensorDictReplayBuffer"], [29, 0, 1, "", "TensorSpec"], [30, 0, 1, "", "UnboundedContinuousTensorSpec"], [31, 0, 1, "", "UnboundedDiscreteTensorSpec"]], "torchrl.data.BinaryDiscreteTensorSpec": [[17, 1, 1, "", "assert_is_in"], [17, 1, 1, "", "encode"], [17, 1, 1, "", "expand"], [17, 1, 1, "", "index"], [17, 1, 1, "", "is_in"], [17, 1, 1, "", "project"], [17, 1, 1, "", "rand"], [17, 1, 1, "", "to_numpy"], [17, 1, 1, "", "type_check"], [17, 1, 1, "", "zero"]], "torchrl.data.BoundedTensorSpec": [[18, 1, 1, "", "assert_is_in"], [18, 1, 1, "", "encode"], [18, 1, 1, "", "expand"], [18, 1, 1, "", "index"], [18, 1, 1, "", "is_in"], [18, 1, 1, "", "project"], [18, 1, 1, "", "rand"], [18, 1, 1, "", "to_numpy"], [18, 1, 1, "", "type_check"], [18, 1, 1, "", "zero"]], "torchrl.data.CompositeSpec": [[19, 1, 1, "", "assert_is_in"], [19, 1, 1, "", "encode"], [19, 1, 1, "", "expand"], [19, 1, 1, "", "index"], [19, 1, 1, "", "is_in"], [19, 1, 1, "", "keys"], [19, 1, 1, "", "project"], [19, 1, 1, "", "rand"], [19, 1, 1, "", "to_numpy"], [19, 1, 1, "", "type_check"], [19, 1, 1, "", "zero"]], "torchrl.data.DiscreteTensorSpec": [[20, 1, 1, "", "assert_is_in"], [20, 1, 1, "", "encode"], [20, 1, 1, "", "expand"], [20, 1, 1, "", "index"], [20, 1, 1, "", "is_in"], [20, 1, 1, "", "project"], [20, 1, 1, "", "rand"], [20, 1, 1, "", "to_numpy"], [20, 1, 1, "", "type_check"], [20, 1, 1, "", "zero"]], "torchrl.data.MultiDiscreteTensorSpec": [[21, 1, 1, "", "assert_is_in"], [21, 1, 1, "", "encode"], [21, 1, 1, "", "expand"], [21, 1, 1, "", "index"], [21, 1, 1, "", "is_in"], [21, 1, 1, "", "project"], [21, 1, 1, "", "rand"], [21, 1, 1, "", "to_numpy"], [21, 1, 1, "", "type_check"], [21, 1, 1, "", "zero"]], "torchrl.data.MultiOneHotDiscreteTensorSpec": [[22, 1, 1, "", "assert_is_in"], [22, 1, 1, "", "encode"], [22, 1, 1, "", "expand"], [22, 1, 1, "", "index"], [22, 1, 1, "", "is_in"], [22, 1, 1, "", "project"], [22, 1, 1, "", "rand"], [22, 1, 1, "", "to_numpy"], [22, 1, 1, "", "type_check"], [22, 1, 1, "", "zero"]], "torchrl.data.MultiStep": [[23, 1, 1, "", "add_module"], [23, 1, 1, "", "apply"], [23, 1, 1, "", "bfloat16"], [23, 1, 1, "", "buffers"], [23, 1, 1, "", "children"], [23, 1, 1, "", "cpu"], [23, 1, 1, "", "cuda"], [23, 1, 1, "", "double"], [23, 1, 1, "", "eval"], [23, 1, 1, "", "extra_repr"], [23, 1, 1, "", "float"], [23, 1, 1, "", "forward"], [23, 1, 1, "", "get_buffer"], [23, 1, 1, "", "get_extra_state"], [23, 1, 1, "", "get_parameter"], [23, 1, 1, "", "get_submodule"], [23, 1, 1, "", "half"], [23, 1, 1, "", "ipu"], [23, 1, 1, "", "load_state_dict"], [23, 1, 1, "", "modules"], [23, 1, 1, "", "named_buffers"], [23, 1, 1, "", "named_children"], [23, 1, 1, "", "named_modules"], [23, 1, 1, "", "named_parameters"], [23, 1, 1, "", "parameters"], [23, 1, 1, "", "register_backward_hook"], [23, 1, 1, "", "register_buffer"], [23, 1, 1, "", "register_forward_hook"], [23, 1, 1, "", "register_forward_pre_hook"], [23, 1, 1, "", "register_full_backward_hook"], [23, 1, 1, "", "register_full_backward_pre_hook"], [23, 1, 1, "", "register_load_state_dict_post_hook"], [23, 1, 1, "", "register_module"], [23, 1, 1, "", "register_parameter"], [23, 1, 1, "", "register_state_dict_pre_hook"], [23, 1, 1, "", "requires_grad_"], [23, 1, 1, "", "set_extra_state"], [23, 1, 1, "", "share_memory"], [23, 1, 1, "", "state_dict"], [23, 1, 1, "", "to"], [23, 1, 1, "", "to_empty"], [23, 1, 1, "", "train"], [23, 1, 1, "", "type"], [23, 1, 1, "", "xpu"], [23, 1, 1, "", "zero_grad"]], "torchrl.data.OneHotDiscreteTensorSpec": [[24, 1, 1, "", "assert_is_in"], [24, 1, 1, "", "encode"], [24, 1, 1, "", "expand"], [24, 1, 1, "", "index"], [24, 1, 1, "", "is_in"], [24, 1, 1, "", "project"], [24, 1, 1, "", "rand"], [24, 1, 1, "", "to_numpy"], [24, 1, 1, "", "type_check"], [24, 1, 1, "", "zero"]], "torchrl.data.PrioritizedReplayBuffer": [[25, 1, 1, "", "add"], [25, 1, 1, "", "append_transform"], [25, 1, 1, "", "extend"], [25, 1, 1, "", "insert_transform"], [25, 1, 1, "", "sample"]], "torchrl.data.ReplayBuffer": [[26, 1, 1, "", "add"], [26, 1, 1, "", "append_transform"], [26, 1, 1, "", "extend"], [26, 1, 1, "", "insert_transform"], [26, 1, 1, "", "sample"]], "torchrl.data.TensorDictPrioritizedReplayBuffer": [[27, 1, 1, "", "add"], [27, 1, 1, "", "append_transform"], [27, 1, 1, "", "extend"], [27, 1, 1, "", "insert_transform"], [27, 1, 1, "", "sample"]], "torchrl.data.TensorDictReplayBuffer": [[28, 1, 1, "", "add"], [28, 1, 1, "", "append_transform"], [28, 1, 1, "", "extend"], [28, 1, 1, "", "insert_transform"], [28, 1, 1, "", "sample"]], "torchrl.data.TensorSpec": [[29, 1, 1, "", "assert_is_in"], [29, 1, 1, "", "encode"], [29, 1, 1, "", "expand"], [29, 1, 1, "", "index"], [29, 1, 1, "", "is_in"], [29, 1, 1, "", "project"], [29, 1, 1, "", "rand"], [29, 1, 1, "", "to_numpy"], [29, 1, 1, "", "type_check"], [29, 1, 1, "", "zero"]], "torchrl.data.UnboundedContinuousTensorSpec": [[30, 1, 1, "", "assert_is_in"], [30, 1, 1, "", "encode"], [30, 1, 1, "", "expand"], [30, 1, 1, "", "index"], [30, 1, 1, "", "is_in"], [30, 1, 1, "", "project"], [30, 1, 1, "", "rand"], [30, 1, 1, "", "to_numpy"], [30, 1, 1, "", "type_check"], [30, 1, 1, "", "zero"]], "torchrl.data.UnboundedDiscreteTensorSpec": [[31, 1, 1, "", "assert_is_in"], [31, 1, 1, "", "encode"], [31, 1, 1, "", "expand"], [31, 1, 1, "", "index"], [31, 1, 1, "", "is_in"], [31, 1, 1, "", "project"], [31, 1, 1, "", "rand"], [31, 1, 1, "", "to_numpy"], [31, 1, 1, "", "type_check"], [31, 1, 1, "", "zero"]], "torchrl.data.replay_buffers.samplers": [[32, 0, 1, "", "PrioritizedSampler"], [33, 0, 1, "", "RandomSampler"], [34, 0, 1, "", "Sampler"]], "torchrl.data.replay_buffers.samplers.PrioritizedSampler": [[32, 1, 1, "", "update_priority"]], "torchrl.data.replay_buffers.storages": [[35, 0, 1, "", "LazyMemmapStorage"], [36, 0, 1, "", "LazyTensorStorage"], [37, 0, 1, "", "ListStorage"], [38, 0, 1, "", "Storage"]], "torchrl.data.replay_buffers.storages.LazyMemmapStorage": [[35, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.storages.LazyTensorStorage": [[36, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.storages.ListStorage": [[37, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.storages.Storage": [[38, 1, 1, "", "attach"]], "torchrl.data.replay_buffers.writers": [[39, 0, 1, "", "RoundRobinWriter"], [40, 0, 1, "", "Writer"]], "torchrl.data.replay_buffers.writers.RoundRobinWriter": [[39, 1, 1, "", "add"], [39, 1, 1, "", "extend"]], "torchrl.data.replay_buffers.writers.Writer": [[40, 1, 1, "", "add"], [40, 1, 1, "", "extend"]], "torchrl.envs": [[41, 0, 1, "", "EnvBase"], [42, 0, 1, "", "EnvCreator"], [43, 0, 1, "", "EnvMetaData"], [44, 0, 1, "", "GymLikeEnv"], [45, 2, 1, "", "ModelBasedEnvBase"], [46, 0, 1, "", "MultiThreadedEnv"], [47, 0, 1, "", "ParallelEnv"], [48, 0, 1, "", "SerialEnv"], [49, 0, 1, "", "Specs"], [45, 1, 1, "", "rand_step"], [45, 1, 1, "", "reset"], [45, 1, 1, "", "rollout"], [45, 1, 1, "", "set_seed"], [45, 1, 1, "", "step"]], "torchrl.envs.EnvBase": [[41, 1, 1, "", "add_module"], [41, 1, 1, "", "apply"], [41, 3, 1, "", "batch_locked"], [41, 1, 1, "", "bfloat16"], [41, 1, 1, "", "buffers"], [41, 1, 1, "", "children"], [41, 1, 1, "", "cpu"], [41, 1, 1, "", "cuda"], [41, 1, 1, "", "double"], [41, 1, 1, "", "eval"], [41, 1, 1, "", "extra_repr"], [41, 1, 1, "", "fake_tensordict"], [41, 1, 1, "", "float"], [41, 1, 1, "", "forward"], [41, 1, 1, "", "get_buffer"], [41, 1, 1, "", "get_extra_state"], [41, 1, 1, "", "get_parameter"], [41, 1, 1, "", "get_submodule"], [41, 1, 1, "", "half"], [41, 1, 1, "", "ipu"], [41, 1, 1, "", "load_state_dict"], [41, 1, 1, "", "modules"], [41, 1, 1, "", "named_buffers"], [41, 1, 1, "", "named_children"], [41, 1, 1, "", "named_modules"], [41, 1, 1, "", "named_parameters"], [41, 1, 1, "", "parameters"], [41, 1, 1, "id0", "rand_step"], [41, 1, 1, "", "register_backward_hook"], [41, 1, 1, "", "register_buffer"], [41, 1, 1, "", "register_forward_hook"], [41, 1, 1, "", "register_forward_pre_hook"], [41, 1, 1, "", "register_full_backward_hook"], [41, 1, 1, "", "register_full_backward_pre_hook"], [41, 1, 1, "", "register_load_state_dict_post_hook"], [41, 1, 1, "", "register_module"], [41, 1, 1, "", "register_parameter"], [41, 1, 1, "", "register_state_dict_pre_hook"], [41, 1, 1, "", "requires_grad_"], [41, 1, 1, "id1", "reset"], [41, 1, 1, "id2", "rollout"], [41, 1, 1, "", "set_extra_state"], [41, 1, 1, "id3", "set_seed"], [41, 1, 1, "", "share_memory"], [41, 3, 1, "", "specs"], [41, 1, 1, "", "state_dict"], [41, 1, 1, "id4", "step"], [41, 1, 1, "", "to"], [41, 1, 1, "", "to_empty"], [41, 1, 1, "", "train"], [41, 1, 1, "", "type"], [41, 1, 1, "", "xpu"], [41, 1, 1, "", "zero_grad"]], "torchrl.envs.GymLikeEnv": [[44, 1, 1, "", "add_module"], [44, 1, 1, "", "apply"], [44, 3, 1, "", "batch_locked"], [44, 1, 1, "", "bfloat16"], [44, 1, 1, "", "buffers"], [44, 1, 1, "", "children"], [44, 1, 1, "", "close"], [44, 1, 1, "", "cpu"], [44, 1, 1, "", "cuda"], [44, 1, 1, "", "double"], [44, 1, 1, "", "eval"], [44, 1, 1, "", "extra_repr"], [44, 1, 1, "", "fake_tensordict"], [44, 1, 1, "", "float"], [44, 1, 1, "", "forward"], [44, 1, 1, "", "get_buffer"], [44, 1, 1, "", "get_extra_state"], [44, 1, 1, "", "get_parameter"], [44, 1, 1, "", "get_submodule"], [44, 1, 1, "", "half"], [44, 1, 1, "", "ipu"], [44, 1, 1, "", "load_state_dict"], [44, 1, 1, "", "modules"], [44, 1, 1, "", "named_buffers"], [44, 1, 1, "", "named_children"], [44, 1, 1, "", "named_modules"], [44, 1, 1, "", "named_parameters"], [44, 1, 1, "", "parameters"], [44, 1, 1, "", "rand_step"], [44, 1, 1, "", "read_action"], [44, 1, 1, "", "read_done"], [44, 1, 1, "", "read_obs"], [44, 1, 1, "", "read_reward"], [44, 1, 1, "", "register_backward_hook"], [44, 1, 1, "", "register_buffer"], [44, 1, 1, "", "register_forward_hook"], [44, 1, 1, "", "register_forward_pre_hook"], [44, 1, 1, "", "register_full_backward_hook"], [44, 1, 1, "", "register_full_backward_pre_hook"], [44, 1, 1, "", "register_load_state_dict_post_hook"], [44, 1, 1, "", "register_module"], [44, 1, 1, "", "register_parameter"], [44, 1, 1, "", "register_state_dict_pre_hook"], [44, 1, 1, "", "requires_grad_"], [44, 1, 1, "", "reset"], [44, 1, 1, "", "rollout"], [44, 1, 1, "", "set_extra_state"], [44, 1, 1, "", "set_info_dict_reader"], [44, 1, 1, "", "set_seed"], [44, 1, 1, "", "share_memory"], [44, 3, 1, "", "specs"], [44, 1, 1, "", "state_dict"], [44, 1, 1, "", "step"], [44, 1, 1, "", "to"], [44, 1, 1, "", "to_empty"], [44, 1, 1, "", "train"], [44, 1, 1, "", "type"], [44, 1, 1, "", "xpu"], [44, 1, 1, "", "zero_grad"]], "torchrl.envs.MultiThreadedEnv": [[46, 1, 1, "", "add_module"], [46, 1, 1, "", "apply"], [46, 3, 1, "", "batch_locked"], [46, 1, 1, "", "bfloat16"], [46, 1, 1, "", "buffers"], [46, 1, 1, "", "children"], [46, 1, 1, "", "close"], [46, 1, 1, "", "cpu"], [46, 1, 1, "", "cuda"], [46, 1, 1, "", "double"], [46, 1, 1, "", "eval"], [46, 1, 1, "", "extra_repr"], [46, 1, 1, "", "fake_tensordict"], [46, 1, 1, "", "float"], [46, 1, 1, "", "forward"], [46, 1, 1, "", "get_buffer"], [46, 1, 1, "", "get_extra_state"], [46, 1, 1, "", "get_parameter"], [46, 1, 1, "", "get_submodule"], [46, 1, 1, "", "half"], [46, 1, 1, "", "ipu"], [46, 1, 1, "", "load_state_dict"], [46, 1, 1, "", "modules"], [46, 1, 1, "", "named_buffers"], [46, 1, 1, "", "named_children"], [46, 1, 1, "", "named_modules"], [46, 1, 1, "", "named_parameters"], [46, 1, 1, "", "parameters"], [46, 1, 1, "", "rand_step"], [46, 1, 1, "", "register_backward_hook"], [46, 1, 1, "", "register_buffer"], [46, 1, 1, "", "register_forward_hook"], [46, 1, 1, "", "register_forward_pre_hook"], [46, 1, 1, "", "register_full_backward_hook"], [46, 1, 1, "", "register_full_backward_pre_hook"], [46, 1, 1, "", "register_load_state_dict_post_hook"], [46, 1, 1, "", "register_module"], [46, 1, 1, "", "register_parameter"], [46, 1, 1, "", "register_state_dict_pre_hook"], [46, 1, 1, "", "requires_grad_"], [46, 1, 1, "", "reset"], [46, 1, 1, "", "rollout"], [46, 1, 1, "", "set_extra_state"], [46, 1, 1, "", "set_seed"], [46, 1, 1, "", "share_memory"], [46, 3, 1, "", "specs"], [46, 1, 1, "", "state_dict"], [46, 1, 1, "", "step"], [46, 1, 1, "", "to"], [46, 1, 1, "", "to_empty"], [46, 1, 1, "", "train"], [46, 1, 1, "", "type"], [46, 1, 1, "", "xpu"], [46, 1, 1, "", "zero_grad"]], "torchrl.envs.ParallelEnv": [[47, 1, 1, "", "add_module"], [47, 1, 1, "", "apply"], [47, 3, 1, "", "batch_locked"], [47, 1, 1, "", "bfloat16"], [47, 1, 1, "", "buffers"], [47, 1, 1, "", "children"], [47, 1, 1, "", "cpu"], [47, 1, 1, "", "cuda"], [47, 1, 1, "", "double"], [47, 1, 1, "", "eval"], [47, 1, 1, "", "extra_repr"], [47, 1, 1, "", "fake_tensordict"], [47, 1, 1, "", "float"], [47, 1, 1, "", "forward"], [47, 1, 1, "", "get_buffer"], [47, 1, 1, "", "get_extra_state"], [47, 1, 1, "", "get_parameter"], [47, 1, 1, "", "get_submodule"], [47, 1, 1, "", "half"], [47, 1, 1, "", "ipu"], [47, 1, 1, "", "load_state_dict"], [47, 1, 1, "", "modules"], [47, 1, 1, "", "named_buffers"], [47, 1, 1, "", "named_children"], [47, 1, 1, "", "named_modules"], [47, 1, 1, "", "named_parameters"], [47, 1, 1, "", "parameters"], [47, 1, 1, "", "rand_step"], [47, 1, 1, "", "register_backward_hook"], [47, 1, 1, "", "register_buffer"], [47, 1, 1, "", "register_forward_hook"], [47, 1, 1, "", "register_forward_pre_hook"], [47, 1, 1, "", "register_full_backward_hook"], [47, 1, 1, "", "register_full_backward_pre_hook"], [47, 1, 1, "", "register_load_state_dict_post_hook"], [47, 1, 1, "", "register_module"], [47, 1, 1, "", "register_parameter"], [47, 1, 1, "", "register_state_dict_pre_hook"], [47, 1, 1, "", "requires_grad_"], [47, 1, 1, "", "reset"], [47, 1, 1, "", "rollout"], [47, 1, 1, "", "set_extra_state"], [47, 1, 1, "", "set_seed"], [47, 1, 1, "", "share_memory"], [47, 3, 1, "", "specs"], [47, 1, 1, "", "state_dict"], [47, 1, 1, "", "step"], [47, 1, 1, "", "to"], [47, 1, 1, "", "to_empty"], [47, 1, 1, "", "train"], [47, 1, 1, "", "type"], [47, 1, 1, "", "update_kwargs"], [47, 1, 1, "", "xpu"], [47, 1, 1, "", "zero_grad"]], "torchrl.envs.SerialEnv": [[48, 1, 1, "", "add_module"], [48, 1, 1, "", "apply"], [48, 3, 1, "", "batch_locked"], [48, 1, 1, "", "bfloat16"], [48, 1, 1, "", "buffers"], [48, 1, 1, "", "children"], [48, 1, 1, "", "cpu"], [48, 1, 1, "", "cuda"], [48, 1, 1, "", "double"], [48, 1, 1, "", "eval"], [48, 1, 1, "", "extra_repr"], [48, 1, 1, "", "fake_tensordict"], [48, 1, 1, "", "float"], [48, 1, 1, "", "forward"], [48, 1, 1, "", "get_buffer"], [48, 1, 1, "", "get_extra_state"], [48, 1, 1, "", "get_parameter"], [48, 1, 1, "", "get_submodule"], [48, 1, 1, "", "half"], [48, 1, 1, "", "ipu"], [48, 1, 1, "", "load_state_dict"], [48, 1, 1, "", "modules"], [48, 1, 1, "", "named_buffers"], [48, 1, 1, "", "named_children"], [48, 1, 1, "", "named_modules"], [48, 1, 1, "", "named_parameters"], [48, 1, 1, "", "parameters"], [48, 1, 1, "", "rand_step"], [48, 1, 1, "", "register_backward_hook"], [48, 1, 1, "", "register_buffer"], [48, 1, 1, "", "register_forward_hook"], [48, 1, 1, "", "register_forward_pre_hook"], [48, 1, 1, "", "register_full_backward_hook"], [48, 1, 1, "", "register_full_backward_pre_hook"], [48, 1, 1, "", "register_load_state_dict_post_hook"], [48, 1, 1, "", "register_module"], [48, 1, 1, "", "register_parameter"], [48, 1, 1, "", "register_state_dict_pre_hook"], [48, 1, 1, "", "requires_grad_"], [48, 1, 1, "", "reset"], [48, 1, 1, "", "rollout"], [48, 1, 1, "", "set_extra_state"], [48, 1, 1, "", "set_seed"], [48, 1, 1, "", "share_memory"], [48, 3, 1, "", "specs"], [48, 1, 1, "", "state_dict"], [48, 1, 1, "", "step"], [48, 1, 1, "", "to"], [48, 1, 1, "", "to_empty"], [48, 1, 1, "", "train"], [48, 1, 1, "", "type"], [48, 1, 1, "", "update_kwargs"], [48, 1, 1, "", "xpu"], [48, 1, 1, "", "zero_grad"]], "torchrl.envs.Specs": [[49, 1, 1, "", "build_tensordict"]], "torchrl.envs.libs.brax": [[50, 2, 1, "", "BraxEnv"], [51, 2, 1, "", "BraxWrapper"]], "torchrl.envs.libs.dm_control": [[52, 2, 1, "", "DMControlEnv"], [53, 2, 1, "", "DMControlWrapper"]], "torchrl.envs.libs.gym": [[54, 2, 1, "", "GymEnv"], [55, 2, 1, "", "GymWrapper"]], "torchrl.envs.libs.habitat": [[56, 2, 1, "", "HabitatEnv"]], "torchrl.envs.libs.jumanji": [[57, 2, 1, "", "JumanjiEnv"], [58, 2, 1, "", "JumanjiWrapper"]], "torchrl.envs.libs.vmas": [[59, 2, 1, "", "VmasEnv"], [60, 2, 1, "", "VmasWrapper"]], "torchrl.envs.model_based.dreamer": [[61, 2, 1, "", "DreamerEnv"]], "torchrl.envs.transforms": [[62, 0, 1, "", "BinarizeReward"], [63, 0, 1, "", "CatFrames"], [64, 0, 1, "", "CatTensors"], [65, 0, 1, "", "CenterCrop"], [66, 0, 1, "", "Compose"], [67, 0, 1, "", "DiscreteActionProjection"], [68, 0, 1, "", "DoubleToFloat"], [69, 0, 1, "", "ExcludeTransform"], [70, 0, 1, "", "FiniteTensorDictCheck"], [71, 0, 1, "", "FlattenObservation"], [72, 0, 1, "", "FrameSkipTransform"], [73, 0, 1, "", "GrayScale"], [74, 0, 1, "", "NoopResetEnv"], [75, 0, 1, "", "ObservationNorm"], [76, 0, 1, "", "ObservationTransform"], [77, 0, 1, "", "PinMemoryTransform"], [78, 0, 1, "", "R3MTransform"], [79, 0, 1, "", "RandomCropTensorDict"], [80, 0, 1, "", "Resize"], [81, 0, 1, "", "RewardClipping"], [82, 0, 1, "", "RewardScaling"], [83, 0, 1, "", "RewardSum"], [84, 0, 1, "", "SelectTransform"], [85, 0, 1, "", "SqueezeTransform"], [86, 0, 1, "", "StepCounter"], [87, 0, 1, "", "TensorDictPrimer"], [88, 0, 1, "", "TimeMaxPool"], [89, 0, 1, "", "ToTensorImage"], [90, 0, 1, "", "Transform"], [91, 0, 1, "", "TransformedEnv"], [92, 0, 1, "", "UnsqueezeTransform"], [93, 0, 1, "", "VIPRewardTransform"], [94, 0, 1, "", "VIPTransform"], [95, 0, 1, "", "VecNorm"], [96, 0, 1, "", "gSDENoise"]], "torchrl.envs.transforms.BinarizeReward": [[62, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.CatFrames": [[63, 1, 1, "", "forward"], [63, 1, 1, "", "reset"], [63, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CatTensors": [[64, 1, 1, "", "forward"], [64, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.CenterCrop": [[65, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Compose": [[66, 1, 1, "", "forward"], [66, 1, 1, "", "reset"], [66, 1, 1, "", "to"], [66, 1, 1, "", "transform_input_spec"], [66, 1, 1, "", "transform_observation_spec"], [66, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.DiscreteActionProjection": [[67, 1, 1, "", "transform_input_spec"]], "torchrl.envs.transforms.DoubleToFloat": [[68, 1, 1, "", "transform_input_spec"], [68, 1, 1, "", "transform_observation_spec"], [68, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.ExcludeTransform": [[69, 1, 1, "", "forward"], [69, 1, 1, "", "reset"], [69, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FiniteTensorDictCheck": [[70, 1, 1, "", "forward"]], "torchrl.envs.transforms.FlattenObservation": [[71, 1, 1, "", "forward"], [71, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.FrameSkipTransform": [[72, 1, 1, "", "forward"]], "torchrl.envs.transforms.GrayScale": [[73, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.NoopResetEnv": [[74, 1, 1, "", "reset"]], "torchrl.envs.transforms.ObservationNorm": [[75, 1, 1, "", "init_stats"], [75, 1, 1, "", "transform_input_spec"], [75, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.PinMemoryTransform": [[77, 1, 1, "", "forward"]], "torchrl.envs.transforms.R3MTransform": [[78, 1, 1, "", "to"]], "torchrl.envs.transforms.RandomCropTensorDict": [[79, 1, 1, "", "forward"]], "torchrl.envs.transforms.Resize": [[80, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.RewardClipping": [[81, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardScaling": [[82, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.RewardSum": [[83, 1, 1, "", "reset"], [83, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.SelectTransform": [[84, 1, 1, "", "forward"], [84, 1, 1, "", "reset"], [84, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.StepCounter": [[86, 1, 1, "", "forward"], [86, 1, 1, "", "reset"], [86, 1, 1, "", "transform_input_spec"], [86, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TensorDictPrimer": [[87, 1, 1, "", "forward"], [87, 1, 1, "", "reset"], [87, 1, 1, "", "to"], [87, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.TimeMaxPool": [[88, 1, 1, "", "forward"], [88, 1, 1, "", "reset"], [88, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.ToTensorImage": [[89, 1, 1, "", "transform_observation_spec"]], "torchrl.envs.transforms.Transform": [[90, 1, 1, "", "forward"], [90, 1, 1, "", "reset"], [90, 1, 1, "", "transform_input_spec"], [90, 1, 1, "", "transform_observation_spec"], [90, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.TransformedEnv": [[91, 3, 1, "", "action_spec"], [91, 3, 1, "", "batch_locked"], [91, 1, 1, "", "eval"], [91, 3, 1, "", "input_spec"], [91, 1, 1, "", "load_state_dict"], [91, 3, 1, "", "observation_spec"], [91, 3, 1, "", "reward_spec"], [91, 1, 1, "", "set_seed"], [91, 1, 1, "", "state_dict"], [91, 1, 1, "", "to"], [91, 1, 1, "", "train"]], "torchrl.envs.transforms.UnsqueezeTransform": [[92, 1, 1, "", "transform_input_spec"], [92, 1, 1, "", "transform_observation_spec"], [92, 1, 1, "", "transform_reward_spec"]], "torchrl.envs.transforms.VIPRewardTransform": [[93, 1, 1, "", "forward"], [93, 1, 1, "", "reset"]], "torchrl.envs.transforms.VIPTransform": [[94, 1, 1, "", "to"]], "torchrl.envs.transforms.VecNorm": [[95, 1, 1, "", "build_td_for_shared_vecnorm"], [95, 1, 1, "", "forward"], [95, 1, 1, "", "get_extra_state"], [95, 1, 1, "", "set_extra_state"], [95, 1, 1, "", "to_observation_norm"]], "torchrl.envs.utils": [[97, 2, 1, "", "check_env_specs"], [98, 2, 1, "", "exploration_mode"], [99, 2, 1, "", "get_available_libraries"], [100, 2, 1, "", "set_exploration_mode"], [101, 2, 1, "", "step_mdp"]], "torchrl.modules": [[102, 0, 1, "", "CEMPlanner"], [103, 0, 1, "", "ConvNet"], [104, 0, 1, "", "DdpgCnnActor"], [105, 0, 1, "", "DdpgCnnQNet"], [106, 0, 1, "", "DdpgMlpActor"], [107, 0, 1, "", "DdpgMlpQNet"], [108, 0, 1, "", "Delta"], [109, 0, 1, "", "DistributionalDQNnet"], [110, 0, 1, "", "DreamerActor"], [111, 0, 1, "", "DuelingCnnDQNet"], [112, 0, 1, "", "IndependentNormal"], [113, 0, 1, "", "LSTMNet"], [114, 0, 1, "", "MLP"], [115, 0, 1, "", "MPCPlannerBase"], [116, 0, 1, "", "MPPIPlanner"], [117, 0, 1, "", "NoisyLazyLinear"], [118, 0, 1, "", "NoisyLinear"], [119, 0, 1, "", "NormalParamWrapper"], [120, 0, 1, "", "ObsDecoder"], [121, 0, 1, "", "ObsEncoder"], [122, 0, 1, "", "OneHotCategorical"], [123, 0, 1, "", "RSSMPosterior"], [124, 0, 1, "", "RSSMPrior"], [125, 0, 1, "", "TanhDelta"], [126, 0, 1, "", "TanhNormal"], [127, 0, 1, "", "TruncatedNormal"], [128, 0, 1, "", "reset_noise"]], "torchrl.modules.CEMPlanner": [[102, 1, 1, "", "planning"]], "torchrl.modules.ConvNet": [[103, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnActor": [[104, 1, 1, "", "forward"]], "torchrl.modules.DdpgCnnQNet": [[105, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpActor": [[106, 1, 1, "", "forward"]], "torchrl.modules.DdpgMlpQNet": [[107, 1, 1, "", "forward"]], "torchrl.modules.Delta": [[108, 1, 1, "", "log_prob"], [108, 3, 1, "", "mean"], [108, 3, 1, "", "mode"], [108, 1, 1, "", "rsample"], [108, 1, 1, "", "sample"]], "torchrl.modules.DistributionalDQNnet": [[109, 1, 1, "", "forward"]], "torchrl.modules.DreamerActor": [[110, 1, 1, "", "forward"]], "torchrl.modules.DuelingCnnDQNet": [[111, 1, 1, "", "forward"]], "torchrl.modules.IndependentNormal": [[112, 3, 1, "", "mode"]], "torchrl.modules.LSTMNet": [[113, 1, 1, "", "forward"]], "torchrl.modules.MLP": [[114, 1, 1, "", "forward"]], "torchrl.modules.MPCPlannerBase": [[115, 1, 1, "", "forward"], [115, 1, 1, "", "planning"]], "torchrl.modules.MPPIPlanner": [[116, 1, 1, "", "planning"]], "torchrl.modules.NoisyLazyLinear": [[117, 1, 1, "", "initialize_parameters"]], "torchrl.modules.NormalParamWrapper": [[119, 1, 1, "", "forward"]], "torchrl.modules.ObsDecoder": [[120, 1, 1, "", "forward"]], "torchrl.modules.ObsEncoder": [[121, 1, 1, "", "forward"]], "torchrl.modules.OneHotCategorical": [[122, 1, 1, "", "log_prob"], [122, 3, 1, "", "mode"], [122, 1, 1, "", "rsample"], [122, 1, 1, "", "sample"]], "torchrl.modules.RSSMPosterior": [[123, 1, 1, "", "forward"]], "torchrl.modules.RSSMPrior": [[124, 1, 1, "", "forward"]], "torchrl.modules.TanhDelta": [[125, 3, 1, "", "mean"], [125, 3, 1, "", "mode"]], "torchrl.modules.TanhNormal": [[126, 3, 1, "", "mode"]], "torchrl.modules.TruncatedNormal": [[127, 1, 1, "", "log_prob"], [127, 3, 1, "", "mode"]], "torchrl.modules.tensordict_module": [[129, 0, 1, "", "Actor"], [130, 0, 1, "", "ActorCriticOperator"], [131, 0, 1, "", "ActorCriticWrapper"], [132, 0, 1, "", "ActorValueOperator"], [133, 0, 1, "", "AdditiveGaussianWrapper"], [134, 0, 1, "", "DistributionalQValueActor"], [135, 0, 1, "", "EGreedyWrapper"], [136, 0, 1, "", "OrnsteinUhlenbeckProcessWrapper"], [137, 0, 1, "", "ProbabilisticActor"], [138, 0, 1, "", "QValueActor"], [139, 0, 1, "", "SafeModule"], [140, 0, 1, "", "SafeProbabilisticModule"], [141, 0, 1, "", "SafeProbabilisticSequential"], [142, 0, 1, "", "SafeSequential"], [143, 0, 1, "", "ValueOperator"], [144, 0, 1, "", "WorldModelWrapper"]], "torchrl.modules.tensordict_module.ActorCriticOperator": [[130, 1, 1, "", "get_critic_operator"], [130, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorCriticWrapper": [[131, 1, 1, "", "get_policy_operator"], [131, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.ActorValueOperator": [[132, 1, 1, "", "get_policy_operator"], [132, 1, 1, "", "get_value_operator"]], "torchrl.modules.tensordict_module.AdditiveGaussianWrapper": [[133, 1, 1, "", "forward"], [133, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.EGreedyWrapper": [[135, 1, 1, "", "forward"], [135, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper": [[136, 1, 1, "", "forward"], [136, 1, 1, "", "step"]], "torchrl.modules.tensordict_module.SafeModule": [[139, 1, 1, "", "random"], [139, 1, 1, "", "random_sample"], [139, 1, 1, "", "to"]], "torchrl.modules.tensordict_module.SafeProbabilisticModule": [[140, 1, 1, "", "random"], [140, 1, 1, "", "random_sample"]], "torchrl.modules.tensordict_module.WorldModelWrapper": [[144, 1, 1, "", "get_reward_operator"], [144, 1, 1, "", "get_transition_model_operator"]], "torchrl.modules.tensordict_module.actors": [[145, 0, 1, "", "DistributionalQValueHook"], [146, 0, 1, "", "QValueHook"]], "torchrl.modules.tensordict_module.common": [[147, 0, 1, "", "ensure_tensordict_compatible"], [148, 0, 1, "", "is_tensordict_compatible"]], "torchrl.modules.utils": [[149, 0, 1, "", "biased_softplus"], [150, 0, 1, "", "inv_softplus"], [151, 0, 1, "", "mappings"]], "torchrl.modules.utils.biased_softplus": [[149, 1, 1, "", "forward"]], "torchrl.objectives": [[152, 0, 1, "", "A2CLoss"], [153, 0, 1, "", "ClipPPOLoss"], [154, 0, 1, "", "DDPGLoss"], [155, 0, 1, "", "DQNLoss"], [156, 0, 1, "", "DistributionalDQNLoss"], [157, 0, 1, "", "DreamerActorLoss"], [158, 0, 1, "", "DreamerModelLoss"], [159, 0, 1, "", "DreamerValueLoss"], [160, 0, 1, "", "HardUpdate"], [161, 0, 1, "", "KLPENPPOLoss"], [162, 0, 1, "", "PPOLoss"], [163, 0, 1, "", "REDQLoss"], [164, 0, 1, "", "ReinforceLoss"], [165, 0, 1, "", "SACLoss"], [166, 0, 1, "", "SoftUpdate"], [167, 0, 1, "", "distance_loss"], [168, 0, 1, "", "hold_out_net"], [169, 0, 1, "", "hold_out_params"], [170, 0, 1, "", "next_state_value"]], "torchrl.objectives.A2CLoss": [[152, 1, 1, "", "forward"]], "torchrl.objectives.ClipPPOLoss": [[153, 1, 1, "", "forward"]], "torchrl.objectives.DDPGLoss": [[154, 1, 1, "", "forward"]], "torchrl.objectives.DQNLoss": [[155, 1, 1, "", "forward"]], "torchrl.objectives.DistributionalDQNLoss": [[156, 1, 1, "", "forward"]], "torchrl.objectives.DreamerActorLoss": [[157, 1, 1, "", "forward"]], "torchrl.objectives.DreamerModelLoss": [[158, 1, 1, "", "forward"]], "torchrl.objectives.DreamerValueLoss": [[159, 1, 1, "", "forward"]], "torchrl.objectives.KLPENPPOLoss": [[161, 1, 1, "", "forward"]], "torchrl.objectives.PPOLoss": [[162, 1, 1, "", "forward"]], "torchrl.objectives.REDQLoss": [[163, 1, 1, "", "forward"]], "torchrl.objectives.ReinforceLoss": [[164, 1, 1, "", "forward"]], "torchrl.objectives.SACLoss": [[165, 1, 1, "", "forward"]], "torchrl.objectives.value": [[171, 0, 1, "", "GAE"], [172, 0, 1, "", "TDEstimate"], [173, 0, 1, "", "TDLambdaEstimate"]], "torchrl.objectives.value.GAE": [[171, 1, 1, "", "forward"]], "torchrl.objectives.value.TDEstimate": [[172, 1, 1, "", "forward"]], "torchrl.objectives.value.TDLambdaEstimate": [[173, 1, 1, "", "forward"]], "torchrl.objectives.value.functional": [[174, 0, 1, "", "generalized_advantage_estimate"], [175, 0, 1, "", "td_advantage_estimate"], [176, 0, 1, "", "td_lambda_advantage_estimate"], [177, 0, 1, "", "td_lambda_return_estimate"], [178, 0, 1, "", "vec_generalized_advantage_estimate"], [179, 0, 1, "", "vec_td_lambda_advantage_estimate"], [180, 0, 1, "", "vec_td_lambda_return_estimate"]], "torchrl.record": [[181, 2, 1, "", "TensorDictRecorder"], [182, 2, 1, "", "VideoRecorder"]], "torchrl.record.loggers": [[183, 2, 1, "", "CSVLogger"], [184, 2, 1, "", "Logger"], [185, 2, 1, "", "MLFlowLogger"], [186, 2, 1, "", "TensorboardLogger"], [187, 2, 1, "", "WandbLogger"], [188, 2, 1, "", "generate_exp_name"], [189, 2, 1, "", "get_logger"]], "torchrl.trainers": [[190, 0, 1, "", "BatchSubSampler"], [191, 0, 1, "", "ClearCudaCache"], [192, 0, 1, "", "CountFramesLog"], [193, 0, 1, "", "LogReward"], [194, 0, 1, "", "OptimizerHook"], [195, 0, 1, "", "Recorder"], [196, 0, 1, "", "ReplayBufferTrainer"], [197, 0, 1, "", "RewardNormalizer"], [198, 0, 1, "", "SelectKeys"], [199, 0, 1, "", "Trainer"], [200, 0, 1, "", "TrainerHookBase"], [201, 0, 1, "", "UpdateWeights"]], "torchrl.trainers.helpers": [[202, 2, 1, "", "correct_for_frame_skip"], [203, 2, 1, "", "get_stats_random_rollout"], [204, 2, 1, "", "make_a2c_loss"], [205, 2, 1, "", "make_a2c_model"], [206, 2, 1, "", "make_collector_offpolicy"], [207, 2, 1, "", "make_collector_onpolicy"], [208, 2, 1, "", "make_ddpg_actor"], [209, 2, 1, "", "make_ddpg_loss"], [210, 2, 1, "", "make_dqn_actor"], [211, 2, 1, "", "make_dqn_loss"], [212, 2, 1, "", "make_ppo_loss"], [213, 2, 1, "", "make_ppo_model"], [214, 2, 1, "", "make_redq_loss"], [215, 2, 1, "", "make_redq_model"], [216, 2, 1, "", "make_replay_buffer"], [217, 2, 1, "", "make_sac_loss"], [218, 2, 1, "", "make_sac_model"], [219, 2, 1, "", "make_target_updater"], [220, 2, 1, "", "make_trainer"], [221, 2, 1, "", "parallel_env_constructor"], [222, 2, 1, "", "sync_async_collector"], [223, 2, 1, "", "sync_sync_collector"], [224, 2, 1, "", "transformed_env_constructor"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:function", "3": "py:property"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "function", "Python function"], "3": ["py", "property", "Python property"]}, "titleterms": {"welcom": 0, "torchrl": [0, 1, 2, 3, 5, 228, 229, 230, 231, 232, 233, 234, 237, 242, 243], "document": [0, 8], "tutori": [0, 234], "basic": 0, "intermedi": [0, 7], "advanc": 0, "refer": [0, 226], "knowledg": [0, 227], "base": [0, 227, 233], "indic": 0, "tabl": 0, "collector": [1, 232, 234, 243], "packag": [1, 2, 3, 228, 229, 230, 231], "data": [1, 2, 232, 234, 243], "helper": [1, 3], "function": [1, 234, 243], "replai": [2, 232, 234, 243], "buffer": [2, 232, 234, 243], "compos": [2, 66], "sotr": 2, "trajectori": [2, 232], "tensorspec": [2, 29], "util": [2, 228, 229, 230], "env": [3, 237, 242, 243], "vector": [3, 243], "transform": [3, 90, 232, 234, 237, 240, 242, 243], "clone": [3, 6], "record": [3, 195, 230, 232], "domain": 3, "specif": [3, 236], "librari": [3, 243], "work": [4, 5], "gym": [4, 242], "what": 4, "i": [4, 7, 241], "openai": 4, "version": [4, 6, 9], "habitat": 5, "lab": 5, "set": [5, 241], "up": 5, "your": [5, 232, 237], "environ": [5, 6, 232, 233, 234, 236, 237, 242, 243], "instal": [5, 6, 243], "from": [5, 6], "pip": [5, 6], "us": [5, 8, 232, 233, 238, 240, 243], "common": [5, 6, 7], "issu": [5, 6, 9], "about": 6, "mujoco": 6, "prerequisit": 6, "render": [6, 242], "all": 6, "new": 6, "bindindg": 6, "2": [6, 240], "1": [6, 240], "old": 6, "bind": 6, "py": 6, "option": 6, "repo": [6, 8], "when": 6, "pro": 7, "tip": 7, "debug": 7, "gradient": 7, "relat": 7, "error": 7, "newcom": 7, "my": 7, "train": [7, 232, 233, 234, 237], "too": 7, "slow": 7, "bug": 7, "resourc": 8, "pytorch": [8, 9], "functorch": [8, 240], "rl": [8, 243], "blog": 8, "websit": 8, "educ": 8, "forum": 8, "how": 9, "reproduc": 9, "workaround": 9, "implement_for": 10, "multisyncdatacollector": 11, "multiasyncdatacollector": 12, "randompolici": 13, "syncdatacollector": 14, "asyncdatacollector": 15, "split_trajectori": 16, "binarydiscretetensorspec": 17, "boundedtensorspec": 18, "compositespec": 19, "discretetensorspec": 20, "multidiscretetensorspec": 21, "multionehotdiscretetensorspec": 22, "multistep": 23, "onehotdiscretetensorspec": 24, "prioritizedreplaybuff": 25, "replaybuff": 26, "tensordictprioritizedreplaybuff": 27, "tensordictreplaybuff": 28, "unboundedcontinuoustensorspec": 30, "unboundeddiscretetensorspec": 31, "prioritizedsampl": 32, "randomsampl": 33, "sampler": 34, "lazymemmapstorag": 35, "lazytensorstorag": 36, "liststorag": 37, "storag": 38, "roundrobinwrit": 39, "writer": 40, "envbas": [41, 237], "envcreat": 42, "envmetadata": 43, "gymlikeenv": 44, "modelbasedenvbas": 45, "multithreadedenv": 46, "parallelenv": 47, "serialenv": 48, "spec": [49, 237, 242], "braxenv": 50, "braxwrapp": 51, "dmcontrolenv": 52, "dmcontrolwrapp": 53, "gymenv": 54, "gymwrapp": 55, "habitatenv": 56, "jumanjienv": 57, "jumanjiwrapp": 58, "vmasenv": 59, "vmaswrapp": 60, "dreamerenv": 61, "binarizereward": 62, "catfram": 63, "cattensor": 64, "centercrop": 65, "discreteactionproject": 67, "doubletofloat": 68, "excludetransform": 69, "finitetensordictcheck": 70, "flattenobserv": 71, "frameskiptransform": 72, "grayscal": 73, "noopresetenv": 74, "observationnorm": 75, "observationtransform": 76, "pinmemorytransform": 77, "r3mtransform": 78, "randomcroptensordict": 79, "resiz": 80, "rewardclip": 81, "rewardsc": 82, "rewardsum": 83, "selecttransform": 84, "squeezetransform": 85, "stepcount": 86, "tensordictprim": 87, "timemaxpool": 88, "totensorimag": 89, "transformedenv": 91, "unsqueezetransform": 92, "viprewardtransform": 93, "viptransform": 94, "vecnorm": [95, 242], "gsdenois": 96, "check_env_spec": 97, "exploration_mod": 98, "get_available_librari": 99, "set_exploration_mod": 100, "step_mdp": 101, "cemplann": 102, "convnet": 103, "ddpgcnnactor": 104, "ddpgcnnqnet": 105, "ddpgmlpactor": 106, "ddpgmlpqnet": 107, "delta": 108, "distributionaldqnnet": 109, "dreameractor": 110, "duelingcnndqnet": 111, "independentnorm": 112, "lstmnet": 113, "mlp": 114, "mpcplannerbas": 115, "mppiplann": 116, "noisylazylinear": 117, "noisylinear": 118, "normalparamwrapp": 119, "obsdecod": 120, "obsencod": 121, "onehotcategor": 122, "rssmposterior": 123, "rssmprior": 124, "tanhdelta": 125, "tanhnorm": 126, "truncatednorm": 127, "reset_nois": 128, "actor": [129, 240], "actorcriticoper": [130, 240], "actorcriticwrapp": 131, "actorvalueoper": 132, "additivegaussianwrapp": 133, "distributionalqvalueactor": 134, "egreedywrapp": 135, "ornsteinuhlenbeckprocesswrapp": 136, "probabilisticactor": [137, 240], "qvalueactor": 138, "safemodul": 139, "safeprobabilisticmodul": 140, "safeprobabilisticsequenti": 141, "safesequenti": 142, "valueoper": 143, "worldmodelwrapp": 144, "distributionalqvaluehook": 145, "qvaluehook": 146, "ensure_tensordict_compat": 147, "is_tensordict_compat": 148, "biased_softplu": 149, "inv_softplu": 150, "map": 151, "a2closs": 152, "clipppoloss": 153, "ddpgloss": 154, "dqnloss": 155, "distributionaldqnloss": 156, "dreameractorloss": 157, "dreamermodelloss": 158, "dreamervalueloss": 159, "hardupd": 160, "klpenppoloss": 161, "ppoloss": 162, "redqloss": 163, "reinforceloss": 164, "sacloss": 165, "softupd": 166, "distance_loss": 167, "hold_out_net": 168, "hold_out_param": 169, "next_state_valu": 170, "gae": 171, "tdestim": 172, "tdlambdaestim": 173, "generalized_advantage_estim": 174, "td_advantage_estim": 175, "td_lambda_advantage_estim": 176, "td_lambda_return_estim": 177, "vec_generalized_advantage_estim": 178, "vec_td_lambda_advantage_estim": 179, "vec_td_lambda_return_estim": 180, "tensordictrecord": 181, "videorecord": 182, "csvlogger": 183, "logger": [184, 230], "mlflowlogg": 185, "tensorboardlogg": 186, "wandblogg": 187, "generate_exp_nam": 188, "get_logg": 189, "batchsubsampl": 190, "clearcudacach": 191, "countframeslog": 192, "logreward": 193, "optimizerhook": 194, "replaybuffertrain": 196, "rewardnorm": 197, "selectkei": 198, "trainer": [199, 230], "trainerhookbas": 200, "updateweight": 201, "correct_for_frame_skip": 202, "get_stats_random_rollout": 203, "make_a2c_loss": 204, "make_a2c_model": 205, "make_collector_offpolici": 206, "make_collector_onpolici": 207, "make_ddpg_actor": 208, "make_ddpg_loss": 209, "make_dqn_actor": 210, "make_dqn_loss": 211, "make_ppo_loss": 212, "make_ppo_model": 213, "make_redq_loss": 214, "make_redq_model": 215, "make_replay_buff": 216, "make_sac_loss": 217, "make_sac_model": 218, "make_target_updat": 219, "make_train": 220, "parallel_env_constructor": 221, "sync_async_collector": 222, "sync_sync_collector": 223, "transformed_env_constructor": 224, "readm": [225, 235], "tuto": [225, 235], "api": 226, "contribut": [227, 243], "content": 227, "modul": [228, 243], "tensordict": [228, 241, 243], "hook": [228, 230], "model": [228, 232, 233, 238, 243], "explor": 228, "planner": 228, "distribut": 228, "object": [229, 232, 243], "dqn": [229, 233], "ddpg": [229, 232], "sac": 229, "redq": 229, "ppo": [229, 234], "a2c": 229, "reinforc": [229, 234], "dreamer": 229, "return": 229, "checkpoint": 230, "builder": 230, "_util": 231, "code": [232, 233, 241], "import": 232, "normal": [232, 234], "observ": 232, "parallel": [232, 236, 242], "execut": [232, 236, 237], "build": [232, 233], "evalu": 232, "hyperparamet": [232, 233, 234], "collect": [232, 234], "optim": 232, "initi": 232, "stat": 232, "polici": [232, 234, 236, 237], "q": [232, 233], "valu": [232, 234, 241], "network": [232, 233, 234], "creation": 232, "time": [232, 239], "experi": 232, "result": [232, 234], "sampl": 232, "td": [232, 233], "lambda": [232, 233], "pixel": 233, "The": 233, "problem": 233, "deep": 233, "regular": 233, "loop": [233, 234, 237], "conclus": [233, 234, 237], "possibl": 233, "improv": [233, 241], "learn": 234, "defin": 234, "paramet": 234, "an": [234, 237], "loss": 234, "next": 234, "step": [234, 242], "task": 236, "multi": 236, "divers": 236, "rollout": [236, 237, 242], "write": 237, "_step": 237, "_reset": 237, "seed": [237, 242], "wrap": 237, "thing": 237, "togeth": 237, "class": [237, 243], "test": 237, "our": 237, "batch": [237, 241], "comput": [237, 239], "simpl": [237, 240], "pretrain": 238, "tensordictmodul": [240, 243], "exampl": 240, "usag": [240, 241], "multipl": 240, "input": 240, "3": 240, "output": 240, "4": 240, "combin": 240, "tensordictsequenti": 240, "5": 240, "compat": 240, "do": [240, 241], "": 240, "don": 240, "t": [240, 241], "probabilistictensordictmodul": 240, "showcas": 240, "implement": 240, "benchmark": 240, "modular": 241, "can": 241, "thi": 241, "python": 241, "dict": 241, "structur": 241, "dictionari": 241, "featur": 241, "get": 241, "kei": 241, "updat": 241, "tensordict_or_dict": 241, "del": 241, "tensor": 241, "size": 241, "devic": [241, 242], "memori": 241, "share": 241, "via": 241, "physic": 241, "oper": 241, "reset": 242, "frame_skip": 242, "deepmind": 242, "control": 242, "run": 242, "close": 242, "access": 242, "attribut": 242, "kwarg": 242, "introduct": 243, "chang": 243, "config": 243, "sequenc": 243, "program": 243, "ensembl": 243, "meta": 243, "special": 243, "state": 243}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"Welcome to the TorchRL Documentation!": [[0, "welcome-to-the-torchrl-documentation"]], "Tutorials": [[0, "tutorials"]], "Basics": [[0, "basics"]], "Intermediate": [[0, "intermediate"]], "Advanced": [[0, "advanced"]], "References": [[0, "references"]], "Knowledge Base": [[0, "knowledge-base"], [227, "knowledge-base"]], "Indices and tables": [[0, "indices-and-tables"]], "torchrl.collectors package": [[1, "torchrl-collectors-package"]], "Data collectors": [[1, "data-collectors"]], "Helper functions": [[1, "helper-functions"]], "torchrl.data package": [[2, "torchrl-data-package"]], "Replay Buffers": [[2, "replay-buffers"]], "Composable Replay Buffers": [[2, "composable-replay-buffers"]], "Sotring trajectories": [[2, "sotring-trajectories"]], "TensorSpec": [[2, "tensorspec"], [29, "tensorspec"]], "Utils": [[2, "utils"], [228, "utils"], [229, "utils"], [230, "utils"]], "torchrl.envs package": [[3, "torchrl-envs-package"]], "Vectorized envs": [[3, "vectorized-envs"]], "Transforms": [[3, "transforms"], [232, "transforms"], [234, "transforms"], [243, "transforms"]], "Cloning transforms": [[3, "cloning-transforms"]], "Recorders": [[3, "recorders"]], "Helpers": [[3, "helpers"]], "Domain-specific": [[3, "domain-specific"]], "Libraries": [[3, "libraries"]], "Working with gym": [[4, "working-with-gym"]], "What is OpenAI Gym?": [[4, "what-is-openai-gym"]], "Versioning": [[4, "versioning"]], "Working with habitat-lab": [[5, "working-with-habitat-lab"]], "Setting up your environment for habitat and torchrl": [[5, "setting-up-your-environment-for-habitat-and-torchrl"]], "Installing habitat-lab from pip": [[5, "installing-habitat-lab-from-pip"]], "Installing TorchRL": [[5, "installing-torchrl"]], "Using Habitat": [[5, "using-habitat"]], "Common issues": [[5, "common-issues"]], "About MuJoCo": [[6, "about-mujoco"]], "Installing MuJoCo": [[6, "installing-mujoco"]], "Prerequisite for rendering (all mujoco versions)": [[6, "prerequisite-for-rendering-all-mujoco-versions"]], "New bindindgs (\u2265 2.1.2)": [[6, "new-bindindgs-2-1-2"]], "Old bindings (\u2264 2.1.1): mujoco-py": [[6, "old-bindings-2-1-1-mujoco-py"]], "Option 1: installing mujoco-py with pip": [[6, "option-1-installing-mujoco-py-with-pip"]], "Option 2: installing mujoco-py from a cloned repo": [[6, "option-2-installing-mujoco-py-from-a-cloned-repo"]], "Common Issues when rendering Mujoco Environments": [[6, "common-issues-when-rendering-mujoco-environments"]], "Pro-tips and Debugging": [[7, "pro-tips-and-debugging"]], "Gradient-related errors [Newcomers]": [[7, "gradient-related-errors-newcomers"]], "My Training is too slow [Newcomers / intermediate]": [[7, "my-training-is-too-slow-newcomers-intermediate"]], "Common bugs": [[7, "common-bugs"]], "Useful resources": [[8, "useful-resources"]], "Pytorch documentation": [[8, "pytorch-documentation"]], "functorch documentation": [[8, "functorch-documentation"]], "Useful RL repos, blogs and websites": [[8, "useful-rl-repos-blogs-and-websites"]], "Educational resource": [[8, "educational-resource"]], "Forums": [[8, "forums"]], "Repos": [[8, "repos"]], "Versioning Issues": [[9, "versioning-issues"]], "Pytorch version": [[9, "pytorch-version"]], "How to reproduce": [[9, "how-to-reproduce"]], "Workarounds": [[9, "workarounds"]], "implement_for": [[10, "implement-for"]], "MultiSyncDataCollector": [[11, "multisyncdatacollector"]], "MultiaSyncDataCollector": [[12, "multiasyncdatacollector"]], "RandomPolicy": [[13, "randompolicy"]], "SyncDataCollector": [[14, "syncdatacollector"]], "aSyncDataCollector": [[15, "asyncdatacollector"]], "split_trajectories": [[16, "split-trajectories"]], "BinaryDiscreteTensorSpec": [[17, "binarydiscretetensorspec"]], "BoundedTensorSpec": [[18, "boundedtensorspec"]], "CompositeSpec": [[19, "compositespec"]], "DiscreteTensorSpec": [[20, "discretetensorspec"]], "MultiDiscreteTensorSpec": [[21, "multidiscretetensorspec"]], "MultiOneHotDiscreteTensorSpec": [[22, "multionehotdiscretetensorspec"]], "MultiStep": [[23, "multistep"]], "OneHotDiscreteTensorSpec": [[24, "onehotdiscretetensorspec"]], "PrioritizedReplayBuffer": [[25, "prioritizedreplaybuffer"]], "ReplayBuffer": [[26, "replaybuffer"]], "TensorDictPrioritizedReplayBuffer": [[27, "tensordictprioritizedreplaybuffer"]], "TensorDictReplayBuffer": [[28, "tensordictreplaybuffer"]], "UnboundedContinuousTensorSpec": [[30, "unboundedcontinuoustensorspec"]], "UnboundedDiscreteTensorSpec": [[31, "unboundeddiscretetensorspec"]], "PrioritizedSampler": [[32, "prioritizedsampler"]], "RandomSampler": [[33, "randomsampler"]], "Sampler": [[34, "sampler"]], "LazyMemmapStorage": [[35, "lazymemmapstorage"]], "LazyTensorStorage": [[36, "lazytensorstorage"]], "ListStorage": [[37, "liststorage"]], "Storage": [[38, "storage"]], "RoundRobinWriter": [[39, "roundrobinwriter"]], "Writer": [[40, "writer"]], "EnvBase": [[41, "envbase"]], "EnvCreator": [[42, "envcreator"]], "EnvMetaData": [[43, "envmetadata"]], "GymLikeEnv": [[44, "gymlikeenv"]], "ModelBasedEnvBase": [[45, "modelbasedenvbase"]], "MultiThreadedEnv": [[46, "multithreadedenv"]], "ParallelEnv": [[47, "parallelenv"]], "SerialEnv": [[48, "serialenv"]], "Specs": [[49, "specs"], [237, "specs"]], "BraxEnv": [[50, "braxenv"]], "BraxWrapper": [[51, "braxwrapper"]], "DMControlEnv": [[52, "dmcontrolenv"]], "DMControlWrapper": [[53, "dmcontrolwrapper"]], "GymEnv": [[54, "gymenv"]], "GymWrapper": [[55, "gymwrapper"]], "HabitatEnv": [[56, "habitatenv"]], "JumanjiEnv": [[57, "jumanjienv"]], "JumanjiWrapper": [[58, "jumanjiwrapper"]], "VmasEnv": [[59, "vmasenv"]], "VmasWrapper": [[60, "vmaswrapper"]], "DreamerEnv": [[61, "dreamerenv"]], "BinarizeReward": [[62, "binarizereward"]], "CatFrames": [[63, "catframes"]], "CatTensors": [[64, "cattensors"]], "CenterCrop": [[65, "centercrop"]], "Compose": [[66, "compose"]], "DiscreteActionProjection": [[67, "discreteactionprojection"]], "DoubleToFloat": [[68, "doubletofloat"]], "ExcludeTransform": [[69, "excludetransform"]], "FiniteTensorDictCheck": [[70, "finitetensordictcheck"]], "FlattenObservation": [[71, "flattenobservation"]], "FrameSkipTransform": [[72, "frameskiptransform"]], "GrayScale": [[73, "grayscale"]], "NoopResetEnv": [[74, "noopresetenv"]], "ObservationNorm": [[75, "observationnorm"]], "ObservationTransform": [[76, "observationtransform"]], "PinMemoryTransform": [[77, "pinmemorytransform"]], "R3MTransform": [[78, "r3mtransform"]], "RandomCropTensorDict": [[79, "randomcroptensordict"]], "Resize": [[80, "resize"]], "RewardClipping": [[81, "rewardclipping"]], "RewardScaling": [[82, "rewardscaling"]], "RewardSum": [[83, "rewardsum"]], "SelectTransform": [[84, "selecttransform"]], "SqueezeTransform": [[85, "squeezetransform"]], "StepCounter": [[86, "stepcounter"]], "TensorDictPrimer": [[87, "tensordictprimer"]], "TimeMaxPool": [[88, "timemaxpool"]], "ToTensorImage": [[89, "totensorimage"]], "Transform": [[90, "transform"]], "TransformedEnv": [[91, "transformedenv"]], "UnsqueezeTransform": [[92, "unsqueezetransform"]], "VIPRewardTransform": [[93, "viprewardtransform"]], "VIPTransform": [[94, "viptransform"]], "VecNorm": [[95, "vecnorm"], [242, "vecnorm"]], "gSDENoise": [[96, "gsdenoise"]], "check_env_specs": [[97, "check-env-specs"]], "exploration_mode": [[98, "exploration-mode"]], "get_available_libraries": [[99, "get-available-libraries"]], "set_exploration_mode": [[100, "set-exploration-mode"]], "step_mdp": [[101, "step-mdp"]], "CEMPlanner": [[102, "cemplanner"]], "ConvNet": [[103, "convnet"]], "DdpgCnnActor": [[104, "ddpgcnnactor"]], "DdpgCnnQNet": [[105, "ddpgcnnqnet"]], "DdpgMlpActor": [[106, "ddpgmlpactor"]], "DdpgMlpQNet": [[107, "ddpgmlpqnet"]], "Delta": [[108, "delta"]], "DistributionalDQNnet": [[109, "distributionaldqnnet"]], "DreamerActor": [[110, "dreameractor"]], "DuelingCnnDQNet": [[111, "duelingcnndqnet"]], "IndependentNormal": [[112, "independentnormal"]], "LSTMNet": [[113, "lstmnet"]], "MLP": [[114, "mlp"]], "MPCPlannerBase": [[115, "mpcplannerbase"]], "MPPIPlanner": [[116, "mppiplanner"]], "NoisyLazyLinear": [[117, "noisylazylinear"]], "NoisyLinear": [[118, "noisylinear"]], "NormalParamWrapper": [[119, "normalparamwrapper"]], "ObsDecoder": [[120, "obsdecoder"]], "ObsEncoder": [[121, "obsencoder"]], "OneHotCategorical": [[122, "onehotcategorical"]], "RSSMPosterior": [[123, "rssmposterior"]], "RSSMPrior": [[124, "rssmprior"]], "TanhDelta": [[125, "tanhdelta"]], "TanhNormal": [[126, "tanhnormal"]], "TruncatedNormal": [[127, "truncatednormal"]], "reset_noise": [[128, "reset-noise"]], "Actor": [[129, "actor"], [240, "actor"]], "ActorCriticOperator": [[130, "actorcriticoperator"], [240, "actorcriticoperator"]], "ActorCriticWrapper": [[131, "actorcriticwrapper"]], "ActorValueOperator": [[132, "actorvalueoperator"]], "AdditiveGaussianWrapper": [[133, "additivegaussianwrapper"]], "DistributionalQValueActor": [[134, "distributionalqvalueactor"]], "EGreedyWrapper": [[135, "egreedywrapper"]], "OrnsteinUhlenbeckProcessWrapper": [[136, "ornsteinuhlenbeckprocesswrapper"]], "ProbabilisticActor": [[137, "probabilisticactor"], [240, "probabilisticactor"]], "QValueActor": [[138, "qvalueactor"]], "SafeModule": [[139, "safemodule"]], "SafeProbabilisticModule": [[140, "safeprobabilisticmodule"]], "SafeProbabilisticSequential": [[141, "safeprobabilisticsequential"]], "SafeSequential": [[142, "safesequential"]], "ValueOperator": [[143, "valueoperator"]], "WorldModelWrapper": [[144, "worldmodelwrapper"]], "DistributionalQValueHook": [[145, "distributionalqvaluehook"]], "QValueHook": [[146, "qvaluehook"]], "ensure_tensordict_compatible": [[147, "ensure-tensordict-compatible"]], "is_tensordict_compatible": [[148, "is-tensordict-compatible"]], "biased_softplus": [[149, "biased-softplus"]], "inv_softplus": [[150, "inv-softplus"]], "mappings": [[151, "mappings"]], "A2CLoss": [[152, "a2closs"]], "ClipPPOLoss": [[153, "clipppoloss"]], "DDPGLoss": [[154, "ddpgloss"]], "DQNLoss": [[155, "dqnloss"]], "DistributionalDQNLoss": [[156, "distributionaldqnloss"]], "DreamerActorLoss": [[157, "dreameractorloss"]], "DreamerModelLoss": [[158, "dreamermodelloss"]], "DreamerValueLoss": [[159, "dreamervalueloss"]], "HardUpdate": [[160, "hardupdate"]], "KLPENPPOLoss": [[161, "klpenppoloss"]], "PPOLoss": [[162, "ppoloss"]], "REDQLoss": [[163, "redqloss"]], "ReinforceLoss": [[164, "reinforceloss"]], "SACLoss": [[165, "sacloss"]], "SoftUpdate": [[166, "softupdate"]], "distance_loss": [[167, "distance-loss"]], "hold_out_net": [[168, "hold-out-net"]], "hold_out_params": [[169, "hold-out-params"]], "next_state_value": [[170, "next-state-value"]], "GAE": [[171, "gae"]], "TDEstimate": [[172, "tdestimate"]], "TDLambdaEstimate": [[173, "tdlambdaestimate"]], "generalized_advantage_estimate": [[174, "generalized-advantage-estimate"]], "td_advantage_estimate": [[175, "td-advantage-estimate"]], "td_lambda_advantage_estimate": [[176, "td-lambda-advantage-estimate"]], "td_lambda_return_estimate": [[177, "td-lambda-return-estimate"]], "vec_generalized_advantage_estimate": [[178, "vec-generalized-advantage-estimate"]], "vec_td_lambda_advantage_estimate": [[179, "vec-td-lambda-advantage-estimate"]], "vec_td_lambda_return_estimate": [[180, "vec-td-lambda-return-estimate"]], "TensorDictRecorder": [[181, "tensordictrecorder"]], "VideoRecorder": [[182, "videorecorder"]], "CSVLogger": [[183, "csvlogger"]], "Logger": [[184, "logger"]], "MLFlowLogger": [[185, "mlflowlogger"]], "TensorboardLogger": [[186, "tensorboardlogger"]], "WandbLogger": [[187, "wandblogger"]], "generate_exp_name": [[188, "generate-exp-name"]], "get_logger": [[189, "get-logger"]], "BatchSubSampler": [[190, "batchsubsampler"]], "ClearCudaCache": [[191, "clearcudacache"]], "CountFramesLog": [[192, "countframeslog"]], "LogReward": [[193, "logreward"]], "OptimizerHook": [[194, "optimizerhook"]], "Recorder": [[195, "recorder"], [232, "recorder"]], "ReplayBufferTrainer": [[196, "replaybuffertrainer"]], "RewardNormalizer": [[197, "rewardnormalizer"]], "SelectKeys": [[198, "selectkeys"]], "Trainer": [[199, "trainer"]], "TrainerHookBase": [[200, "trainerhookbase"]], "UpdateWeights": [[201, "updateweights"]], "correct_for_frame_skip": [[202, "correct-for-frame-skip"]], "get_stats_random_rollout": [[203, "get-stats-random-rollout"]], "make_a2c_loss": [[204, "make-a2c-loss"]], "make_a2c_model": [[205, "make-a2c-model"]], "make_collector_offpolicy": [[206, "make-collector-offpolicy"]], "make_collector_onpolicy": [[207, "make-collector-onpolicy"]], "make_ddpg_actor": [[208, "make-ddpg-actor"]], "make_ddpg_loss": [[209, "make-ddpg-loss"]], "make_dqn_actor": [[210, "make-dqn-actor"]], "make_dqn_loss": [[211, "make-dqn-loss"]], "make_ppo_loss": [[212, "make-ppo-loss"]], "make_ppo_model": [[213, "make-ppo-model"]], "make_redq_loss": [[214, "make-redq-loss"]], "make_redq_model": [[215, "make-redq-model"]], "make_replay_buffer": [[216, "make-replay-buffer"]], "make_sac_loss": [[217, "make-sac-loss"]], "make_sac_model": [[218, "make-sac-model"]], "make_target_updater": [[219, "make-target-updater"]], "make_trainer": [[220, "make-trainer"]], "parallel_env_constructor": [[221, "parallel-env-constructor"]], "sync_async_collector": [[222, "sync-async-collector"]], "sync_sync_collector": [[223, "sync-sync-collector"]], "transformed_env_constructor": [[224, "transformed-env-constructor"]], "README Tutos": [[225, "readme-tutos"], [235, "readme-tutos"]], "API Reference": [[226, "api-reference"]], "Contributing": [[227, "contributing"], [243, "contributing"]], "Contents:": [[227, null]], "torchrl.modules package": [[228, "torchrl-modules-package"]], "TensorDict modules": [[228, "tensordict-modules"]], "Hooks": [[228, "hooks"]], "Models": [[228, "models"], [243, "models"]], "Exploration": [[228, "exploration"]], "Planners": [[228, "planners"]], "Distributions": [[228, "distributions"]], "torchrl.objectives package": [[229, "torchrl-objectives-package"]], "DQN": [[229, "dqn"]], "DDPG": [[229, "ddpg"]], "SAC": [[229, "sac"]], "REDQ": [[229, "redq"]], "PPO": [[229, "ppo"]], "A2C": [[229, "a2c"]], "Reinforce": [[229, "reinforce"]], "Dreamer": [[229, "dreamer"]], "Returns": [[229, "returns"]], "torchrl.trainers package": [[230, "torchrl-trainers-package"]], "Checkpointing": [[230, "checkpointing"]], "Trainer and hooks": [[230, "trainer-and-hooks"]], "Builders": [[230, "builders"]], "Loggers": [[230, "loggers"]], "Recording utils": [[230, "recording-utils"]], "torchrl._utils package": [[231, "torchrl-utils-package"]], "Coding DDPG using TorchRL": [[232, "coding-ddpg-using-torchrl"]], "Imports": [[232, "imports"]], "Environment": [[232, "environment"], [232, "id1"]], "Normalization of the observations": [[232, "normalization-of-the-observations"]], "Parallel execution": [[232, "parallel-execution"]], "Building the model": [[232, "building-the-model"]], "Evaluator: building your recorder object": [[232, "evaluator-building-your-recorder-object"]], "Replay buffer": [[232, "replay-buffer"], [232, "id2"], [232, "id3"], [234, "replay-buffer"]], "Hyperparameters": [[232, "hyperparameters"], [233, "hyperparameters"]], "Collection": [[232, "collection"]], "Optimizer and optimization": [[232, "optimizer-and-optimization"]], "Model": [[232, "model"]], "Initialization": [[232, "initialization"]], "Normalization stats": [[232, "normalization-stats"]], "Models: policy and q-value network": [[232, "models-policy-and-q-value-network"]], "Parallel environment creation": [[232, "parallel-environment-creation"]], "Data collector": [[232, "data-collector"], [234, "data-collector"]], "Optimizer": [[232, "optimizer"]], "Time to train the policy": [[232, "time-to-train-the-policy"]], "Experiment results": [[232, "experiment-results"]], "Sampling trajectories and using TD(lambda)": [[232, "sampling-trajectories-and-using-td-lambda"]], "Coding a pixel-based DQN using TorchRL": [[233, "coding-a-pixel-based-dqn-using-torchrl"]], "Building the environment": [[233, "building-the-environment"]], "The problem": [[233, "the-problem"]], "Building the model (Deep Q-network)": [[233, "building-the-model-deep-q-network"]], "Regular DQN": [[233, "regular-dqn"]], "Training loop": [[233, "training-loop"], [233, "id1"], [234, "training-loop"], [237, "training-loop"]], "TD-lambda": [[233, "td-lambda"]], "Conclusion and possible improvements": [[233, "conclusion-and-possible-improvements"]], "Reinforcement Learning (PPO) with TorchRL Tutorial": [[234, "reinforcement-learning-ppo-with-torchrl-tutorial"]], "Define Hyperparameters": [[234, "define-hyperparameters"]], "Data collection parameters": [[234, "data-collection-parameters"]], "PPO parameters": [[234, "ppo-parameters"]], "Define an environment": [[234, "define-an-environment"]], "Normalization": [[234, "normalization"]], "Policy": [[234, "policy"], [236, "policy"]], "Value network": [[234, "value-network"]], "Loss function": [[234, "loss-function"]], "Results": [[234, "results"]], "Conclusion and next steps": [[234, "conclusion-and-next-steps"]], "Task-specific policy in multi-task environments": [[236, "task-specific-policy-in-multi-task-environments"]], "Executing diverse tasks in parallel": [[236, "executing-diverse-tasks-in-parallel"]], "Rollout": [[236, "rollout"]], "Writing your environment with TorchRL": [[237, "writing-your-environment-with-torchrl"]], "_step()": [[237, "step"]], "_reset()": [[237, "reset"]], "Seeding": [[237, "seeding"], [242, "seeding"]], "Wrapping things together: the torchrl.envs.EnvBase class": [[237, "wrapping-things-together-the-torchrl-envs-envbase-class"]], "Testing our environment": [[237, "testing-our-environment"]], "Transforming an environment": [[237, "transforming-an-environment"]], "Executing a rollout": [[237, "executing-a-rollout"]], "Batching computations": [[237, "batching-computations"]], "Training a simple policy": [[237, "training-a-simple-policy"]], "Conclusion": [[237, "conclusion"]], "Using pretrained models": [[238, "using-pretrained-models"]], "Computation times": [[239, "computation-times"]], "TensorDictModule": [[240, "tensordictmodule"]], "TensorDictModule by examples": [[240, "tensordictmodule-by-examples"]], "Example 1: Simple usage": [[240, "example-1-simple-usage"]], "Example 2: Multiple inputs": [[240, "example-2-multiple-inputs"]], "Example 3: Multiple outputs": [[240, "example-3-multiple-outputs"]], "Example 4: Combining multiple TensorDictModule with TensorDictSequential": [[240, "example-4-combining-multiple-tensordictmodule-with-tensordictsequential"]], "Example 5: Compatibility with functorch": [[240, "example-5-compatibility-with-functorch"]], "Do\u2019s and don\u2019t with TensorDictModule": [[240, "do-s-and-don-t-with-tensordictmodule"]], "ProbabilisticTensorDictModule": [[240, "probabilistictensordictmodule"]], "Showcase: Implementing a transformer using TensorDictModule": [[240, "showcase-implementing-a-transformer-using-tensordictmodule"]], "Benchmarking": [[240, "benchmarking"]], "TensorDict": [[241, "tensordict"], [243, "tensordict"]], "Improving the modularity of codes": [[241, "improving-the-modularity-of-codes"]], "Can\u2019t I do this with a python dict?": [[241, "can-t-i-do-this-with-a-python-dict"]], "TensorDict structure": [[241, "tensordict-structure"]], "TensorDict Dictionary Features": [[241, "tensordict-dictionary-features"]], "get(key)": [[241, "get-key"]], "set(key, value)": [[241, "set-key-value"]], "keys()": [[241, "keys"]], "values()": [[241, "values"]], "update(tensordict_or_dict)": [[241, "update-tensordict-or-dict"]], "del": [[241, "del"]], "TensorDict tensor features": [[241, "tensordict-tensor-features"]], "Batch size": [[241, "batch-size"]], "Devices": [[241, "devices"]], "Memory sharing via physical memory usage": [[241, "memory-sharing-via-physical-memory-usage"]], "Tensor operations": [[241, "tensor-operations"]], "TorchRL envs": [[242, "torchrl-envs"]], "Gym environments": [[242, "gym-environments"]], "Env Specs": [[242, "env-specs"]], "Seeding, resetting and steps": [[242, "seeding-resetting-and-steps"]], "Rollouts": [[242, "rollouts"]], "frame_skip": [[242, "frame-skip"]], "Rendering": [[242, "rendering"]], "DeepMind Control environments": [[242, "deepmind-control-environments"]], "Transforming envs": [[242, "transforming-envs"]], "Environment device": [[242, "environment-device"]], "Running environments in parallel": [[242, "running-environments-in-parallel"]], "Closing parallel environments": [[242, "closing-parallel-environments"]], "Accessing environment attributes": [[242, "accessing-environment-attributes"]], "kwargs for parallel environments": [[242, "kwargs-for-parallel-environments"]], "Transforming parallel environments": [[242, "transforming-parallel-environments"]], "Introduction to TorchRL": [[243, "introduction-to-torchrl"]], "Data": [[243, "data"]], "Replay buffers": [[243, "replay-buffers"]], "Envs": [[243, "envs"]], "Changing environments config": [[243, "changing-environments-config"]], "Vectorized Environments": [[243, "vectorized-environments"]], "Modules": [[243, "modules"]], "TensorDictModules": [[243, "tensordictmodules"]], "Sequences of Modules": [[243, "sequences-of-modules"]], "Functional Programming (Ensembling / Meta-RL)": [[243, "functional-programming-ensembling-meta-rl"]], "Specialized Classes": [[243, "specialized-classes"]], "Using Environments and Modules": [[243, "using-environments-and-modules"]], "Collectors": [[243, "collectors"]], "Objectives": [[243, "objectives"]], "State of the Library": [[243, "state-of-the-library"]], "Installing the Library": [[243, "installing-the-library"]]}, "indexentries": {"implement_for (class in torchrl._utils)": [[10, "torchrl._utils.implement_for"]], "multisyncdatacollector (class in torchrl.collectors.collectors)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multisyncdatacollector method)": [[11, "torchrl.collectors.collectors.MultiSyncDataCollector.update_policy_weights_"]], "multiasyncdatacollector (class in torchrl.collectors.collectors)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.multiasyncdatacollector method)": [[12, "torchrl.collectors.collectors.MultiaSyncDataCollector.update_policy_weights_"]], "randompolicy (class in torchrl.collectors.collectors)": [[13, "torchrl.collectors.collectors.RandomPolicy"]], "syncdatacollector (class in torchrl.collectors.collectors)": [[14, "torchrl.collectors.collectors.SyncDataCollector"]], "iterator() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.iterator"]], "load_state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.reset"]], "rollout() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.rollout"]], "set_seed() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.syncdatacollector method)": [[14, "torchrl.collectors.collectors.SyncDataCollector.update_policy_weights_"]], "asyncdatacollector (class in torchrl.collectors.collectors)": [[15, "torchrl.collectors.collectors.aSyncDataCollector"]], "load_state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.load_state_dict"]], "reset() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.reset"]], "set_seed() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.set_seed"]], "shutdown() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.shutdown"]], "state_dict() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.state_dict"]], "update_policy_weights_() (torchrl.collectors.collectors.asyncdatacollector method)": [[15, "torchrl.collectors.collectors.aSyncDataCollector.update_policy_weights_"]], "split_trajectories() (in module torchrl.collectors.utils)": [[16, "torchrl.collectors.utils.split_trajectories"]], "binarydiscretetensorspec (class in torchrl.data)": [[17, "torchrl.data.BinaryDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.encode"]], "expand() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.expand"]], "index() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.index"]], "is_in() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.is_in"]], "project() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.project"]], "rand() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.binarydiscretetensorspec method)": [[17, "torchrl.data.BinaryDiscreteTensorSpec.zero"]], "boundedtensorspec (class in torchrl.data)": [[18, "torchrl.data.BoundedTensorSpec"]], "assert_is_in() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.assert_is_in"]], "encode() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.encode"]], "expand() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.expand"]], "index() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.index"]], "is_in() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.is_in"]], "project() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.project"]], "rand() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.rand"]], "to_numpy() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.to_numpy"]], "type_check() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.type_check"]], "zero() (torchrl.data.boundedtensorspec method)": [[18, "torchrl.data.BoundedTensorSpec.zero"]], "compositespec (class in torchrl.data)": [[19, "torchrl.data.CompositeSpec"]], "assert_is_in() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.assert_is_in"]], "encode() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.encode"]], "expand() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.expand"]], "index() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.index"]], "is_in() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.is_in"]], "keys() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.keys"]], "project() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.project"]], "rand() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.rand"]], "to_numpy() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.to_numpy"]], "type_check() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.type_check"]], "zero() (torchrl.data.compositespec method)": [[19, "torchrl.data.CompositeSpec.zero"]], "discretetensorspec (class in torchrl.data)": [[20, "torchrl.data.DiscreteTensorSpec"]], "assert_is_in() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.encode"]], "expand() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.expand"]], "index() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.index"]], "is_in() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.is_in"]], "project() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.project"]], "rand() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.type_check"]], "zero() (torchrl.data.discretetensorspec method)": [[20, "torchrl.data.DiscreteTensorSpec.zero"]], "multidiscretetensorspec (class in torchrl.data)": [[21, "torchrl.data.MultiDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.expand"]], "index() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.project"]], "rand() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multidiscretetensorspec method)": [[21, "torchrl.data.MultiDiscreteTensorSpec.zero"]], "multionehotdiscretetensorspec (class in torchrl.data)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.expand"]], "index() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.multionehotdiscretetensorspec method)": [[22, "torchrl.data.MultiOneHotDiscreteTensorSpec.zero"]], "multistep (class in torchrl.data)": [[23, "torchrl.data.MultiStep"]], "add_module() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.add_module"]], "apply() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.apply"]], "bfloat16() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.bfloat16"]], "buffers() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.buffers"]], "children() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.children"]], "cpu() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.cpu"]], "cuda() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.cuda"]], "double() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.double"]], "eval() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.eval"]], "extra_repr() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.extra_repr"]], "float() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.float"]], "forward() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.forward"]], "get_buffer() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.get_buffer"]], "get_extra_state() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.get_extra_state"]], "get_parameter() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.get_parameter"]], "get_submodule() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.get_submodule"]], "half() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.half"]], "ipu() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.ipu"]], "load_state_dict() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.load_state_dict"]], "modules() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.modules"]], "named_buffers() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.named_buffers"]], "named_children() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.named_children"]], "named_modules() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.named_modules"]], "named_parameters() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.named_parameters"]], "parameters() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.parameters"]], "register_backward_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_backward_hook"]], "register_buffer() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_buffer"]], "register_forward_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_forward_hook"]], "register_forward_pre_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_load_state_dict_post_hook"]], "register_module() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_module"]], "register_parameter() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_parameter"]], "register_state_dict_pre_hook() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.requires_grad_"]], "set_extra_state() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.set_extra_state"]], "share_memory() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.share_memory"]], "state_dict() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.state_dict"]], "to() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.to"]], "to_empty() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.to_empty"]], "train() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.train"]], "type() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.type"]], "xpu() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.xpu"]], "zero_grad() (torchrl.data.multistep method)": [[23, "torchrl.data.MultiStep.zero_grad"]], "onehotdiscretetensorspec (class in torchrl.data)": [[24, "torchrl.data.OneHotDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.encode"]], "expand() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.expand"]], "index() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.index"]], "is_in() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.is_in"]], "project() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.project"]], "rand() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.onehotdiscretetensorspec method)": [[24, "torchrl.data.OneHotDiscreteTensorSpec.zero"]], "prioritizedreplaybuffer (class in torchrl.data)": [[25, "torchrl.data.PrioritizedReplayBuffer"]], "add() (torchrl.data.prioritizedreplaybuffer method)": [[25, "torchrl.data.PrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.prioritizedreplaybuffer method)": [[25, "torchrl.data.PrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.prioritizedreplaybuffer method)": [[25, "torchrl.data.PrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.prioritizedreplaybuffer method)": [[25, "torchrl.data.PrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.prioritizedreplaybuffer method)": [[25, "torchrl.data.PrioritizedReplayBuffer.sample"]], "replaybuffer (class in torchrl.data)": [[26, "torchrl.data.ReplayBuffer"]], "add() (torchrl.data.replaybuffer method)": [[26, "torchrl.data.ReplayBuffer.add"]], "append_transform() (torchrl.data.replaybuffer method)": [[26, "torchrl.data.ReplayBuffer.append_transform"]], "extend() (torchrl.data.replaybuffer method)": [[26, "torchrl.data.ReplayBuffer.extend"]], "insert_transform() (torchrl.data.replaybuffer method)": [[26, "torchrl.data.ReplayBuffer.insert_transform"]], "sample() (torchrl.data.replaybuffer method)": [[26, "torchrl.data.ReplayBuffer.sample"]], "tensordictprioritizedreplaybuffer (class in torchrl.data)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer"]], "add() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictprioritizedreplaybuffer method)": [[27, "torchrl.data.TensorDictPrioritizedReplayBuffer.sample"]], "tensordictreplaybuffer (class in torchrl.data)": [[28, "torchrl.data.TensorDictReplayBuffer"]], "add() (torchrl.data.tensordictreplaybuffer method)": [[28, "torchrl.data.TensorDictReplayBuffer.add"]], "append_transform() (torchrl.data.tensordictreplaybuffer method)": [[28, "torchrl.data.TensorDictReplayBuffer.append_transform"]], "extend() (torchrl.data.tensordictreplaybuffer method)": [[28, "torchrl.data.TensorDictReplayBuffer.extend"]], "insert_transform() (torchrl.data.tensordictreplaybuffer method)": [[28, "torchrl.data.TensorDictReplayBuffer.insert_transform"]], "sample() (torchrl.data.tensordictreplaybuffer method)": [[28, "torchrl.data.TensorDictReplayBuffer.sample"]], "tensorspec (class in torchrl.data)": [[29, "torchrl.data.TensorSpec"]], "assert_is_in() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.assert_is_in"]], "encode() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.encode"]], "expand() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.expand"]], "index() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.index"]], "is_in() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.is_in"]], "project() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.project"]], "rand() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.rand"]], "to_numpy() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.to_numpy"]], "type_check() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.type_check"]], "zero() (torchrl.data.tensorspec method)": [[29, "torchrl.data.TensorSpec.zero"]], "unboundedcontinuoustensorspec (class in torchrl.data)": [[30, "torchrl.data.UnboundedContinuousTensorSpec"]], "assert_is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.encode"]], "expand() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.expand"]], "index() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.index"]], "is_in() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.is_in"]], "project() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.project"]], "rand() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.rand"]], "to_numpy() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.type_check"]], "zero() (torchrl.data.unboundedcontinuoustensorspec method)": [[30, "torchrl.data.UnboundedContinuousTensorSpec.zero"]], "unboundeddiscretetensorspec (class in torchrl.data)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec"]], "assert_is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.assert_is_in"]], "encode() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.encode"]], "expand() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.expand"]], "index() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.index"]], "is_in() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.is_in"]], "project() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.project"]], "rand() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.rand"]], "to_numpy() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.to_numpy"]], "type_check() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.type_check"]], "zero() (torchrl.data.unboundeddiscretetensorspec method)": [[31, "torchrl.data.UnboundedDiscreteTensorSpec.zero"]], "prioritizedsampler (class in torchrl.data.replay_buffers.samplers)": [[32, "torchrl.data.replay_buffers.samplers.PrioritizedSampler"]], "update_priority() (torchrl.data.replay_buffers.samplers.prioritizedsampler method)": [[32, "torchrl.data.replay_buffers.samplers.PrioritizedSampler.update_priority"]], "randomsampler (class in torchrl.data.replay_buffers.samplers)": [[33, "torchrl.data.replay_buffers.samplers.RandomSampler"]], "sampler (class in torchrl.data.replay_buffers.samplers)": [[34, "torchrl.data.replay_buffers.samplers.Sampler"]], "lazymemmapstorage (class in torchrl.data.replay_buffers.storages)": [[35, "torchrl.data.replay_buffers.storages.LazyMemmapStorage"]], "attach() (torchrl.data.replay_buffers.storages.lazymemmapstorage method)": [[35, "torchrl.data.replay_buffers.storages.LazyMemmapStorage.attach"]], "lazytensorstorage (class in torchrl.data.replay_buffers.storages)": [[36, "torchrl.data.replay_buffers.storages.LazyTensorStorage"]], "attach() (torchrl.data.replay_buffers.storages.lazytensorstorage method)": [[36, "torchrl.data.replay_buffers.storages.LazyTensorStorage.attach"]], "liststorage (class in torchrl.data.replay_buffers.storages)": [[37, "torchrl.data.replay_buffers.storages.ListStorage"]], "attach() (torchrl.data.replay_buffers.storages.liststorage method)": [[37, "torchrl.data.replay_buffers.storages.ListStorage.attach"]], "storage (class in torchrl.data.replay_buffers.storages)": [[38, "torchrl.data.replay_buffers.storages.Storage"]], "attach() (torchrl.data.replay_buffers.storages.storage method)": [[38, "torchrl.data.replay_buffers.storages.Storage.attach"]], "roundrobinwriter (class in torchrl.data.replay_buffers.writers)": [[39, "torchrl.data.replay_buffers.writers.RoundRobinWriter"]], "add() (torchrl.data.replay_buffers.writers.roundrobinwriter method)": [[39, "torchrl.data.replay_buffers.writers.RoundRobinWriter.add"]], "extend() (torchrl.data.replay_buffers.writers.roundrobinwriter method)": [[39, "torchrl.data.replay_buffers.writers.RoundRobinWriter.extend"]], "writer (class in torchrl.data.replay_buffers.writers)": [[40, "torchrl.data.replay_buffers.writers.Writer"]], "add() (torchrl.data.replay_buffers.writers.writer method)": [[40, "torchrl.data.replay_buffers.writers.Writer.add"]], "extend() (torchrl.data.replay_buffers.writers.writer method)": [[40, "torchrl.data.replay_buffers.writers.Writer.extend"]], "envbase (class in torchrl.envs)": [[41, "torchrl.envs.EnvBase"]], "add_module() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.add_module"]], "apply() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.apply"]], "batch_locked (torchrl.envs.envbase property)": [[41, "torchrl.envs.EnvBase.batch_locked"]], "bfloat16() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.bfloat16"]], "buffers() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.buffers"]], "children() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.children"]], "cpu() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.cpu"]], "cuda() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.cuda"]], "double() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.double"]], "eval() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.eval"]], "extra_repr() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.extra_repr"]], "fake_tensordict() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.fake_tensordict"]], "float() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.float"]], "forward() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.forward"]], "get_buffer() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.get_buffer"]], "get_extra_state() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.get_extra_state"]], "get_parameter() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.get_parameter"]], "get_submodule() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.get_submodule"]], "half() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.half"]], "ipu() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.ipu"]], "load_state_dict() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.load_state_dict"]], "modules() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.modules"]], "named_buffers() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.named_buffers"]], "named_children() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.named_children"]], "named_modules() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.named_modules"]], "named_parameters() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.named_parameters"]], "parameters() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.parameters"]], "rand_step() (torchrl.envs.envbase method)": [[41, "id0"], [41, "torchrl.envs.EnvBase.rand_step"]], "register_backward_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_backward_hook"]], "register_buffer() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_buffer"]], "register_forward_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_module"]], "register_parameter() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.requires_grad_"]], "reset() (torchrl.envs.envbase method)": [[41, "id1"], [41, "torchrl.envs.EnvBase.reset"]], "rollout() (torchrl.envs.envbase method)": [[41, "id2"], [41, "torchrl.envs.EnvBase.rollout"]], "set_extra_state() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.set_extra_state"]], "set_seed() (torchrl.envs.envbase method)": [[41, "id3"], [41, "torchrl.envs.EnvBase.set_seed"]], "share_memory() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.share_memory"]], "specs (torchrl.envs.envbase property)": [[41, "torchrl.envs.EnvBase.specs"]], "state_dict() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.state_dict"]], "step() (torchrl.envs.envbase method)": [[41, "id4"], [41, "torchrl.envs.EnvBase.step"]], "to() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.to"]], "to_empty() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.to_empty"]], "train() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.train"]], "type() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.type"]], "xpu() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.xpu"]], "zero_grad() (torchrl.envs.envbase method)": [[41, "torchrl.envs.EnvBase.zero_grad"]], "envcreator (class in torchrl.envs)": [[42, "torchrl.envs.EnvCreator"]], "envmetadata (class in torchrl.envs)": [[43, "torchrl.envs.EnvMetaData"]], "gymlikeenv (class in torchrl.envs)": [[44, "torchrl.envs.GymLikeEnv"]], "add_module() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.add_module"]], "apply() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.apply"]], "batch_locked (torchrl.envs.gymlikeenv property)": [[44, "torchrl.envs.GymLikeEnv.batch_locked"]], "bfloat16() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.bfloat16"]], "buffers() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.buffers"]], "children() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.children"]], "close() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.close"]], "cpu() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.cpu"]], "cuda() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.cuda"]], "double() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.double"]], "eval() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.eval"]], "extra_repr() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.fake_tensordict"]], "float() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.float"]], "forward() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.forward"]], "get_buffer() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.get_buffer"]], "get_extra_state() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.get_extra_state"]], "get_parameter() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.get_parameter"]], "get_submodule() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.get_submodule"]], "half() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.half"]], "ipu() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.ipu"]], "load_state_dict() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.load_state_dict"]], "modules() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.modules"]], "named_buffers() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.named_buffers"]], "named_children() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.named_children"]], "named_modules() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.named_modules"]], "named_parameters() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.named_parameters"]], "parameters() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.parameters"]], "rand_step() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.rand_step"]], "read_action() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.read_action"]], "read_done() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.read_done"]], "read_obs() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.read_obs"]], "read_reward() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.read_reward"]], "register_backward_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_module"]], "register_parameter() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.requires_grad_"]], "reset() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.reset"]], "rollout() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.rollout"]], "set_extra_state() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.set_extra_state"]], "set_info_dict_reader() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.set_info_dict_reader"]], "set_seed() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.set_seed"]], "share_memory() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.share_memory"]], "specs (torchrl.envs.gymlikeenv property)": [[44, "torchrl.envs.GymLikeEnv.specs"]], "state_dict() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.state_dict"]], "step() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.step"]], "to() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.to"]], "to_empty() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.to_empty"]], "train() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.train"]], "type() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.type"]], "xpu() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.xpu"]], "zero_grad() (torchrl.envs.gymlikeenv method)": [[44, "torchrl.envs.GymLikeEnv.zero_grad"]], "modelbasedenvbase() (in module torchrl.envs)": [[45, "torchrl.envs.ModelBasedEnvBase"]], "rand_step() (in module torchrl.envs)": [[45, "torchrl.envs.rand_step"]], "reset() (in module torchrl.envs)": [[45, "torchrl.envs.reset"]], "rollout() (in module torchrl.envs)": [[45, "torchrl.envs.rollout"]], "set_seed() (in module torchrl.envs)": [[45, "torchrl.envs.set_seed"]], "step() (in module torchrl.envs)": [[45, "torchrl.envs.step"]], "multithreadedenv (class in torchrl.envs)": [[46, "torchrl.envs.MultiThreadedEnv"]], "add_module() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.add_module"]], "apply() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.apply"]], "batch_locked (torchrl.envs.multithreadedenv property)": [[46, "torchrl.envs.MultiThreadedEnv.batch_locked"]], "bfloat16() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.bfloat16"]], "buffers() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.buffers"]], "children() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.children"]], "close() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.close"]], "cpu() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.cpu"]], "cuda() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.cuda"]], "double() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.double"]], "eval() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.eval"]], "extra_repr() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.fake_tensordict"]], "float() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.float"]], "forward() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.forward"]], "get_buffer() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.get_buffer"]], "get_extra_state() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.get_extra_state"]], "get_parameter() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.get_parameter"]], "get_submodule() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.get_submodule"]], "half() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.half"]], "ipu() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.ipu"]], "load_state_dict() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.load_state_dict"]], "modules() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.modules"]], "named_buffers() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.named_buffers"]], "named_children() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.named_children"]], "named_modules() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.named_modules"]], "named_parameters() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.named_parameters"]], "parameters() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.parameters"]], "rand_step() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.rand_step"]], "register_backward_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_module"]], "register_parameter() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.requires_grad_"]], "reset() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.reset"]], "rollout() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.rollout"]], "set_extra_state() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.set_extra_state"]], "set_seed() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.set_seed"]], "share_memory() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.share_memory"]], "specs (torchrl.envs.multithreadedenv property)": [[46, "torchrl.envs.MultiThreadedEnv.specs"]], "state_dict() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.state_dict"]], "step() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.step"]], "to() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.to"]], "to_empty() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.to_empty"]], "train() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.train"]], "type() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.type"]], "xpu() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.xpu"]], "zero_grad() (torchrl.envs.multithreadedenv method)": [[46, "torchrl.envs.MultiThreadedEnv.zero_grad"]], "parallelenv (class in torchrl.envs)": [[47, "torchrl.envs.ParallelEnv"]], "add_module() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.add_module"]], "apply() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.apply"]], "batch_locked (torchrl.envs.parallelenv property)": [[47, "torchrl.envs.ParallelEnv.batch_locked"]], "bfloat16() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.bfloat16"]], "buffers() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.buffers"]], "children() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.children"]], "cpu() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.cpu"]], "cuda() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.cuda"]], "double() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.double"]], "eval() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.eval"]], "extra_repr() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.fake_tensordict"]], "float() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.float"]], "forward() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.forward"]], "get_buffer() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.get_buffer"]], "get_extra_state() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.get_extra_state"]], "get_parameter() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.get_parameter"]], "get_submodule() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.get_submodule"]], "half() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.half"]], "ipu() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.ipu"]], "load_state_dict() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.load_state_dict"]], "modules() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.modules"]], "named_buffers() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.named_buffers"]], "named_children() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.named_children"]], "named_modules() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.named_modules"]], "named_parameters() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.named_parameters"]], "parameters() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.parameters"]], "rand_step() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.rand_step"]], "register_backward_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_module"]], "register_parameter() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.requires_grad_"]], "reset() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.reset"]], "rollout() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.rollout"]], "set_extra_state() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.set_extra_state"]], "set_seed() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.set_seed"]], "share_memory() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.share_memory"]], "specs (torchrl.envs.parallelenv property)": [[47, "torchrl.envs.ParallelEnv.specs"]], "state_dict() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.state_dict"]], "step() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.step"]], "to() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.to"]], "to_empty() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.to_empty"]], "train() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.train"]], "type() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.type"]], "update_kwargs() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.update_kwargs"]], "xpu() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.xpu"]], "zero_grad() (torchrl.envs.parallelenv method)": [[47, "torchrl.envs.ParallelEnv.zero_grad"]], "serialenv (class in torchrl.envs)": [[48, "torchrl.envs.SerialEnv"]], "add_module() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.add_module"]], "apply() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.apply"]], "batch_locked (torchrl.envs.serialenv property)": [[48, "torchrl.envs.SerialEnv.batch_locked"]], "bfloat16() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.bfloat16"]], "buffers() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.buffers"]], "children() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.children"]], "cpu() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.cpu"]], "cuda() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.cuda"]], "double() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.double"]], "eval() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.eval"]], "extra_repr() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.extra_repr"]], "fake_tensordict() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.fake_tensordict"]], "float() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.float"]], "forward() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.forward"]], "get_buffer() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.get_buffer"]], "get_extra_state() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.get_extra_state"]], "get_parameter() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.get_parameter"]], "get_submodule() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.get_submodule"]], "half() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.half"]], "ipu() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.ipu"]], "load_state_dict() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.load_state_dict"]], "modules() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.modules"]], "named_buffers() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.named_buffers"]], "named_children() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.named_children"]], "named_modules() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.named_modules"]], "named_parameters() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.named_parameters"]], "parameters() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.parameters"]], "rand_step() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.rand_step"]], "register_backward_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_backward_hook"]], "register_buffer() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_buffer"]], "register_forward_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_forward_hook"]], "register_forward_pre_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_forward_pre_hook"]], "register_full_backward_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_full_backward_hook"]], "register_full_backward_pre_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_full_backward_pre_hook"]], "register_load_state_dict_post_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_load_state_dict_post_hook"]], "register_module() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_module"]], "register_parameter() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_parameter"]], "register_state_dict_pre_hook() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.register_state_dict_pre_hook"]], "requires_grad_() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.requires_grad_"]], "reset() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.reset"]], "rollout() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.rollout"]], "set_extra_state() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.set_extra_state"]], "set_seed() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.set_seed"]], "share_memory() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.share_memory"]], "specs (torchrl.envs.serialenv property)": [[48, "torchrl.envs.SerialEnv.specs"]], "state_dict() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.state_dict"]], "step() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.step"]], "to() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.to"]], "to_empty() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.to_empty"]], "train() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.train"]], "type() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.type"]], "update_kwargs() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.update_kwargs"]], "xpu() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.xpu"]], "zero_grad() (torchrl.envs.serialenv method)": [[48, "torchrl.envs.SerialEnv.zero_grad"]], "specs (class in torchrl.envs)": [[49, "torchrl.envs.Specs"]], "build_tensordict() (torchrl.envs.specs method)": [[49, "torchrl.envs.Specs.build_tensordict"]], "braxenv() (in module torchrl.envs.libs.brax)": [[50, "torchrl.envs.libs.brax.BraxEnv"]], "braxwrapper() (in module torchrl.envs.libs.brax)": [[51, "torchrl.envs.libs.brax.BraxWrapper"]], "dmcontrolenv() (in module torchrl.envs.libs.dm_control)": [[52, "torchrl.envs.libs.dm_control.DMControlEnv"]], "dmcontrolwrapper() (in module torchrl.envs.libs.dm_control)": [[53, "torchrl.envs.libs.dm_control.DMControlWrapper"]], "gymenv() (in module torchrl.envs.libs.gym)": [[54, "torchrl.envs.libs.gym.GymEnv"]], "gymwrapper() (in module torchrl.envs.libs.gym)": [[55, "torchrl.envs.libs.gym.GymWrapper"]], "habitatenv() (in module torchrl.envs.libs.habitat)": [[56, "torchrl.envs.libs.habitat.HabitatEnv"]], "jumanjienv() (in module torchrl.envs.libs.jumanji)": [[57, "torchrl.envs.libs.jumanji.JumanjiEnv"]], "jumanjiwrapper() (in module torchrl.envs.libs.jumanji)": [[58, "torchrl.envs.libs.jumanji.JumanjiWrapper"]], "vmasenv() (in module torchrl.envs.libs.vmas)": [[59, "torchrl.envs.libs.vmas.VmasEnv"]], "vmaswrapper() (in module torchrl.envs.libs.vmas)": [[60, "torchrl.envs.libs.vmas.VmasWrapper"]], "dreamerenv() (in module torchrl.envs.model_based.dreamer)": [[61, "torchrl.envs.model_based.dreamer.DreamerEnv"]], "binarizereward (class in torchrl.envs.transforms)": [[62, "torchrl.envs.transforms.BinarizeReward"]], "transform_reward_spec() (torchrl.envs.transforms.binarizereward method)": [[62, "torchrl.envs.transforms.BinarizeReward.transform_reward_spec"]], "catframes (class in torchrl.envs.transforms)": [[63, "torchrl.envs.transforms.CatFrames"]], "forward() (torchrl.envs.transforms.catframes method)": [[63, "torchrl.envs.transforms.CatFrames.forward"]], "reset() (torchrl.envs.transforms.catframes method)": [[63, "torchrl.envs.transforms.CatFrames.reset"]], "transform_observation_spec() (torchrl.envs.transforms.catframes method)": [[63, "torchrl.envs.transforms.CatFrames.transform_observation_spec"]], "cattensors (class in torchrl.envs.transforms)": [[64, "torchrl.envs.transforms.CatTensors"]], "forward() (torchrl.envs.transforms.cattensors method)": [[64, "torchrl.envs.transforms.CatTensors.forward"]], "transform_observation_spec() (torchrl.envs.transforms.cattensors method)": [[64, "torchrl.envs.transforms.CatTensors.transform_observation_spec"]], "centercrop (class in torchrl.envs.transforms)": [[65, "torchrl.envs.transforms.CenterCrop"]], "transform_observation_spec() (torchrl.envs.transforms.centercrop method)": [[65, "torchrl.envs.transforms.CenterCrop.transform_observation_spec"]], "compose (class in torchrl.envs.transforms)": [[66, "torchrl.envs.transforms.Compose"]], "forward() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.forward"]], "reset() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.reset"]], "to() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.to"]], "transform_input_spec() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.compose method)": [[66, "torchrl.envs.transforms.Compose.transform_reward_spec"]], "discreteactionprojection (class in torchrl.envs.transforms)": [[67, "torchrl.envs.transforms.DiscreteActionProjection"]], "transform_input_spec() (torchrl.envs.transforms.discreteactionprojection method)": [[67, "torchrl.envs.transforms.DiscreteActionProjection.transform_input_spec"]], "doubletofloat (class in torchrl.envs.transforms)": [[68, "torchrl.envs.transforms.DoubleToFloat"]], "transform_input_spec() (torchrl.envs.transforms.doubletofloat method)": [[68, "torchrl.envs.transforms.DoubleToFloat.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.doubletofloat method)": [[68, "torchrl.envs.transforms.DoubleToFloat.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.doubletofloat method)": [[68, "torchrl.envs.transforms.DoubleToFloat.transform_reward_spec"]], "excludetransform (class in torchrl.envs.transforms)": [[69, "torchrl.envs.transforms.ExcludeTransform"]], "forward() (torchrl.envs.transforms.excludetransform method)": [[69, "torchrl.envs.transforms.ExcludeTransform.forward"]], "reset() (torchrl.envs.transforms.excludetransform method)": [[69, "torchrl.envs.transforms.ExcludeTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.excludetransform method)": [[69, "torchrl.envs.transforms.ExcludeTransform.transform_observation_spec"]], "finitetensordictcheck (class in torchrl.envs.transforms)": [[70, "torchrl.envs.transforms.FiniteTensorDictCheck"]], "forward() (torchrl.envs.transforms.finitetensordictcheck method)": [[70, "torchrl.envs.transforms.FiniteTensorDictCheck.forward"]], "flattenobservation (class in torchrl.envs.transforms)": [[71, "torchrl.envs.transforms.FlattenObservation"]], "forward() (torchrl.envs.transforms.flattenobservation method)": [[71, "torchrl.envs.transforms.FlattenObservation.forward"]], "transform_observation_spec() (torchrl.envs.transforms.flattenobservation method)": [[71, "torchrl.envs.transforms.FlattenObservation.transform_observation_spec"]], "frameskiptransform (class in torchrl.envs.transforms)": [[72, "torchrl.envs.transforms.FrameSkipTransform"]], "forward() (torchrl.envs.transforms.frameskiptransform method)": [[72, "torchrl.envs.transforms.FrameSkipTransform.forward"]], "grayscale (class in torchrl.envs.transforms)": [[73, "torchrl.envs.transforms.GrayScale"]], "transform_observation_spec() (torchrl.envs.transforms.grayscale method)": [[73, "torchrl.envs.transforms.GrayScale.transform_observation_spec"]], "noopresetenv (class in torchrl.envs.transforms)": [[74, "torchrl.envs.transforms.NoopResetEnv"]], "reset() (torchrl.envs.transforms.noopresetenv method)": [[74, "torchrl.envs.transforms.NoopResetEnv.reset"]], "observationnorm (class in torchrl.envs.transforms)": [[75, "torchrl.envs.transforms.ObservationNorm"]], "init_stats() (torchrl.envs.transforms.observationnorm method)": [[75, "torchrl.envs.transforms.ObservationNorm.init_stats"]], "transform_input_spec() (torchrl.envs.transforms.observationnorm method)": [[75, "torchrl.envs.transforms.ObservationNorm.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.observationnorm method)": [[75, "torchrl.envs.transforms.ObservationNorm.transform_observation_spec"]], "observationtransform (class in torchrl.envs.transforms)": [[76, "torchrl.envs.transforms.ObservationTransform"]], "pinmemorytransform (class in torchrl.envs.transforms)": [[77, "torchrl.envs.transforms.PinMemoryTransform"]], "forward() (torchrl.envs.transforms.pinmemorytransform method)": [[77, "torchrl.envs.transforms.PinMemoryTransform.forward"]], "r3mtransform (class in torchrl.envs.transforms)": [[78, "torchrl.envs.transforms.R3MTransform"]], "to() (torchrl.envs.transforms.r3mtransform method)": [[78, "torchrl.envs.transforms.R3MTransform.to"]], "randomcroptensordict (class in torchrl.envs.transforms)": [[79, "torchrl.envs.transforms.RandomCropTensorDict"]], "forward() (torchrl.envs.transforms.randomcroptensordict method)": [[79, "torchrl.envs.transforms.RandomCropTensorDict.forward"]], "resize (class in torchrl.envs.transforms)": [[80, "torchrl.envs.transforms.Resize"]], "transform_observation_spec() (torchrl.envs.transforms.resize method)": [[80, "torchrl.envs.transforms.Resize.transform_observation_spec"]], "rewardclipping (class in torchrl.envs.transforms)": [[81, "torchrl.envs.transforms.RewardClipping"]], "transform_reward_spec() (torchrl.envs.transforms.rewardclipping method)": [[81, "torchrl.envs.transforms.RewardClipping.transform_reward_spec"]], "rewardscaling (class in torchrl.envs.transforms)": [[82, "torchrl.envs.transforms.RewardScaling"]], "transform_reward_spec() (torchrl.envs.transforms.rewardscaling method)": [[82, "torchrl.envs.transforms.RewardScaling.transform_reward_spec"]], "rewardsum (class in torchrl.envs.transforms)": [[83, "torchrl.envs.transforms.RewardSum"]], "reset() (torchrl.envs.transforms.rewardsum method)": [[83, "torchrl.envs.transforms.RewardSum.reset"]], "transform_observation_spec() (torchrl.envs.transforms.rewardsum method)": [[83, "torchrl.envs.transforms.RewardSum.transform_observation_spec"]], "selecttransform (class in torchrl.envs.transforms)": [[84, "torchrl.envs.transforms.SelectTransform"]], "forward() (torchrl.envs.transforms.selecttransform method)": [[84, "torchrl.envs.transforms.SelectTransform.forward"]], "reset() (torchrl.envs.transforms.selecttransform method)": [[84, "torchrl.envs.transforms.SelectTransform.reset"]], "transform_observation_spec() (torchrl.envs.transforms.selecttransform method)": [[84, "torchrl.envs.transforms.SelectTransform.transform_observation_spec"]], "squeezetransform (class in torchrl.envs.transforms)": [[85, "torchrl.envs.transforms.SqueezeTransform"]], "stepcounter (class in torchrl.envs.transforms)": [[86, "torchrl.envs.transforms.StepCounter"]], "forward() (torchrl.envs.transforms.stepcounter method)": [[86, "torchrl.envs.transforms.StepCounter.forward"]], "reset() (torchrl.envs.transforms.stepcounter method)": [[86, "torchrl.envs.transforms.StepCounter.reset"]], "transform_input_spec() (torchrl.envs.transforms.stepcounter method)": [[86, "torchrl.envs.transforms.StepCounter.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.stepcounter method)": [[86, "torchrl.envs.transforms.StepCounter.transform_observation_spec"]], "tensordictprimer (class in torchrl.envs.transforms)": [[87, "torchrl.envs.transforms.TensorDictPrimer"]], "forward() (torchrl.envs.transforms.tensordictprimer method)": [[87, "torchrl.envs.transforms.TensorDictPrimer.forward"]], "reset() (torchrl.envs.transforms.tensordictprimer method)": [[87, "torchrl.envs.transforms.TensorDictPrimer.reset"]], "to() (torchrl.envs.transforms.tensordictprimer method)": [[87, "torchrl.envs.transforms.TensorDictPrimer.to"]], "transform_observation_spec() (torchrl.envs.transforms.tensordictprimer method)": [[87, "torchrl.envs.transforms.TensorDictPrimer.transform_observation_spec"]], "timemaxpool (class in torchrl.envs.transforms)": [[88, "torchrl.envs.transforms.TimeMaxPool"]], "forward() (torchrl.envs.transforms.timemaxpool method)": [[88, "torchrl.envs.transforms.TimeMaxPool.forward"]], "reset() (torchrl.envs.transforms.timemaxpool method)": [[88, "torchrl.envs.transforms.TimeMaxPool.reset"]], "transform_observation_spec() (torchrl.envs.transforms.timemaxpool method)": [[88, "torchrl.envs.transforms.TimeMaxPool.transform_observation_spec"]], "totensorimage (class in torchrl.envs.transforms)": [[89, "torchrl.envs.transforms.ToTensorImage"]], "transform_observation_spec() (torchrl.envs.transforms.totensorimage method)": [[89, "torchrl.envs.transforms.ToTensorImage.transform_observation_spec"]], "transform (class in torchrl.envs.transforms)": [[90, "torchrl.envs.transforms.Transform"]], "forward() (torchrl.envs.transforms.transform method)": [[90, "torchrl.envs.transforms.Transform.forward"]], "reset() (torchrl.envs.transforms.transform method)": [[90, "torchrl.envs.transforms.Transform.reset"]], "transform_input_spec() (torchrl.envs.transforms.transform method)": [[90, "torchrl.envs.transforms.Transform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.transform method)": [[90, "torchrl.envs.transforms.Transform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.transform method)": [[90, "torchrl.envs.transforms.Transform.transform_reward_spec"]], "transformedenv (class in torchrl.envs.transforms)": [[91, "torchrl.envs.transforms.TransformedEnv"]], "action_spec (torchrl.envs.transforms.transformedenv property)": [[91, "torchrl.envs.transforms.TransformedEnv.action_spec"]], "batch_locked (torchrl.envs.transforms.transformedenv property)": [[91, "torchrl.envs.transforms.TransformedEnv.batch_locked"]], "eval() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.eval"]], "input_spec (torchrl.envs.transforms.transformedenv property)": [[91, "torchrl.envs.transforms.TransformedEnv.input_spec"]], "load_state_dict() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.load_state_dict"]], "observation_spec (torchrl.envs.transforms.transformedenv property)": [[91, "torchrl.envs.transforms.TransformedEnv.observation_spec"]], "reward_spec (torchrl.envs.transforms.transformedenv property)": [[91, "torchrl.envs.transforms.TransformedEnv.reward_spec"]], "set_seed() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.set_seed"]], "state_dict() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.state_dict"]], "to() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.to"]], "train() (torchrl.envs.transforms.transformedenv method)": [[91, "torchrl.envs.transforms.TransformedEnv.train"]], "unsqueezetransform (class in torchrl.envs.transforms)": [[92, "torchrl.envs.transforms.UnsqueezeTransform"]], "transform_input_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[92, "torchrl.envs.transforms.UnsqueezeTransform.transform_input_spec"]], "transform_observation_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[92, "torchrl.envs.transforms.UnsqueezeTransform.transform_observation_spec"]], "transform_reward_spec() (torchrl.envs.transforms.unsqueezetransform method)": [[92, "torchrl.envs.transforms.UnsqueezeTransform.transform_reward_spec"]], "viprewardtransform (class in torchrl.envs.transforms)": [[93, "torchrl.envs.transforms.VIPRewardTransform"]], "forward() (torchrl.envs.transforms.viprewardtransform method)": [[93, "torchrl.envs.transforms.VIPRewardTransform.forward"]], "reset() (torchrl.envs.transforms.viprewardtransform method)": [[93, "torchrl.envs.transforms.VIPRewardTransform.reset"]], "viptransform (class in torchrl.envs.transforms)": [[94, "torchrl.envs.transforms.VIPTransform"]], "to() (torchrl.envs.transforms.viptransform method)": [[94, "torchrl.envs.transforms.VIPTransform.to"]], "vecnorm (class in torchrl.envs.transforms)": [[95, "torchrl.envs.transforms.VecNorm"]], "build_td_for_shared_vecnorm() (torchrl.envs.transforms.vecnorm static method)": [[95, "torchrl.envs.transforms.VecNorm.build_td_for_shared_vecnorm"]], "forward() (torchrl.envs.transforms.vecnorm method)": [[95, "torchrl.envs.transforms.VecNorm.forward"]], "get_extra_state() (torchrl.envs.transforms.vecnorm method)": [[95, "torchrl.envs.transforms.VecNorm.get_extra_state"]], "set_extra_state() (torchrl.envs.transforms.vecnorm method)": [[95, "torchrl.envs.transforms.VecNorm.set_extra_state"]], "to_observation_norm() (torchrl.envs.transforms.vecnorm method)": [[95, "torchrl.envs.transforms.VecNorm.to_observation_norm"]], "gsdenoise (class in torchrl.envs.transforms)": [[96, "torchrl.envs.transforms.gSDENoise"]], "check_env_specs() (in module torchrl.envs.utils)": [[97, "torchrl.envs.utils.check_env_specs"]], "exploration_mode() (in module torchrl.envs.utils)": [[98, "torchrl.envs.utils.exploration_mode"]], "get_available_libraries() (in module torchrl.envs.utils)": [[99, "torchrl.envs.utils.get_available_libraries"]], "set_exploration_mode() (in module torchrl.envs.utils)": [[100, "torchrl.envs.utils.set_exploration_mode"]], "step_mdp() (in module torchrl.envs.utils)": [[101, "torchrl.envs.utils.step_mdp"]], "cemplanner (class in torchrl.modules)": [[102, "torchrl.modules.CEMPlanner"]], "planning() (torchrl.modules.cemplanner method)": [[102, "torchrl.modules.CEMPlanner.planning"]], "convnet (class in torchrl.modules)": [[103, "torchrl.modules.ConvNet"]], "forward() (torchrl.modules.convnet method)": [[103, "torchrl.modules.ConvNet.forward"]], "ddpgcnnactor (class in torchrl.modules)": [[104, "torchrl.modules.DdpgCnnActor"]], "forward() (torchrl.modules.ddpgcnnactor method)": [[104, "torchrl.modules.DdpgCnnActor.forward"]], "ddpgcnnqnet (class in torchrl.modules)": [[105, "torchrl.modules.DdpgCnnQNet"]], "forward() (torchrl.modules.ddpgcnnqnet method)": [[105, "torchrl.modules.DdpgCnnQNet.forward"]], "ddpgmlpactor (class in torchrl.modules)": [[106, "torchrl.modules.DdpgMlpActor"]], "forward() (torchrl.modules.ddpgmlpactor method)": [[106, "torchrl.modules.DdpgMlpActor.forward"]], "ddpgmlpqnet (class in torchrl.modules)": [[107, "torchrl.modules.DdpgMlpQNet"]], "forward() (torchrl.modules.ddpgmlpqnet method)": [[107, "torchrl.modules.DdpgMlpQNet.forward"]], "delta (class in torchrl.modules)": [[108, "torchrl.modules.Delta"]], "log_prob() (torchrl.modules.delta method)": [[108, "torchrl.modules.Delta.log_prob"]], "mean (torchrl.modules.delta property)": [[108, "torchrl.modules.Delta.mean"]], "mode (torchrl.modules.delta property)": [[108, "torchrl.modules.Delta.mode"]], "rsample() (torchrl.modules.delta method)": [[108, "torchrl.modules.Delta.rsample"]], "sample() (torchrl.modules.delta method)": [[108, "torchrl.modules.Delta.sample"]], "distributionaldqnnet (class in torchrl.modules)": [[109, "torchrl.modules.DistributionalDQNnet"]], "forward() (torchrl.modules.distributionaldqnnet method)": [[109, "torchrl.modules.DistributionalDQNnet.forward"]], "dreameractor (class in torchrl.modules)": [[110, "torchrl.modules.DreamerActor"]], "forward() (torchrl.modules.dreameractor method)": [[110, "torchrl.modules.DreamerActor.forward"]], "duelingcnndqnet (class in torchrl.modules)": [[111, "torchrl.modules.DuelingCnnDQNet"]], "forward() (torchrl.modules.duelingcnndqnet method)": [[111, "torchrl.modules.DuelingCnnDQNet.forward"]], "independentnormal (class in torchrl.modules)": [[112, "torchrl.modules.IndependentNormal"]], "mode (torchrl.modules.independentnormal property)": [[112, "torchrl.modules.IndependentNormal.mode"]], "lstmnet (class in torchrl.modules)": [[113, "torchrl.modules.LSTMNet"]], "forward() (torchrl.modules.lstmnet method)": [[113, "torchrl.modules.LSTMNet.forward"]], "mlp (class in torchrl.modules)": [[114, "torchrl.modules.MLP"]], "forward() (torchrl.modules.mlp method)": [[114, "torchrl.modules.MLP.forward"]], "mpcplannerbase (class in torchrl.modules)": [[115, "torchrl.modules.MPCPlannerBase"]], "forward() (torchrl.modules.mpcplannerbase method)": [[115, "torchrl.modules.MPCPlannerBase.forward"]], "planning() (torchrl.modules.mpcplannerbase method)": [[115, "torchrl.modules.MPCPlannerBase.planning"]], "mppiplanner (class in torchrl.modules)": [[116, "torchrl.modules.MPPIPlanner"]], "planning() (torchrl.modules.mppiplanner method)": [[116, "torchrl.modules.MPPIPlanner.planning"]], "noisylazylinear (class in torchrl.modules)": [[117, "torchrl.modules.NoisyLazyLinear"]], "initialize_parameters() (torchrl.modules.noisylazylinear method)": [[117, "torchrl.modules.NoisyLazyLinear.initialize_parameters"]], "noisylinear (class in torchrl.modules)": [[118, "torchrl.modules.NoisyLinear"]], "normalparamwrapper (class in torchrl.modules)": [[119, "torchrl.modules.NormalParamWrapper"]], "forward() (torchrl.modules.normalparamwrapper method)": [[119, "torchrl.modules.NormalParamWrapper.forward"]], "obsdecoder (class in torchrl.modules)": [[120, "torchrl.modules.ObsDecoder"]], "forward() (torchrl.modules.obsdecoder method)": [[120, "torchrl.modules.ObsDecoder.forward"]], "obsencoder (class in torchrl.modules)": [[121, "torchrl.modules.ObsEncoder"]], "forward() (torchrl.modules.obsencoder method)": [[121, "torchrl.modules.ObsEncoder.forward"]], "onehotcategorical (class in torchrl.modules)": [[122, "torchrl.modules.OneHotCategorical"]], "log_prob() (torchrl.modules.onehotcategorical method)": [[122, "torchrl.modules.OneHotCategorical.log_prob"]], "mode (torchrl.modules.onehotcategorical property)": [[122, "torchrl.modules.OneHotCategorical.mode"]], "rsample() (torchrl.modules.onehotcategorical method)": [[122, "torchrl.modules.OneHotCategorical.rsample"]], "sample() (torchrl.modules.onehotcategorical method)": [[122, "torchrl.modules.OneHotCategorical.sample"]], "rssmposterior (class in torchrl.modules)": [[123, "torchrl.modules.RSSMPosterior"]], "forward() (torchrl.modules.rssmposterior method)": [[123, "torchrl.modules.RSSMPosterior.forward"]], "rssmprior (class in torchrl.modules)": [[124, "torchrl.modules.RSSMPrior"]], "forward() (torchrl.modules.rssmprior method)": [[124, "torchrl.modules.RSSMPrior.forward"]], "tanhdelta (class in torchrl.modules)": [[125, "torchrl.modules.TanhDelta"]], "mean (torchrl.modules.tanhdelta property)": [[125, "torchrl.modules.TanhDelta.mean"]], "mode (torchrl.modules.tanhdelta property)": [[125, "torchrl.modules.TanhDelta.mode"]], "tanhnormal (class in torchrl.modules)": [[126, "torchrl.modules.TanhNormal"]], "mode (torchrl.modules.tanhnormal property)": [[126, "torchrl.modules.TanhNormal.mode"]], "truncatednormal (class in torchrl.modules)": [[127, "torchrl.modules.TruncatedNormal"]], "log_prob() (torchrl.modules.truncatednormal method)": [[127, "torchrl.modules.TruncatedNormal.log_prob"]], "mode (torchrl.modules.truncatednormal property)": [[127, "torchrl.modules.TruncatedNormal.mode"]], "reset_noise (class in torchrl.modules)": [[128, "torchrl.modules.reset_noise"]], "actor (class in torchrl.modules.tensordict_module)": [[129, "torchrl.modules.tensordict_module.Actor"]], "actorcriticoperator (class in torchrl.modules.tensordict_module)": [[130, "torchrl.modules.tensordict_module.ActorCriticOperator"]], "get_critic_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[130, "torchrl.modules.tensordict_module.ActorCriticOperator.get_critic_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticoperator method)": [[130, "torchrl.modules.tensordict_module.ActorCriticOperator.get_value_operator"]], "actorcriticwrapper (class in torchrl.modules.tensordict_module)": [[131, "torchrl.modules.tensordict_module.ActorCriticWrapper"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[131, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorcriticwrapper method)": [[131, "torchrl.modules.tensordict_module.ActorCriticWrapper.get_value_operator"]], "actorvalueoperator (class in torchrl.modules.tensordict_module)": [[132, "torchrl.modules.tensordict_module.ActorValueOperator"]], "get_policy_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[132, "torchrl.modules.tensordict_module.ActorValueOperator.get_policy_operator"]], "get_value_operator() (torchrl.modules.tensordict_module.actorvalueoperator method)": [[132, "torchrl.modules.tensordict_module.ActorValueOperator.get_value_operator"]], "additivegaussianwrapper (class in torchrl.modules.tensordict_module)": [[133, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper"]], "forward() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[133, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.forward"]], "step() (torchrl.modules.tensordict_module.additivegaussianwrapper method)": [[133, "torchrl.modules.tensordict_module.AdditiveGaussianWrapper.step"]], "distributionalqvalueactor (class in torchrl.modules.tensordict_module)": [[134, "torchrl.modules.tensordict_module.DistributionalQValueActor"]], "egreedywrapper (class in torchrl.modules.tensordict_module)": [[135, "torchrl.modules.tensordict_module.EGreedyWrapper"]], "forward() (torchrl.modules.tensordict_module.egreedywrapper method)": [[135, "torchrl.modules.tensordict_module.EGreedyWrapper.forward"]], "step() (torchrl.modules.tensordict_module.egreedywrapper method)": [[135, "torchrl.modules.tensordict_module.EGreedyWrapper.step"]], "ornsteinuhlenbeckprocesswrapper (class in torchrl.modules.tensordict_module)": [[136, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper"]], "forward() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[136, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.forward"]], "step() (torchrl.modules.tensordict_module.ornsteinuhlenbeckprocesswrapper method)": [[136, "torchrl.modules.tensordict_module.OrnsteinUhlenbeckProcessWrapper.step"]], "probabilisticactor (class in torchrl.modules.tensordict_module)": [[137, "torchrl.modules.tensordict_module.ProbabilisticActor"]], "qvalueactor (class in torchrl.modules.tensordict_module)": [[138, "torchrl.modules.tensordict_module.QValueActor"]], "safemodule (class in torchrl.modules.tensordict_module)": [[139, "torchrl.modules.tensordict_module.SafeModule"]], "random() (torchrl.modules.tensordict_module.safemodule method)": [[139, "torchrl.modules.tensordict_module.SafeModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safemodule method)": [[139, "torchrl.modules.tensordict_module.SafeModule.random_sample"]], "to() (torchrl.modules.tensordict_module.safemodule method)": [[139, "torchrl.modules.tensordict_module.SafeModule.to"]], "safeprobabilisticmodule (class in torchrl.modules.tensordict_module)": [[140, "torchrl.modules.tensordict_module.SafeProbabilisticModule"]], "random() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[140, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random"]], "random_sample() (torchrl.modules.tensordict_module.safeprobabilisticmodule method)": [[140, "torchrl.modules.tensordict_module.SafeProbabilisticModule.random_sample"]], "safeprobabilisticsequential (class in torchrl.modules.tensordict_module)": [[141, "torchrl.modules.tensordict_module.SafeProbabilisticSequential"]], "safesequential (class in torchrl.modules.tensordict_module)": [[142, "torchrl.modules.tensordict_module.SafeSequential"]], "valueoperator (class in torchrl.modules.tensordict_module)": [[143, "torchrl.modules.tensordict_module.ValueOperator"]], "worldmodelwrapper (class in torchrl.modules.tensordict_module)": [[144, "torchrl.modules.tensordict_module.WorldModelWrapper"]], "get_reward_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[144, "torchrl.modules.tensordict_module.WorldModelWrapper.get_reward_operator"]], "get_transition_model_operator() (torchrl.modules.tensordict_module.worldmodelwrapper method)": [[144, "torchrl.modules.tensordict_module.WorldModelWrapper.get_transition_model_operator"]], "distributionalqvaluehook (class in torchrl.modules.tensordict_module.actors)": [[145, "torchrl.modules.tensordict_module.actors.DistributionalQValueHook"]], "qvaluehook (class in torchrl.modules.tensordict_module.actors)": [[146, "torchrl.modules.tensordict_module.actors.QValueHook"]], "ensure_tensordict_compatible (class in torchrl.modules.tensordict_module.common)": [[147, "torchrl.modules.tensordict_module.common.ensure_tensordict_compatible"]], "is_tensordict_compatible (class in torchrl.modules.tensordict_module.common)": [[148, "torchrl.modules.tensordict_module.common.is_tensordict_compatible"]], "biased_softplus (class in torchrl.modules.utils)": [[149, "torchrl.modules.utils.biased_softplus"]], "forward() (torchrl.modules.utils.biased_softplus method)": [[149, "torchrl.modules.utils.biased_softplus.forward"]], "inv_softplus (class in torchrl.modules.utils)": [[150, "torchrl.modules.utils.inv_softplus"]], "mappings (class in torchrl.modules.utils)": [[151, "torchrl.modules.utils.mappings"]], "a2closs (class in torchrl.objectives)": [[152, "torchrl.objectives.A2CLoss"]], "forward() (torchrl.objectives.a2closs method)": [[152, "torchrl.objectives.A2CLoss.forward"]], "clipppoloss (class in torchrl.objectives)": [[153, "torchrl.objectives.ClipPPOLoss"]], "forward() (torchrl.objectives.clipppoloss method)": [[153, "torchrl.objectives.ClipPPOLoss.forward"]], "ddpgloss (class in torchrl.objectives)": [[154, "torchrl.objectives.DDPGLoss"]], "forward() (torchrl.objectives.ddpgloss method)": [[154, "torchrl.objectives.DDPGLoss.forward"]], "dqnloss (class in torchrl.objectives)": [[155, "torchrl.objectives.DQNLoss"]], "forward() (torchrl.objectives.dqnloss method)": [[155, "torchrl.objectives.DQNLoss.forward"]], "distributionaldqnloss (class in torchrl.objectives)": [[156, "torchrl.objectives.DistributionalDQNLoss"]], "forward() (torchrl.objectives.distributionaldqnloss method)": [[156, "torchrl.objectives.DistributionalDQNLoss.forward"]], "dreameractorloss (class in torchrl.objectives)": [[157, "torchrl.objectives.DreamerActorLoss"]], "forward() (torchrl.objectives.dreameractorloss method)": [[157, "torchrl.objectives.DreamerActorLoss.forward"]], "dreamermodelloss (class in torchrl.objectives)": [[158, "torchrl.objectives.DreamerModelLoss"]], "forward() (torchrl.objectives.dreamermodelloss method)": [[158, "torchrl.objectives.DreamerModelLoss.forward"]], "dreamervalueloss (class in torchrl.objectives)": [[159, "torchrl.objectives.DreamerValueLoss"]], "forward() (torchrl.objectives.dreamervalueloss method)": [[159, "torchrl.objectives.DreamerValueLoss.forward"]], "hardupdate (class in torchrl.objectives)": [[160, "torchrl.objectives.HardUpdate"]], "klpenppoloss (class in torchrl.objectives)": [[161, "torchrl.objectives.KLPENPPOLoss"]], "forward() (torchrl.objectives.klpenppoloss method)": [[161, "torchrl.objectives.KLPENPPOLoss.forward"]], "ppoloss (class in torchrl.objectives)": [[162, "torchrl.objectives.PPOLoss"]], "forward() (torchrl.objectives.ppoloss method)": [[162, "torchrl.objectives.PPOLoss.forward"]], "redqloss (class in torchrl.objectives)": [[163, "torchrl.objectives.REDQLoss"]], "forward() (torchrl.objectives.redqloss method)": [[163, "torchrl.objectives.REDQLoss.forward"]], "reinforceloss (class in torchrl.objectives)": [[164, "torchrl.objectives.ReinforceLoss"]], "forward() (torchrl.objectives.reinforceloss method)": [[164, "torchrl.objectives.ReinforceLoss.forward"]], "sacloss (class in torchrl.objectives)": [[165, "torchrl.objectives.SACLoss"]], "forward() (torchrl.objectives.sacloss method)": [[165, "torchrl.objectives.SACLoss.forward"]], "softupdate (class in torchrl.objectives)": [[166, "torchrl.objectives.SoftUpdate"]], "distance_loss (class in torchrl.objectives)": [[167, "torchrl.objectives.distance_loss"]], "hold_out_net (class in torchrl.objectives)": [[168, "torchrl.objectives.hold_out_net"]], "hold_out_params (class in torchrl.objectives)": [[169, "torchrl.objectives.hold_out_params"]], "next_state_value (class in torchrl.objectives)": [[170, "torchrl.objectives.next_state_value"]], "gae (class in torchrl.objectives.value)": [[171, "torchrl.objectives.value.GAE"]], "forward() (torchrl.objectives.value.gae method)": [[171, "torchrl.objectives.value.GAE.forward"]], "tdestimate (class in torchrl.objectives.value)": [[172, "torchrl.objectives.value.TDEstimate"]], "forward() (torchrl.objectives.value.tdestimate method)": [[172, "torchrl.objectives.value.TDEstimate.forward"]], "tdlambdaestimate (class in torchrl.objectives.value)": [[173, "torchrl.objectives.value.TDLambdaEstimate"]], "forward() (torchrl.objectives.value.tdlambdaestimate method)": [[173, "torchrl.objectives.value.TDLambdaEstimate.forward"]], "generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[174, "torchrl.objectives.value.functional.generalized_advantage_estimate"]], "td_advantage_estimate (class in torchrl.objectives.value.functional)": [[175, "torchrl.objectives.value.functional.td_advantage_estimate"]], "td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[176, "torchrl.objectives.value.functional.td_lambda_advantage_estimate"]], "td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[177, "torchrl.objectives.value.functional.td_lambda_return_estimate"]], "vec_generalized_advantage_estimate (class in torchrl.objectives.value.functional)": [[178, "torchrl.objectives.value.functional.vec_generalized_advantage_estimate"]], "vec_td_lambda_advantage_estimate (class in torchrl.objectives.value.functional)": [[179, "torchrl.objectives.value.functional.vec_td_lambda_advantage_estimate"]], "vec_td_lambda_return_estimate (class in torchrl.objectives.value.functional)": [[180, "torchrl.objectives.value.functional.vec_td_lambda_return_estimate"]], "tensordictrecorder() (in module torchrl.record)": [[181, "torchrl.record.TensorDictRecorder"]], "videorecorder() (in module torchrl.record)": [[182, "torchrl.record.VideoRecorder"]], "csvlogger() (in module torchrl.record.loggers)": [[183, "torchrl.record.loggers.CSVLogger"]], "logger() (in module torchrl.record.loggers)": [[184, "torchrl.record.loggers.Logger"]], "mlflowlogger() (in module torchrl.record.loggers)": [[185, "torchrl.record.loggers.MLFlowLogger"]], "tensorboardlogger() (in module torchrl.record.loggers)": [[186, "torchrl.record.loggers.TensorboardLogger"]], "wandblogger() (in module torchrl.record.loggers)": [[187, "torchrl.record.loggers.WandbLogger"]], "generate_exp_name() (in module torchrl.record.loggers)": [[188, "torchrl.record.loggers.generate_exp_name"]], "get_logger() (in module torchrl.record.loggers)": [[189, "torchrl.record.loggers.get_logger"]], "batchsubsampler (class in torchrl.trainers)": [[190, "torchrl.trainers.BatchSubSampler"]], "clearcudacache (class in torchrl.trainers)": [[191, "torchrl.trainers.ClearCudaCache"]], "countframeslog (class in torchrl.trainers)": [[192, "torchrl.trainers.CountFramesLog"]], "logreward (class in torchrl.trainers)": [[193, "torchrl.trainers.LogReward"]], "optimizerhook (class in torchrl.trainers)": [[194, "torchrl.trainers.OptimizerHook"]], "recorder (class in torchrl.trainers)": [[195, "torchrl.trainers.Recorder"]], "replaybuffertrainer (class in torchrl.trainers)": [[196, "torchrl.trainers.ReplayBufferTrainer"]], "rewardnormalizer (class in torchrl.trainers)": [[197, "torchrl.trainers.RewardNormalizer"]], "selectkeys (class in torchrl.trainers)": [[198, "torchrl.trainers.SelectKeys"]], "trainer (class in torchrl.trainers)": [[199, "torchrl.trainers.Trainer"]], "trainerhookbase (class in torchrl.trainers)": [[200, "torchrl.trainers.TrainerHookBase"]], "updateweights (class in torchrl.trainers)": [[201, "torchrl.trainers.UpdateWeights"]], "correct_for_frame_skip() (in module torchrl.trainers.helpers)": [[202, "torchrl.trainers.helpers.correct_for_frame_skip"]], "get_stats_random_rollout() (in module torchrl.trainers.helpers)": [[203, "torchrl.trainers.helpers.get_stats_random_rollout"]], "make_a2c_loss() (in module torchrl.trainers.helpers)": [[204, "torchrl.trainers.helpers.make_a2c_loss"]], "make_a2c_model() (in module torchrl.trainers.helpers)": [[205, "torchrl.trainers.helpers.make_a2c_model"]], "make_collector_offpolicy() (in module torchrl.trainers.helpers)": [[206, "torchrl.trainers.helpers.make_collector_offpolicy"]], "make_collector_onpolicy() (in module torchrl.trainers.helpers)": [[207, "torchrl.trainers.helpers.make_collector_onpolicy"]], "make_ddpg_actor() (in module torchrl.trainers.helpers)": [[208, "torchrl.trainers.helpers.make_ddpg_actor"]], "make_ddpg_loss() (in module torchrl.trainers.helpers)": [[209, "torchrl.trainers.helpers.make_ddpg_loss"]], "make_dqn_actor() (in module torchrl.trainers.helpers)": [[210, "torchrl.trainers.helpers.make_dqn_actor"]], "make_dqn_loss() (in module torchrl.trainers.helpers)": [[211, "torchrl.trainers.helpers.make_dqn_loss"]], "make_ppo_loss() (in module torchrl.trainers.helpers)": [[212, "torchrl.trainers.helpers.make_ppo_loss"]], "make_ppo_model() (in module torchrl.trainers.helpers)": [[213, "torchrl.trainers.helpers.make_ppo_model"]], "make_redq_loss() (in module torchrl.trainers.helpers)": [[214, "torchrl.trainers.helpers.make_redq_loss"]], "make_redq_model() (in module torchrl.trainers.helpers)": [[215, "torchrl.trainers.helpers.make_redq_model"]], "make_replay_buffer() (in module torchrl.trainers.helpers)": [[216, "torchrl.trainers.helpers.make_replay_buffer"]], "make_sac_loss() (in module torchrl.trainers.helpers)": [[217, "torchrl.trainers.helpers.make_sac_loss"]], "make_sac_model() (in module torchrl.trainers.helpers)": [[218, "torchrl.trainers.helpers.make_sac_model"]], "make_target_updater() (in module torchrl.trainers.helpers)": [[219, "torchrl.trainers.helpers.make_target_updater"]], "make_trainer() (in module torchrl.trainers.helpers)": [[220, "torchrl.trainers.helpers.make_trainer"]], "parallel_env_constructor() (in module torchrl.trainers.helpers)": [[221, "torchrl.trainers.helpers.parallel_env_constructor"]], "sync_async_collector() (in module torchrl.trainers.helpers)": [[222, "torchrl.trainers.helpers.sync_async_collector"]], "sync_sync_collector() (in module torchrl.trainers.helpers)": [[223, "torchrl.trainers.helpers.sync_sync_collector"]], "transformed_env_constructor() (in module torchrl.trainers.helpers)": [[224, "torchrl.trainers.helpers.transformed_env_constructor"]]}})